var MD5_REGEX = /md5=([0-9a-fA-F]+)/;
var AUTHOR_REGEX = /author\s*=\s*{(.*?)}/;


function detectWeb(doc, url) {
	if (url.includes('book/index.php')) {
		return 'book';
	}
	return false;
}

function doWeb(doc, url) {
	var md5Hash = MD5_REGEX.exec(url)[1];

	// To save some work, we use the provided bibtex file to retrieve the
	// metadata and use Zotero's built-in bibtex importer
	var bibtexUrl = "/book/bibtex.php?md5=" + md5Hash;
	ZU.processDocuments(bibtexUrl, function (bibtexDoc) {
		var bibtexStr = bibtexDoc.getElementsByTagName("textarea")[0].value;
		var translator = Zotero.loadTranslator('import');
		translator.setTranslator('9cb70025-a888-4a29-a210-93ec52da40d4');
		translator.setString(bibtexStr);
		translator.setHandler('itemDone', function (obj, item) {
			// The bibtex messes up multiple authors, so we set them ourselves
			var authorStr = AUTHOR_REGEX.exec(bibtexStr)[1];
			if (authorStr.includes(';')) {
				item.creators = authorStr.split(";").map(function (author) {
					// Are we dealing with "last, first" formatting?
					var useCommas = (author.includes(","));
					return ZU.cleanAuthor(author, "author", useCommas);
				});
			}
			else {
				item.creators = authorStr.split(",").map(function (author) {
					return ZU.cleanAuthor(author, "author", false);
				});
			}
			// It also messes up multiple ISBNs, so we just pick the first one
			if (item.ISBN) {
				[' ', ','].forEach(function (splitChar) {
					if (item.ISBN.includes(splitChar)) {
						item.ISBN = item.ISBN.split(splitChar)[0];
					}
				});
			}
			// Add the full text attachment
			/* NOTE: For now this is commented out, pending a decision on how to
					 deal with possibly huge downloads, see issue #1056 for details.
			var MIME_TYPES = {
				pdf: 'application/pdf',
				epub: 'application/epub+zip',
				mobi: 'application/x-mobipocket-ebook',
				djvu: 'image/vnd.djvu'
			};
			var extension = ZU.xpathText(
				doc, '//td[contains(./font/text(), "Extension")]/following-sibling::td');
			var downloadUrl = "/get/" + md5Hash + "/" + md5Hash + "." + extension;
			item.attachments.push({
				title: "Full Text",
				url: downloadUrl,
				mimeType: MIME_TYPES[extension]});
			*/
			item.complete();
		});
		translator.translate();
	});
}