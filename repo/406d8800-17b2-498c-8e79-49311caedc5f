// attr()/text() v2
// eslint-disable-next-line
function attr(docOrElem,selector,attr,index){var elem=index?docOrElem.querySelectorAll(selector).item(index):docOrElem.querySelector(selector);return elem?elem.getAttribute(attr):null}function text(docOrElem,selector,index){var elem=index?docOrElem.querySelectorAll(selector).item(index):docOrElem.querySelector(selector);return elem?elem.textContent:null}


function detectWeb(doc, url) {
	if (url.includes('/episode/')) {
		return "podcast";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;

	// Podcast pages
	var rows = doc.querySelectorAll('a.episode-link');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	// Z.debug(configJSON)
	let title = text(doc, ".episodeTitle");
	let episodeInfo = text(doc, ".episodeInfo");
	if (episodeInfo) {
		var duration = episodeInfo.replace(/\|\n?.+/, "").trim();
		var date = episodeInfo.replace(/\.+\|/, "").trim();
	}
	let podcast = text(doc, ".showTitle");
	let abstract = text(doc, ".episodeDescription");
	var item = new Zotero.Item("podcast");
	item.title = title;
	item.seriesTitle = podcast;
	item.abstractNote = abstract;
	if (duration) item.runningTime = duration;
	if (date) item.date = ZU.strToISO(date);
	item.url = url;
	item.attachments.push({ document: doc, title: "Snapshot" });
	item.complete();
}