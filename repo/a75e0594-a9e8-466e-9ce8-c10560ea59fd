function detectWeb(doc, url) {
	if (url.indexOf("/book/")>-1) {
		return "book";
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//div[contains(@class, "search-list")]//h2/a');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var item = new Zotero.Item("book");
	item.title = ZU.xpathText(doc, '//div[contains(@class, "book-header")]/h1[@class="title"]');
	var bookDetails = ZU.xpath(doc, '//div[(contains(@class, "book-header") and contains(@class, "pc-only")) or contains(@class, "book-details")]//p[@class]');
	for (var i=0; i<bookDetails.length; i++) {
		switch (bookDetails[i].className) {
			case "subtitle":
				item.title = item.title + ": " + bookDetails[i].textContent;
				break;
			case "author":
				var creatorString = ZU.trimInternal(bookDetails[i].textContent);
				Z.debug(creatorString);
				var posEditors = creatorString.indexOf("Edited");
				if (posEditors == -1) {
					posEditors = creatorString.length;
				}
				var posTranslators = creatorString.indexOf("Translated");
				if (posTranslators == -1) {
					posTranslators = creatorString.length;
				}
				//assume that editors will be mentioned before translators
				aut = creatorString.substr(0, Math.min(posEditors, posTranslators)).split(/\band\b|,/);
				for (var k=0; k<aut.length; k++) {
					if (aut[k].trim() == "") continue;
					item.creators.push(Zotero.Utilities.cleanAuthor(aut[k], "author"));
				}
				edt = creatorString.substr(posEditors, posTranslators).replace(/Edited (by)?/, "").split(/\band\b|,/);
				for (var k=0; k<edt.length; k++) {
					if (edt[k].trim() == "") continue;
					item.creators.push(Zotero.Utilities.cleanAuthor(edt[k], "editor"));
				}
				tra = creatorString.substr(posTranslators).replace(/Translated (by)?/, "").split(/\band\b|,/);
				for (var k=0; k<tra.length; k++) {
					if (tra[k].trim() == "") continue;
					item.creators.push(Zotero.Utilities.cleanAuthor(tra[k], "translator"));
				}
				break;
			case "pubdate":
				item.date = ZU.strToISO(bookDetails[i].textContent);
				break;
			case "publisher":
				item.publisher =  bookDetails[i].textContent;
				break;
			case "isbn":
				item.ISBN = bookDetails[i].textContent;
				break;
			case "pages":
				item.pages = bookDetails[i].textContent;
				break;
		}
		
	}
	
	//if there is no publisher field, assume it's published by CUP
	if (!item.publisher) {
		item.publisher = "Columbia University Press";
	}
	
	item.abstractNote = ZU.xpathText(doc, '//div[contains(@class, "sp__the-description")]');

	item.complete();
}