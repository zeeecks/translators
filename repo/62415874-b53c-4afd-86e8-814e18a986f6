function detectWeb(doc, url) {
	if (url.includes("/search")  && getSearchResults(doc, true))
		return "multiple";
	else {
		var body = doc.getElementsByTagName("body")[0];
		if ((body.className).includes('dctype-oxencycl-entry')) {
			return "bookSection";
		} else if ((body.className).includes('dctype-book')) {
			return "book";
		}
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//h3[@class="source"]/a[span[@class="title"]]');
	for (var i = 0; i < rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function(items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);

	translator.setHandler('itemDone', function(obj, item) {
		var edition = ZU.xpathText(doc, '//meta[@property="http://schema.org/bookEdition"]/@content');

		var dateCreated = ZU.xpathText(doc, '//meta[@property="http://schema.org/dateCreated"]/@content');
		if (dateCreated) item.date = dateCreated;
		else item.date = ZU.xpathText(doc, '//dl[@class="metadata metadataPrintPublicationDate"]/dd');

		var isbn = ZU.xpathText(doc, '//meta[@property="http://schema.org/isbn"]/@content');
		if (isbn) item.ISBN = isbn;
		else item.ISBN = ZU.xpathText(doc, '//dl[@class="metadata metadataPrintIsbn13"]/dd');

		var publisher = ZU.xpathText(doc, '//meta[@property="http://schema.org/publisher"]/@content');
		if (publisher) item.publisher = publisher;
		else item.publisher = ZU.xpathText(doc, '//dl[@class="metadata metadataPublisher"]/dd');

		var editors = ZU.xpath(doc, '//meta[@property="http://schema.org/editor"]/@content');
		if (editors) {
			for (var i = 0; i< editors.length; i++) {
				item.creators.push(ZU.cleanAuthor(editors[i].textContent, "editor"));
			}
		}

		var authors = ZU.xpathText(doc, '//dl[@class="metaInfo"]/dd[@class="author"]');
		if (authors) {
			authors = authors.split(',');
			for (var i = 0; i< authors.length; i++) {
				item.creators.push(ZU.cleanAuthor(authors[i], "author"));
			}
		}

		var permission = ZU.xpath(doc, '//div/p[@class = "restrictedAbstract"]');
		if (permission.length) item.abstractNote += "...";

		item.title = item.title.replace(" - Oxford Reference", "");

		item.bookTitle = ZU.xpathText(doc, '//dl[@class="metaInfo"]//dd[@class="source"]');
		item.complete();
	});

	translator.getTranslatorObject(function(trans) {
		// Writing this again because calling trans.detectWeb is not serving the purpose
		var body = doc.getElementsByTagName("body")[0];
		if ((body.className).includes('dctype-oxencycl-entry')) {
			trans.itemType = "bookSection";
		} else if ((body.className).includes('dctype-book')) {
			trans.itemType = "book";
		}

		trans.doWeb(doc, url);
	});
}