function detectWeb(doc, url) {
	if (url.includes('/book/')) {
		return "book";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a.gs-title[href*="/book/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		item.creators = [];
		for (let contrib of doc.querySelectorAll('span.contrib')) {
			let name = text(contrib, 'a');
			let type = mapContribType(
				text(contrib, '.contribtype')
					.replace(/[()]/g, '')
					.toLowerCase());
			item.creators.push(ZU.cleanAuthor(name, type));
		}
		
		let fields = {
			Rights: 'rights',
			Pages: 'numPages',
			ISBN: 'ISBN'
		};
		
		for (let metadata of doc.querySelector('.details p').innerHTML.split('<br>')) {
			metadata = ZU.trimInternal(metadata);
			
			let matches = metadata.match(/([^:]+): (.*)/);
			if (!matches) continue;
			
			let [, key, value] = matches;
			if (fields[key]) item[fields[key]] = value;
		}
		
		if (item.ISBN) {
			item.ISBN = ZU.cleanISBN(item.ISBN);
		}
		
		item.abstractNote = text(doc, '#link-about-book article');
		item.date = ZU.strToISO(text(doc, '.date'));
		item.edition = cleanEdition(text(doc, '.edition'));
		
		if (doc.querySelector('h1 span')) {
			let subtitle = ZU.trimInternal(text(doc, 'h1 span'));
			if (!item.title.includes(subtitle)) {
				item.title += `: ${subtitle}`;
			}
		}
		
		item.attachments = [];
		item.url = '';
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = "book";
		trans.doWeb(doc, url);
	});
}


function cleanEdition(text) {
	if (!text) return text;

	// from Taylor & Francis eBooks translator, slightly adapted

	const ordinals = {
		first: "1",
		second: "2",
		third: "3",
		fourth: "4",
		fifth: "5",
		sixth: "6",
		seventh: "7",
		eighth: "8",
		ninth: "9",
		tenth: "10"
	};

	text = ZU.trimInternal(text).replace(/[[\]]/g, '');
	// this somewhat complicated regex tries to isolate the number (spelled out
	// or not) and make sure that it isn't followed by any extra info
	let matches = text
		.match(/^(?:(?:([0-9]+)(?:st|nd|rd|th)?)|(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth))(?:\s?ed?\.?|\sedition)?$/i);
	if (matches) {
		let edition = matches[1] || matches[2];
		edition = ordinals[edition.toLowerCase()] || edition;
		return edition == "1" ? null : edition;
	}
	else {
		return text;
	}
}

function mapContribType(type) {
	switch (type) {
		case 'author':
			return 'author';
		case 'editor':
			return 'editor';
		case 'series editor':
			return 'seriesEditor';
		case 'translator':
			return 'translator';
		default:
			return 'contributor';
	}
}