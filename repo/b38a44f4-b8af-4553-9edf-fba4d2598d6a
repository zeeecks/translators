function detectWeb(doc, url) {
	var action = url.match(/^https?:\/\/[^/]+\/[^/]+\/([^/?#]+)/);
	if (!action) return false;
	switch (action[1]) {
		case "book":
			// test if any relevant <meta> information is available
			if (ZU.xpathText(doc, '//meta[@property="og:title"]/@content')) return "book";
			break;
		case "search":
			// test for relevant search entries
			return getSearchResults(doc, true) ? "multiple" : false;
	}
	return false;
}


function doWeb(doc, url) {
	var detectionType = detectWeb(doc, url);
	switch (detectionType) {
		case "book":
			scrapeBook(doc, url);
			break;
		case "multiple":
			Zotero.selectItems(getSearchResults(doc, false), function (items) {
				if (!items) return;
				var articles = [];
				for (var i in items) {
					articles.push(i);
				}
				ZU.processDocuments(articles, scrapeBook);
			});
			break;
	}
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var searchEntries = ZU.xpath(doc, '//div[@id="result-list"]/div');
	for (let i = 0; i < searchEntries.length; i++) {
		var itemType = searchEntries[i].getAttribute("class");
		// test if we actually have a usable result
		if (!itemType || itemType.search(/result-item-\d+/) == -1
			|| !itemType.includes('result-type-book')) continue;
		var titleLink = ZU.xpath(searchEntries[i], "h4/a");
		if (titleLink.length === 0) continue;
		// extract book title and URL
		var title = titleLink[0].textContent;
		var href = titleLink[0].getAttribute("href");
		if (!title || !href) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function scrapeBook(doc, _url) {
	// Call the embedded metadata translator
	var translator = Zotero.loadTranslator("web");
	translator.setTranslator("951c027d-74ac-47d4-a107-9c3069ab7b48");
	translator.setDocument(doc);
	translator.setHandler("itemDone", function (obj, item) {
		// From EM the item.title field looks like this:
		// item.title = <book title> | <first creator> | Springer
		item.title = ZU.xpathText(doc, '//h1');
		var subtitle = ZU.xpathText(doc, '//div[contains(@class, "bibliographic-information")]/h2');
		if (subtitle) item.title += ': ' + subtitle;
		
		// There are no creators in the Embedded Metadata and thus we need
		// to add them manually here.
		var editors = ZU.xpathText(doc, '//li[@itemprop="editor"]/span');
		var authors = ZU.xpathText(doc, '//li[@itemprop="author"]/span');
		if (editors) {
			editors = editors.split(", ");
			for (let i = 0; i < editors.length; i++) item.creators.push(ZU.cleanAuthor(editors[i], "editor", editors[i].includes(',')));
		}
		if (authors) {
			authors = authors.split(", ");
			for (let i = 0; i < authors.length; i++) item.creators.push(ZU.cleanAuthor(authors[i], "author", authors[i].includes(',')));
		}
		
		if (!item.publisher) {
			item.publisher = ZU.xpathText(doc, '//dd[@itemprop="publisher"]/span');
		}
		// see if we can seperate "Springer-Verlag <place>" into publisher and place
		if (item.publisher && item.publisher.search(/^Springer-Verlag\s.+/) != -1) {
			var publisherInfo = item.publisher.match(/^(Springer-Verlag)\s(.+)/);
			item.publisher = publisherInfo[1];
			item.place = publisherInfo[2];
		}
		
		if (!item.ISBN) {
			item.ISBN = ZU.xpathText(doc, '//dd[@itemprop="isbn"]');
		}
		
		if (!item.year) {
			var yearField = ZU.xpathText(doc, '//div[@class="copyright"]');
			if (yearField) {
				item.date = yearField.replace('Â©', '');
			}
		}
		item.series = ZU.xpathText(doc, '//a[contains(@class, "series")]');
		
		var edition = ZU.xpathText(doc, '//dt[text()="Edition Number" or text()="Auflage"]/following-sibling::dd[1]');
		if (edition && edition !== "1") item.edition = edition;
		
		var doi = ZU.xpathText(doc, '//dt[text()="DOI"]/following-sibling::dd[1]');
		if (doi) {
			if (item.extra) {
				if (!item.extra.includes("DOI")) {
					item.extra += "\nDOI: " + doi;
				}
			}
			else {
				item.extra = "DOI: " + doi;
			}
		}
		
		// The abstract note might be shortened in the <meta> field; try to load
		// the full abstract note
		var longAbstractNote = ZU.xpathText(doc, '(//div[@class="product-about"]//div[@class="springer-html"])[1]');
		if (longAbstractNote) {
			item.abstractNote = ZU.trimInternal(longAbstractNote);
		}

		item.complete();
	});
	translator.translate();
}