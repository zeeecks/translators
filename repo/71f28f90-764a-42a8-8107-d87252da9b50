const FIELDS = {
	Edition: 'edition',
	'First Published': 'date',
	'eBook Published': 'date',
	Imprint: 'publisher',
	Pages: 'numPages',
	DOI: 'extra',
	'eBook ISBN': 'ISBN',
	'Pub. Location': 'place'
};

function detectWeb(doc, url) {
	if (url.includes('/chapters/')) {
		return "bookSection";
	}
	if (url.includes('/books/')) {
		return "book";
	}
	if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('search-results-product > a');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(text(row, 'h1'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	let itemType = detectWeb(doc, url);
	if (itemType == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url, itemType);
	}
}

function scrape(doc, url, itemType) {
	if (!itemType) {
		itemType = detectWeb(doc, url);
	}

	let item = new Zotero.Item(itemType);
	item.title = text(doc, 'h1.product-banner-title');
	item.libraryCatalog = '';
	item.extra = '';
	let subtitle = text(doc, '.product-banner-subtitle');
	if (subtitle) {
		item.title += ": " + subtitle;
	}
	if (itemType == 'bookSection') {
		item.bookTitle = text(doc, 'a.product-book-link');
	}
	
	for (let creator of text(doc, '.product-banner-author-name').split(", ")) {
		let creatorType = text(doc, '.product-banner-author').includes('Edited')
			? 'editor'
			: 'author';
		item.creators.push(ZU.cleanAuthor(creator, creatorType, false));
	}
	
	for (let row of doc.querySelectorAll('product-more-details .display-row, shared-lib-product-more-details .display-row')) {
		let label = text(row, 'span:first-child');
		let value = text(row, 'span:last-child');

		let field = FIELDS[label];
		if (field) {
			if (field == 'extra') {
				if (label == "DOI") {
					value = ZU.cleanDOI(value);
				}
				item.extra += `${label}: ${value}\n`;
			}
			else if (field == 'edition') {
				item[field] = cleanEdition(value);
			}
			else if (field == 'date') {
				item[field] = ZU.strToISO(value);
			}
			else {
				item[field] = value;
			}
		}
	}
	
	item.abstractNote = text(doc, '#collapseContent') || attr(doc, 'meta[name="description"]', 'content');

	if (doc.cookie && text(doc, '#product-detail-page-state')) {
		let apiId = JSON.parse(
			doc.getElementById('product-detail-page-state').textContent
				.replace(/&q;/g, '"')
		).product._id;
		
		let tokenRow = doc.cookie
			.split('; ')
			.find(row => row.startsWith('_token='));
		if (!tokenRow) {
			// in order to pull a PDF, the user has to have visited the site in
			// their browser before. it sets a token cookie client-side.
			// it's alright if we can't find it - we just bail out early without
			// getting the PDF.
			item.complete();
			return;
		}
		let token = tokenRow.split('=')[1];
		
		ZU.doGet(`https://api.taylorfrancis.com/v4/content/${apiId}?apiVersion=4.0.1&filenamePrefix=${item.ISBN}&render=false`,
			function (respText, xhr) {
				// the request might fail if we don't have PDF access
				// but that's alright, everything else worked
				// so we treat every status as a success (last arg to doGet)
				// but only try to fetch the attachment if we got 200 OK
				
				if (xhr.status == 200) {
					let resp = JSON.parse(respText);
					for (let contentObject of resp) {
						if (contentObject.type == 'webpdf'
							|| contentObject.type == 'chapterpdf') {
							item.attachments.push({
								title: "Full Text PDF",
								mimeType: "application/pdf",
								url: contentObject.location
							});
							break;
						}
					}
				}
				
				item.complete();
			}, null, null, { Authorization: 'idtoken ' + token }, false);
	}
	else {
		item.complete();
	}
}

function cleanEdition(text) {
	const ordinals = {
		first: "1",
		second: "2",
		third: "3",
		fourth: "4",
		fifth: "5",
		sixth: "6",
		seventh: "7",
		eighth: "8",
		ninth: "9",
		tenth: "10"
	};
	
	text = ZU.trimInternal(text);
	// this somewhat complicated regex tries to isolate the number (spelled out
	// or not) and make sure that it isn't followed by any extra info
	let matches = text
		.match(/^(?:(?:([0-9]+)(?:st|nd|rd|th)?)|(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth))(?:\s?ed?\.?|\sedition)?$/i);
	if (matches) {
		let edition = matches[1] || matches[2];
		edition = ordinals[edition.toLowerCase()] || edition;
		return edition == "1" ? null : edition;
	}
	else {
		return text;
	}
}