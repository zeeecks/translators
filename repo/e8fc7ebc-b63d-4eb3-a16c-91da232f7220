function detectWeb(doc, url){
	var type = ZU.xpathText(doc, '//div[contains(@class, "resource-type")]//div[contains(@class, "metadata-value")]');
	var itemType = typeMap[type]
	if (itemType) {
		return itemType
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	} else {
		Z.debug("Unrecognized type: " + type);
		return "report";
	}
}

// Aluka types we can import
// TODO: Improve support for other Aluka item types?
// Correspondence, Circulars, Newsletters, Interviews, Pamphlets, Policy Documents, Posters, Press Releases, Reports, Testimonies, Transcripts
var typeMap = {
	"Books":"book",
	"Aluka Essays":"report",
	"photograph":"artwork",
	"Photographs":"artwork",
	"Slides (Photographs)": "artwork",
	"Panoramas":"artwork",
	"Journals (Periodicals)":"journalArticle",
	"Magazines (Periodicals)" : "magazineArticle",
	"Articles":"journalArticle",
	"Correspondence":"letter",
	"Letters (Correspondence)" : "letter",
	"Interviews":"interview",
	"Reports":"report",
	"Transcripts":"presentation",
	"Memorandums":"report"
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//h3[@class="title"]/a');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var itemType = detectWeb(doc, url);
	var newItem = new Zotero.Item(itemType);
	newItem.title = ZU.xpathText(doc, '//h1[contains(@class, "title")]');
	var rows = ZU.xpath(doc, '//section[contains(@class, "metadata-section")]/div[contains(@class, "row")]');
	for (var i=0; i<rows.length; i++) {
		var label = rows[i].className.replace("row", "").trim();
		var values = ZU.xpathText(rows[i], './/div[contains(@class, "metadata-value")]', null, "|");
		//Z.debug(label); Z.debug(values);
		switch (label) {
			case "date":
				newItem.date = values;
				break;
			case "topic":
			case "coverage-spatial":
			case "coverage-temporal":
				var tags = values.split("|");
				for (var j=0; j<tags.length; j++) {
					newItem.tags.push(ZU.cleanTags(tags[j]));
				}
				break;
			case "author":
				var authors = values.split("|");
				for (var j=0; j<authors.length; j++) {
					newItem.creators.push(ZU.cleanAuthor(authors[j], "author", true));
				}
				break;
			case "contributor":
				var authors = values.split("|");
				for (var j=0; j<authors.length; j++) {
					newItem.creators.push(ZU.cleanAuthor(authors[j], "contributor", true));
				}
				break;
			case "publisher":
				newItem.publisher = values;
				break;
			case "description":
				newItem.abstractNote = values;
				break;
			case "language":
				newItem.language = values;
				break;
			case "format-extent-lenghtsize":
				newItem.numPages = values;
				break;
			case "attribution":
				newItem.rights = values;
				break;
			case "collection":
				newItem.series = values;
				break;
			case "repository":
				newItem.archive = values;
				break;
			case "source":
				//newItem.extra = values;
				break;
		}
	}
	newItem.url = url;
	newItem.complete();
}