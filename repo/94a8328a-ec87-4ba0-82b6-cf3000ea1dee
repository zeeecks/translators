function detectWeb(doc, url) {
	if (url.includes('/project')) {
		return "computerProgram";
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	}
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//a[contains(@class, "package-snippet") and contains(@href, "/project/")]');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var item = new Z.Item("computerProgram");

	// info from h1 and meta tag
	item.title = ZU.xpathText(doc, '//h1[contains(@class, "package-header__name")]');
	var found = item.title.match(/\sv?([\d.]+)\s*$/);
	if (found) {
		item.title = item.title.slice(0,found.index);
		item.version = found[1];
	}
	var subtitle = ZU.xpathText(doc, '//meta[@property="og:description"]/@content');
	if (subtitle) {
		item.title += ": " + subtitle;
	}
	
	var author = ZU.xpathText(doc, '//div[contains(@class, "vertical-tabs__tabs")]//p[strong[contains(., "Author")]]/a');
	if (author) {
		item.creators.push(ZU.cleanAuthor(author, "author"));
	}
	item.url = ZU.xpathText(doc, '//div[contains(@class, "vertical-tabs__tabs")]//a[contains(., "Homepage")]/@href');
	item.rights = ZU.xpathText(doc, '//div[contains(@class, "vertical-tabs__tabs")]//p[strong[contains(., "License")]]/text()');
	var keywords = ZU.xpath(doc, '//div[contains(@class, "vertical-tabs__tabs")]//span[contains(@class, "package-keyword")]');
	for (let keyword of keywords) {
		item.tags.push(keyword.textContent.trim());
	}
	
	// info from linked categories
	var programmingLanguage = ZU.xpath(doc, '//div[contains(@class, "vertical-tabs__tabs")]//a[contains(@href, "/search/?c=Programming+Language+")]');
	for (let i=0; i<programmingLanguage.length; i++) {
		let split = programmingLanguage[i].textContent.split("::");
		let value = split[0].trim();
		if (item.programmingLanguage) {
			if (!item.programmingLanguage.includes(value)) {
				item.programmingLanguage += ", " + value;
			}
		} else {
			item.programmingLanguage = value;
		}
	}
	var topics = ZU.xpath(doc, '//div[contains(@class, "vertical-tabs__tabs")]//a[contains(@href, "/search/?c=Topic+")]');
	for (let topic of topics) {
		let split = topic.textContent.trim().split(" :: ");
		item.tags.push(split.join(" - "));
	}
	var license = ZU.xpathText(doc, '//div[contains(@class, "vertical-tabs__tabs")]//a[contains(@href, "/search/?c=License+")]');
	if (license && !item.rights) {
		item.rights = license;
	}
	if (item.rights) {
		item.rights = item.rights.replace(/\s?\([^\)]+\)/g, '');
	}
	var osList = ZU.xpath(doc, '//div[contains(@class, "vertical-tabs__tabs")]//a[contains(@href, "/search/?c=Operating+System+")]');
	if (osList && !item.system) {
		osList = osList.map(os => os.textContent.trim());
		item.system = osList.join(', ');
	}

	item.attachments.push({
		title: "Snapshot",
		document: doc
	});
	
	item.complete();
}