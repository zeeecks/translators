function detectWeb(doc, _url) {
	var rows = getPnxElems(doc);
	if (rows.length == 1) return "book";
	if (rows.length > 1) return "multiple";
	let exploreElem = doc.querySelector('primo-explore');
	if (exploreElem) {
		Z.monitorDOMChanges(exploreElem, { childList: true, subtree: true });
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = getPnxElems(doc);
	for (let row of rows) {
		let href = row.dataset.url;
		let title = text(row.parentNode, '.item-title')
			|| row.parentNode.textContent;
		if (!href || !title) continue;
		title = title.replace(/^;/, '');
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	}
	else {
		let pnxElems = getPnxElems(doc);
		let pnxURL = pnxElems[0].getAttribute('data-url');
		scrape(doc, pnxURL);
	}
}


function scrape(doc, pnxURL) {
	ZU.doGet(pnxURL, function (text) {
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("efd737c9-a227-4113-866e-d57fbc0684ca");
		translator.setString(text);
		translator.setHandler("itemDone", function (obj, item) {
			if (pnxURL) {
				item.libraryCatalog = pnxURL.match(/^https?:\/\/(.+?)\//)[1].replace(/\.hosted\.exlibrisgroup/, "");
			}
			item.complete();
		});
		translator.translate();
	});
}

function getPnxElems(doc) {
	let single = doc.querySelectorAll('.urlToXmlPnxSingleRecord[data-url]');
	if (single.length == 1) return single;
	return doc.querySelectorAll('.urlToXmlPnx[data-url]');
}