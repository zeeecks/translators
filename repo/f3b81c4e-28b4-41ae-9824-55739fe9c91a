function detectWeb(doc, url) {
	const collection = "/collections/search/";
	const artifact = "/collections/catalog/";
	const isCollection = url.includes(collection);
	const isArtifact = url.includes(artifact);
	if (isCollection) {
		return 'multiple';
	}
	else if (isArtifact) {
		return getZoteroItemType(doc);
	}
	return false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), (items) => {
			if (!items) {
				return true;
			}
			const articles = [];
			for (const i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
			return true;
		});
	}
	else {
		scrape(doc, url);
	}
}

function getSearchResults(doc, checkOnly) {
	let items = {};
	let found = false;
	const entries = doc.querySelectorAll('p.objtext');

	for (let i = 0; i < entries.length; i++) {
		const titleDiv = entries[i].querySelector('span.objtitle a');
		if (!titleDiv) continue;
		const href = titleDiv.href;
		const title = titleDiv.textContent;
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function scrape(doc, _) {
	const zoteroItemType = getZoteroItemType(doc);

	let newItem = new Zotero.Item(zoteroItemType);

	const nodes = getFieldNodes(doc);

	nodes.forEach((node) => {
		const fieldTitleNode = node.querySelector("h4");
		const fieldTitle = fieldTitleNode.textContent.trim();
		switch (fieldTitle) {
			case 'Title':
				newItem.title = getContent(node, fieldTitle);
				break;
			case 'Date':
				newItem.date = getContent(node, fieldTitle);
				break;
			case 'Participants':
			case 'Contributor':
				newItem.creators = getContributors(node);
				break;
			case 'Publisher':
				if (newItem.itemType == 'artwork') {
					newItem.rights = getContent(node, fieldTitle);
				}
				else {
					newItem.publisher = getContent(node, fieldTitle);
				}
				break;
			case 'Place of Publication':
				newItem.place = getContent(node, fieldTitle);
				break;
			case 'Extent':
				newItem.numPages = getContent(node, fieldTitle).replace(' p.', '');
				break;
			case 'Lot Number':
				newItem.archiveLocation = getContent(node, fieldTitle);
				break;
			case 'Description':
				newItem.abstractNote = insertToTheStartOfAbstract(getContent(node, fieldTitle), newItem.abstractNote);
				break;
			case 'Biographical Notes':
				newItem.abstractNote = insertToTheEndOfAbstract(getContent(node, fieldTitle), newItem.abstractNote, fieldTitle);
				break;
			case 'Copyright Holder':
				newItem.rights = getContent(node, fieldTitle);
				break;
			case 'Subject':
				const allTagsString = getContent(node, fieldTitle);
				const allTags = allTagsString.split(';').map(tag => tag.trim()).sort();
				if (allTags && allTags.length > 0) {
					newItem.tags = allTags;
				}
				break;
			// other archival and / or meta info that go into extra.
			case 'Format':
				if (newItem.itemType == 'videoRecording') {
					// note that format field for Video Recording type is not displayed in scaffold.
					newItem.videoRecordingFormat = getContent(node, fieldTitle);
					break;
				}
				if (newItem.itemType == 'audioRecording') {
					newItem.audioRecordingFormat = getContent(node, fieldTitle);
					break;
				}
				if (newItem.itemType == 'artwork') {
					newItem.medium = getContent(node, fieldTitle);
					break;
				}
			case 'Dimensions':
				if (newItem.itemType == 'artwork') {
					newItem.artworkSize = getContent(node, fieldTitle);
					break;
				}
			case 'Duration':
				if (newItem.itemType == 'videoRecording' || newItem.itemType == 'audioRecording') {
					// note that format field for Video Recording type is not displayed in scaffold.
					newItem.runningTime = getContent(node, fieldTitle);
					break;
				}
			// notes that if there are conditional logics for a field, like "dimensions"ï¼Œ they need to come above. Therewise, they might be polluted by stacked switch cases, like "Categories" got mixed with "Dimensions".
			case 'Category':
			case 'Collection Title':
			case 'Credit':
			case 'Place Manufactured':
			case 'Manufacturer':
			case 'System Requirements':
			case 'Series Title':
			case 'Platform':
			// the categories vary therefore many are collapsed under 'extra'.
			case 'Catalog Number':
				newItem.extra = addToExtra(newItem.extra, getContent(node, fieldTitle), fieldTitle);
				break;
			// parsing identifying numbers with existing Zotero fields e.g. ISBN
			case 'Identifying Numbers':
				node.querySelectorAll('tr').forEach((div) => {
					const numberKey = div.querySelector('td.col1').textContent;
					const numberVal = div.querySelector('td.col2').textContent;
					switch (numberKey) {
						case 'ISBN10':
							newItem.ISBN = numberVal;
							break;
						case 'Other number':
							break;
						default:
							newItem.extra = addToExtra(newItem.extra, numberVal, numberKey);
							break;
					}
				});
		}
	});

	// add pdf documents
	const pdfDiv = doc.querySelectorAll('div.mediaDocument li a');
	if (pdfDiv) {
		pdfDiv.forEach((div) => {
			const fileName = div.textContent;
			const pdfPath = div.href;
			if (pdfPath) {
				newItem.attachments.push({
					url: pdfPath,
					mimeType: "application/pdf",
					title: `${fileName ? fileName : newItem.title}`,
				});
			}
		});
	}

	// add audio recordings
	const audioDiv = doc.querySelectorAll('div.mediaAudio li a');
	if (audioDiv) {
		audioDiv.forEach((div) => {
			const audioPath = div.href;
			const fileName = div.textContent;
			if (audioPath) {
				newItem.attachments.push({
					url: audioPath,
					mimeType: "audio/mpeg",
					title: `${fileName ? fileName : newItem.title}`
				});
			}
		});
	}

	// add object images
	const imageDiv = doc.querySelectorAll('div.mediarow a.media-large img');
	if (imageDiv) {
		imageDiv.forEach((div) => {
			const imagePath = div.src;
			const fileName = div.textContent;
			if (imagePath) {
				newItem.attachments.push({
					url: imagePath,
					title: `${fileName ? fileName : newItem.title}`,
					mimeType: 'image/png'
				});
			}
		});
	}

	// add video links
	const videoDivs = doc.querySelectorAll('div.mediaVideo iframe');
	if (videoDivs) {
		videoDivs.forEach((div) => {
			const videoPath = div.src;
			const fileName = div.textContent;
			if (videoPath) {
				newItem.attachments.push({
					url: videoPath,
					title: `${fileName ? fileName : newItem.title}`,
					snapshot: false
				});
			}
		});
	}

	newItem.archive = 'Computer History Museum';

	newItem.complete();
}

// get field nodes containing item information from html doc.
function getFieldNodes(doc) {
	const fields = [...doc.querySelectorAll("div.field")];

	// clone the node to avoid altering the document.
	return fields.map(nodeOriginal => nodeOriginal.cloneNode(true));
}

// get the corresponding types. CHM Still Image = Zotero Artwork; CHM Moving Image = Zotero Video Recording; CHM Software = Zotero Computer Program. Other CHM types are all "books".
function getZoteroItemType(doc) {
	let type = 'book';

	const nodes = getFieldNodes(doc);

	nodes.forEach((node) => {
		const fieldTitleNode = node.querySelector("h4");
		const fieldTitle = fieldTitleNode.textContent.trim();
		if (fieldTitle == 'Type') {
			let chmItemType = getContent(node, fieldTitle);
			
			chmItemType = chmItemType.toLowerCase();

			switch (chmItemType) {
				case 'audio':
					type = 'audioRecording';
					break;
				case 'moving image':
					type = "videoRecording";
					break;
				case 'software':
					type = "computerProgram";
					break;
				case 'still image':
					type = 'artwork';
					break;
				default:
					type = 'book';
			}
		}
		return type;
	});

	return type;
}

// helper functions
function insertToTheStartOfAbstract(insert, abstract, fieldTitle) {
	const abstractContent = (fieldTitle !== undefined ? fieldTitle + ': ' : '') + insert + '\n' + (abstract ? abstract : '');
	return abstractContent ? abstractContent : '';
}

function insertToTheEndOfAbstract(insert, abstract, fieldTitle) {
	const abstractContent = (abstract ? abstract + '\n' : '') + (fieldTitle !== undefined ? fieldTitle + ': ' : '') + insert;
	return abstractContent ? abstractContent : '';
}

function getContent(node, fieldTitle) {
	const content = node.textContent.replace(fieldTitle, '').trim();
	return content ? content : '';
}
function addToExtra(oldExtra, newContent, fieldTitle) {
	return (oldExtra ? oldExtra + '\n' : '') + fieldTitle + ': ' + newContent.replace(/ {2}/g, '').replace(/\n\n/g, '').replace('\n', ': ');
}

function getContributors(node) {
	let contributors = [];
	const people = node.querySelectorAll('td');
	people.forEach((personDiv) => {
		const spans = personDiv.querySelectorAll('span');
		const name = spans[0].textContent;
		const [lastName, firstName] = name.split(', ');
		contributors.push({
			firstName,
			lastName,
			creatorType: "contributor"
		});
	});
	return contributors;
}