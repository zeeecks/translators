function detectWeb(doc) {
	let contentType = attr(doc, 'meta[property="og:type"]', 'content');
	switch (contentType) {
		case "article":
			return "newspaperArticle";
		case "website":
		default:
			if (getSearchResults(doc, true)) {
				return "multiple";
			}
			break;
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.fc-slice__item h3 a');
	for (let row of rows) {
		let href = row.href;
		let title = row.textContent;
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), (items) => {
			if (!items) {
				return true;
			}
			const articles = [];
			for (const i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
			return true;
		});
	}
	else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);

	translator.setHandler('itemDone', function (obj, item) {
		let authors = new Set();

		for (let author of doc.querySelectorAll('a[rel="author"]')) {
			authors.add(author.textContent);
		}

		// The authors in the metadata are incomplete and are not cleaned,
		// but contain unneccessary data about location etc.
		// Thus we try to take them directly from the byline.
		let byline = text(doc, 'address[data-link-name="byline"] *');
		if (byline) {
			// parse out linked publications
			byline = byline.split(/ for /)[0];
			// parse out location
			byline = byline.split(/\s*\b(?:in|at)\b\s*/)[0];

			// parse authors from rest of byline
			for (let author of byline.split(/\s*(?:\band\b|,)\s*/)) {
				authors.add(author);
			}
		}

		let linkedData = JSON.parse(text(doc, 'script[type="application/ld+json"]'));
		if (Array.isArray(linkedData)) linkedData = linkedData.find(x => x["@type"] == "NewsArticle");
		if (linkedData) {
			if (linkedData.publisher) item.libraryCatalog = linkedData.publisher.name;
			if (linkedData.publisher) item.publicationTitle = linkedData.publisher.name;
			if (linkedData.author) {
				for (let author of linkedData.author) {
					authors.add(author.name);
				}
			}
			if (linkedData.datePublished) item.date = linkedData.datePublished;
			if (linkedData.headline) item.title = linkedData.headline;
			if (linkedData.mainEntityOfPage) item.url = linkedData.mainEntityOfPage;
		}

		item.creators.length = 0;
		for (let author of authors) {
			if (author.match(/^(guardian staff|agenc(y|ies))/i)) continue;
			item.creators.push(ZU.cleanAuthor(author, 'author'));
		}

		item.language = "en-GB";

		if (text(doc, '[data-component="series"]') == "The Observer") {
			item.publicationTitle = "The Observer";
			item.ISSN = "0029-7712";
		}
		else {
			item.ISSN = "0261-3077";
		}

		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}