/*
Alternate PICA version, which provides metadata. Bibtex seemed to make sense, but RIS might be doable as an alternative.
*/
function detectWeb(doc, url) {
	var multxpath = "//table[@summary='Tab bar']/tbody/tr/td[@class='tab1']";
	if (!ZU.xpathText(doc, "//table[@summary='Tab bar']/tbody/tr/td[@class='tab1']")){
		//this for some permalinks:
		multxpath = "//table[@summary='Tab bar']/tbody/tr/td[@class='tab0']/a[contains(@href, 'PRS=')]";
	}
	if (elt = doc.evaluate(multxpath, doc, null, XPathResult.ANY_TYPE, null).iterateNext()) {
		var content = elt.textContent;
		if ((content == "Liste des résultats") || (content == "shortlist") || (content == 'Kurzliste') || content == 'titellijst') {
			return "multiple";
		} else if ((content == "Notice détaillée") || (content == "title data") || (content == "Besitznachweis(e)")|| (content == "Vollanzeige")|| (content == 'Titeldaten') || content == "Bestandsinfo"|| (content == 'full title') || (content == 'Titelanzeige' || (content == 'titelgegevens'))) {
			var xpathimage = "//table[@summary='presentation switch']/tbody/tr/td/img"; 
			if (elt = doc.evaluate(xpathimage, doc, null, XPathResult.ANY_TYPE, null).iterateNext()) {
				var type = elt.getAttribute('src');
				//Z.debug(type);
				if (type.indexOf('article.') > 0) {
					return "journalArticle";
				} else if (type.indexOf('audiovisual.') > 0) {
					return "film";
				} else if (type.indexOf('book.') > 0) {
					return "book";
				} else if (type.indexOf('handwriting.') > 0) {
					return "manuscript";
				} else if (type.indexOf('sons.') > 0 || type.indexOf('sound.') > 0 || type.indexOf('score') > 0) {
					return "audioRecording";
				} else if (type.indexOf('thesis.') > 0) {
					return "thesis";
				} else if (type.indexOf('map.') > 0) {
					return "map";
				}
			}
			return "book";
		}
	}
}

function scrape(doc, url) {
	//get permalink
	var permalink = ZU.xpathText(doc, '//a[(contains(@href, "PPN?PPN=") or contains(@href, "PPNSET?PPN=")) and img[contains(@src, "zitierlink")]]/@href');
	if (permalink && permalink.indexOf("http://")==-1) permalink = "http://" + doc.location.host + permalink;
	
	//construct bibtex url
	if (url.indexOf("/PRS=")!=-1) var bibtexurl = url.replace(/PRS=[^\/]+/, "PRS=bibtex") + "&SHOWHOLDINGONLY=N";
	else var bibtexurl = url.replace(/(DB=[^\/]+\/)/, "$1PRS=bibtex/") + "&SHOWHOLDINGONLY=N";
	
	//get catalog Name
	var libraryCatalog = ZU.xpathText(doc, '//head/title');
	
	Z.debug(bibtexurl)
	
	ZU.processDocuments(bibtexurl, function(doc){
		var bibtex = ZU.xpathText(doc, '//table[@summary="content layout"]');
		//we can have garbage after the bibtex, but note before.
		bibtex=ZU.trimInternal(bibtex).replace(/^.*?@/, "@")
		//Z.debug(bibtex);
		//They have faulty bibtex with semicolons between authors
		bibtex = bibtex.replace(/(author\s*=\s*\{[^\}]+);([^\}]+\})/g, "$1and$2");
		//this is provisional. should be fixed in bibtex
		bibtex = bibtex.replace(/location\s*=\s*\{/, "bestand = {")
		var bestand = bibtex.match(/bestand\s*=\s*\{([^\}]+)\}/);
		var size = bibtex.match(/size\s*=\s*\{([^\}]+)\}/);
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setString(bibtex);
		translator.setHandler("itemDone", function(obj, item) {
			item.url="";
			if (bestand) item.notes.push("Bestand: " + bestand[1]);
			if (size) item.numPages = size[1];
			if (item.numPages) item.numPages = item.numPages.replace(/[sp]\.?\s*$/i, "");
			item.title = item.title.replace(/\s+\:/, ":")
			if (item.extra){
				item.notes.push(item.extra);
				item.extra="";
			}
			if (libraryCatalog) item.libraryCatalog = libraryCatalog.replace(/\s*\-\s*results\/titledata/, "");
			for (i in item.creators){
				if (item.creators[i].firstName){
					item.creators[i].firstName = item.creators[i].firstName.replace(/\s*\[.+\]\s*$/, "");
				}
			}
			if (permalink) item.attachments = [{url:permalink, title: "Link to Library Catalog", mimeType: "text/html", snapshot: false}];
			item.complete();
		});	
		translator.translate();
		
	})
}

function doWeb(doc, url) {
	var type = detectWeb(doc, url);
	if (type == "multiple") {
		var newUrl = doc.evaluate('//base/@href', doc, null, XPathResult.ANY_TYPE, null).iterateNext().nodeValue;
		var xpath = "//td[@class='hit']/a";
		var elmts = doc.evaluate(xpath, doc, null, XPathResult.ANY_TYPE, null);
		var elmt = elmts.iterateNext();
		var availableItems = new Array();
	
		while (elmt = elmts.iterateNext()){
		availableItems[elmt.href] = elmt.textContent
		};
		Zotero.selectItems(availableItems, function (items) {
			if (!items) {
				return true;
			}
			var uris = new Array();
			for (var i in items) {
				uris.push(i);
			}
			ZU.processDocuments(uris, scrape)
		});
	} else if (type != "") {
		scrape(doc, url);
	}
}