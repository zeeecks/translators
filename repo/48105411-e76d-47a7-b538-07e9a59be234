var handlers = {
	blogPost: (_, __) => {},
	interview: fetchAudio
};

function detectWeb(doc, url) {
	if (url.includes("search/results")) {
		return "multiple";
	}
	else if (url.includes("articles")) {
		return "blogPost";
	}
	else if (url.includes("interviews")) {
		return "interview";
	}
	return false;
}

function doWeb(doc, url) {
	var type = detectWeb(doc, url);
	switch (type) {
		case "multiple": {
			let results = getSearchResults(doc, false);
			if (results) {
				Zotero.selectItems(results, function (selected) {
					if (!selected) return;
					var articles = [];

					for (let i in selected) {
						articles.push(i);
					}

					ZU.processDocuments(articles, doWeb);
				});
			}
			break;
		}
		case "interview":
		case "blogPost":
			scrape(doc, url, type);
			break;
	}
}

function scrape(doc, url, type) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48'); // embedded metadata
	translator.setDocument(doc);

	translator.setHandler('itemDone', function (obj, item) {
		item.itemType = type;
		item.date = attr(doc, 'header time.resource__date', 'datetime');

		var authors = doc.querySelectorAll('.resource .resource__header #authors');

		for (let author of authors) {
			var name = ZU.cleanAuthor(text(author, ".resource__author span", 0), "author");
			item.creators.push(name);
		}

		handlers[type](doc, item);
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.doWeb(doc, url);
	});
}

function fetchAudio(doc, item) {
	let downloadLinks = doc.querySelectorAll('.resource .media-menu__item--download ul li');

	for (var link of downloadLinks) {
		let linkUrl = attr(link, 'a', 'href');
		if (linkUrl.endsWith('.mp3')) {
			item.attachments.push({
				url: linkUrl,
				title: "Recorded Audio",
				mimeType: "audio/mp3",
				snapshot: false
			});
		}
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	let results = doc.querySelectorAll('div.gsc-results div.gs-result a.gs-title');

	for (var result of results) {
		let href = result.dataset.ctorig;
		let title = ZU.trimInternal(result.innerText);

		if (!href || !title) continue;
		if (checkOnly) return true;

		found = true;
		items[href] = title;
	}

	return found ? items : false;
}