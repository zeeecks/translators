function detectWeb(doc, _url) {
	if (doc.querySelector('.meta-block__list')) {
		for (let type of doc.querySelectorAll('.meta-block__list > .meta-block__type')) {
			if (type.textContent.trim() == 'Type') {
				switch (type.nextElementSibling.innerText.trim().toLowerCase()) {
					case 'text':
						return 'document';
					case 'image':
						return 'artwork';
					case 'moving image':
						return 'videoRecording';
					case 'sound':
						return 'audioRecording';
					case 'dataset':
						return 'document';
					case 'physical object':
						return 'artwork';
				}
				break;
			}
		}
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.thumbnail__link');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	let item = new Zotero.Item(detectWeb(doc, url));
	
	item.title = text(doc, '[itemprop="name"]');
	item.abstractNote = text(doc, '[itemprop="description"]');
	item.date = ZU.strToISO(text(doc, '[itemprop="dateCreated"]'));
	
	// sometimes the last language line will be the ISO code!
	let languages = text(doc, '[itemprop="inLanguage"]').split(/\s/);
	item.language = languages[languages.length - 1];
	
	item.url = attr(doc, 'link[rel="canonical"]', 'href') || url;
	item.archive = text(doc, '[itemprop="isPartOf"]');
	item.libraryCatalog = 'Calisphere';
	
	let authors = innerText(doc, '[itemprop="creator"]');
	if (authors) {
		for (let author of authors.split('\n')) {
			let type = 'author';
			if (item.itemType == 'artwork') {
				type = 'artist';
			}
			else if (item.itemType == 'videoRecording'
				|| item.itemType == 'audioRecording') {
				type = 'contributor'; // hard to tell from the page
			}
			
			item.creators.push(ZU.cleanAuthor(
				author,
				type,
				true
			));
		}
	}
	
	item.tags = innerText(doc, '[itemprop="about"]')
		.split('\n')
		.map(tag => ({ tag }));
	
	if (doc.querySelector('a.obj__link')) {
		item.attachments.push({
			title: 'Source',
			mimeType: 'text/html',
			url: attr(doc, 'a.obj__link', 'href')
		});
	}
	
	item.complete();
}