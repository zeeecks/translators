function detectImport() {
	var line;
	var i = 0;
	while ((line = Zotero.read()) !== false) {
		line = line.replace(/^\s+/, "");
		if (line != "") {
			if (line.substr(0, 4).match(/^PT [A-Z]/)) {
				return true;
			} else {
				if (i++ > 3) {
					return false;
				}
			}
		}
	}
}

function processTag(item, field, content) {
	var map = {
		"J": "journalArticle",
		"S": "bookSection", // Not sure
		"P": "patent",
		"B": "book"
	};
	if (field == "PT") {
		item.itemType = map[content];
		if (item.itemType === undefined) {
			item.itemType = "journalArticle";
			Zotero.debug("Unknown type: " + content);
		}
	} else if (field == "DT") {
		if (content.trim().toLowerCase() == "proceedings paper") {
			item.itemType = "conferencePaper";
		}
	} else if ((field == "AF" || field == "AU")) {
		//Z.debug("author: " + content);
		const authors = content.split("\n");
		for (var i=0; i<authors.length; i++) {
			var author = authors[i];
			author = author.replace(/\s+\(.*/, '');
			item.creators[0][field].push(ZU.cleanAuthor(author, "author", author.match(/,/)));
		}
	} else if ((field == "BE")) {
		//Z.debug(content);
		const authors = content.split("\n");
		for (var i=0; i<authors.length; i++) {
			var author = authors[i];
			item.creators[1].push(ZU.cleanAuthor(author, "editor", author.match(/,/)));
		}
	} else if (field == "TI") {
		content = content.replace(/\s\s+/g, " ");
		item.title = content;
	} else if (field == "JI") {
		item.journalAbbreviation = content;
	} else if (field == "SO") {
		item.publicationTitle = content;
	} else if (field == "SN") {
		item.ISSN = content;
	} else if (field == "BN") {
		item.ISBN = content;
	} else if (field == "PD" || field == "PY") {
		if (item.date) {
			item.date += " " + content;
		} else {
			item.date = content;
		}
		var year = item.date.match(/\d{4}/);
		// If we have a double year, eliminate one
		if (year && item.date.replace(year[0],"").includes(year[0]))
			item.date = item.date.replace(year[0],"");
	} else if (field == "VL") {
		item.volume = content;
	} else if (field == "IS") {
		item.issue = content;
	} else if (field == "UT") {
		item.extra += content;
	} else if (field == "BP" || field == "PS") { // not sure why this varies
		item.pages = content;
	} else if (field == "EP") {
		item.pages += "-" + content;
	} else if (field == "AR") {
		//save articleNumber - we're going to use that where we don't have pages & discard later on
		item.articleNumber = content; ;
	} else if (field == "AB") {
		content = content.replace(/\s\s+/g, " ");
		item.abstractNote = content;
	} else if (field == "PI" || field == "C1") {
		item.place = content;
	} else if (field == "LA") {
		item.language = content;
	} else if (field == "PU") {
		item.publisher = content;
	// Patent stuff
	} else if (field == "DG") {
		item.issueDate = content;
	} else if (field == "PN") {
		item.patentNumber = content;
	} else if (field == "AE") {
		item.assignee = content;
	} else if (field == "PL") { // not sure...
		item.priorityNumber = content;
	} else if (field == "PC") { // use for patents
		item.country = content;
	// A whole mess of tags
	} else if (field == "DE" || field == "BD"
			|| field == "OR" || field == "ID"
			|| field == "MC" || field == "MQ") {
		item.tags = item.tags.concat(content.split(";"));
	} else if (field == "DI") {
		item.DOI = content;
	} else {
		Zotero.debug("Discarding: " + field + " => "+content);
	}
}

function completeItem(item) {
	var i;
	var creators = [];
	// If we have full names, drop the short ones
	if (item.creators[0]["AF"].length) {
		creators = item.creators[0]["AF"];
	} else {
		creators = item.creators[0]["AU"];
	}
	// Add other creators
	if (item.creators[1])
		item.creators = creators.concat(item.creators[1]);
	else
		item.creators = creators;
		
	// If we have a patent, change author to inventor
	if (item.itemType == "patent") {
		for (i in item.creators) {
			if (item.creators[i].creatorType == "author") {
				item.creators[i].creatorType = "inventor";
			}
		}
	}
	
	if (item.articleNumber){
		if (!item.pages) item.pages = item.articleNumber;
		delete item.articleNumber;
	}
	
	// Fix caps, trim in various places
	for (i in item.tags) {
		item.tags[i] = item.tags[i].trim();
		if (item.tags[i].toUpperCase() == item.tags[i])
			item.tags[i]=item.tags[i].toLowerCase();
	}
	
	var toFix = ["publisher", "publicationTitle", "place"];
	for (i in toFix) {
		var field = toFix[i];
		if (item[field] && item[field].toUpperCase() == item[field])
			item[field]=ZU.capitalizeTitle(item[field].toLowerCase(),true);		
	}

	item.complete();
}

function doImport(text) {
	var tag = data = false;
	var debugBuffer = '';	//in case nothing is found
	var linesRead = 0, bufferMax = 100;
	var line = Zotero.read();
	// first valid line is type
	while (line !== false && line.replace(/^\s+/, "").substr(0, 6).search(/^PT [A-Z]/) == -1) {
		if (linesRead < bufferMax) debugBuffer += line + '\n';
		linesRead++;
		line = Zotero.read();
	}

	if (line === false) {
		Z.debug("No valid data found\n" +
			"Read " + linesRead + " lines.\n" +
			"Here are the first " + (linesRead<bufferMax?linesRead:bufferMax) + " lines:\n" +
			debugBuffer);
		return;
	}

	var item = new Zotero.Item();
	var i = 0;
	item.creators = [{"AU":[], "AF":[]}, []];
	item.extra = "";


	var tag = "PT";
	
	var data = line.substr(3);
	
	var rawLine;
	while ((rawLine = Zotero.read()) !== false) {    // until EOF
		//Z.debug("line: " + rawLine);
		let split = rawLine.match(/^([A-Z0-9]{2})\s(?:([^\n]*))?/);
		// Force a match for ER
		if (rawLine == "ER") split = ["","ER",""];
		if (split) {
			// if this line is a tag, take a look at the previous line to map
			// its tag
			if (tag) {
				//Zotero.debug("tag: '"+tag+"'; data: '"+data+"'");
				processTag(item, tag, data);
			}

			// then fetch the tag and data from this line
			tag = split[1];
			data = split[2] || '';
			
			if (tag == "ER") {	       // ER signals end of reference
				// unset info
				tag = data = false;
				completeItem(item);
			}
			if (tag == "PT") {
				// new item
				item = new Zotero.Item();
				item.creators = [{"AU":[], "AF":[]}, []];
				item.extra = "";
				i++;
			}
		} else {
			// otherwise, assume this is data from the previous line continued
			if (tag == "AU" || tag == "AF" || tag == "BE") {
				//Z.debug(rawLine);
				// preserve line endings for AU fields
				data += "\n" + rawLine;
			} else if (tag) {
				// otherwise, concatenate and avoid extra spaces
				if (data[data.length-1] == " " || rawLine[0] == " ") {
					data += rawLine;
				} else {
					data += " "+rawLine;
				}
			}
		}
	}

	if (tag && tag != "ER") {	// save any unprocessed tags
		//Zotero.debug(tag);
		processTag(item, tag, data);
		completeItem(item);
	}
}