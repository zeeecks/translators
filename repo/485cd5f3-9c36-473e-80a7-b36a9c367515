function detectWeb(doc, _url) {
	let results = getSearchResults(doc, false);
	if (!results) return false;
	
	if (Object.keys(results).length == 1) {
		return guessType(doc);
	}
	else {
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.hits article');
	for (let row of rows) {
		let id = row.id;
		let title = ZU.trimInternal(row.textContent);
		if (!id || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[id] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) return;
			for (let recordID of Object.keys(items)) {
				scrapeRecord(doc, url, recordID);
			}
		});
	}
	else {
		scrapeRecord(doc, url, 'record1');
	}
}

function scrapeRecord(doc, url, recordID) {
	let article = doc.getElementById(recordID);
	
	let DOI = ZU.cleanDOI(article.getAttribute('data-doi') || '');
	let ISBN = ZU.cleanISBN(article.getAttribute('data-isbn') || '');
	
	if (!DOI && !ISBN) {
		scrapeRecordManually(doc, url, article);
		return;
	}
	
	let search = Zotero.loadTranslator('search');
	search.setSearch({ DOI, ISBN });
	
	search.setHandler('itemDone', function (_, item) {
		item.date = text(article, '.field_PUBLDATE') || item.date; // often better
		item.complete();
	});
	
	search.setHandler('translators', function (_, translators) {
		search.setTranslator(translators);
		search.translate();
	});
	
	search.getTranslators();
}

function scrapeRecordManually(doc, url, article) {
	let item = new Zotero.Item(guessType(article));

	item.title = attr(article, 'h3 > a', 'title');
	let subtitle = text(article, '.untertitel');
	if (subtitle) {
		item.title += ': ' + subtitle;
	}
	
	item.abstractNote = text(article, '.field_ABSTRACT');
	item.tags = text(article, '.field_KEYWORDS').split(' ; ').map(tag => ({ tag }));
	item.language = text(article, '.field_LANGUAGE');
	item.date = text(article, '.field_PUBLDATE');
	item.publisher = text(article, '.field_PUBLISHER');
	item.url = attr(article, '.links.fulltext a', 'href')
		.replace(/^.+[?&]link=([^&#]+).*$/, (_, link) => decodeURIComponent(link));
	
	for (let author of article.querySelectorAll('.authors a')) {
		let creatorType = 'author';
		
		author = author.textContent;
		if (author.includes('[Akademischer Betreuer]')) {
			creatorType = 'contributor';
		}
		author = author.replace(/\[.+\]/, '');
		
		item.creators.push(ZU.cleanAuthor(author, creatorType, true));
	}
	
	item.complete();
}

function guessType(article) {
	let type = text(article, '.field_DOCTYPE');
	if (type.includes('Thesis')) {
		return 'thesis';
	}
	else if (type.includes('Book')) {
		return 'book';
	}
	else {
		return 'journalArticle';
	}
}