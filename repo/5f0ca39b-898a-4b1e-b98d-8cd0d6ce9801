function detectWeb(doc, url) {
	// How can we distinguish thesis from journal article??
	if (ZU.xpathText(doc, '/html/head/meta[@name="citation_title"]/@content')) {
		return 'journalArticle';
	}
}

function getDocId(url) {
	var m = url.match(/\bDocID=([^&#]+)/i);
	if (!m) return;
	return m[1];
}

async function doWeb(doc, url) {
	var docID = getDocId(url);
	await scrape([docID], function(item) {
		if (!item.url) {
			// Maybe we shouldn't. Looks more like a catalog.
			item.url = url;
		}
		
		item.attachments.push({
			title: 'Snapshot',
			document: doc
		});
		
		item.complete();
	});
}

async function scrape(docIDs, itemDoneHandler) {
	let tokenParams = new URLSearchParams();
	tokenParams.append('BER', JSON.stringify(docIDs.map(id => ({
		DocID: id,
		IsCanAddShoppingCar: null
	}))));
	tokenParams.append('IsShowLink', 'false');
	tokenParams.append('keepThis', 'true');
	// This sets the necessary cookies:
	await requestDocument('https://www.airitilibrary.com/Publication/MetaExport?' + tokenParams);

	var bibTeXUrl = buildQuery(docIDs);
	ZU.doGet(bibTeXUrl, function(text) {
		var translator = Zotero.loadTranslator("import");
		// BibTeX
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setString(text);
		translator.setHandler('itemDone', function(obj, item) {
			// Chinese names are not split correctly
			// Sometimes, English name is provided as well in parentheses
			for (var i=0, n=item.creators.length; i<n; i++) {
				var c = item.creators[i];
				
				var zhChar = /[\u4E00-\u9FFF]/;
				if (!zhChar.test(c.firstName) && !zhChar.test(c.lastName)) continue;
				
				delete c.fieldMode;
				
				var name = (c.firstName || "") + (c.lastName || "");
				var trimAt = name.indexOf('(');
				
				if (trimAt == 0) {
					c.lastName = name;
					delete c.firstName;
					c.fieldMode = 1;
					continue;
				} else if (trimAt != -1) {
					name = name.substr(0, trimAt);
				}
				
				name = name.trim();
				
				c.lastName = name.substr(name.length-1);
				if (name.length > 1) {
					c.firstName = name.substr(0, name.length-1);
				} else {
					delete c.firstName;
					c.fieldMode = 1;
				}
			}
			
			// language is sometimes written in chinese
			// use "zh", since I think dialect actually varies in this catalog
			item.language = "zh";
			
			// search- and web-specific itemDone handlers
			if (itemDoneHandler) itemDoneHandler(item);
			else item.complete();
		});
		translator.translate();
	});
}

function buildQuery(docIDs) {
	var url = 'https://www.airitilibrary.com/publication/ExportTo?ExportType=BibTex'
		+ '&parameter=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16';
	for (var i=0; i<docIDs.length; i++) {
		url += '&DocIDs[' + i + ']=' + encodeURIComponent(docIDs[i]);
	}
	return url;
}

// TODO: Re-enable search
// e.g. 10.6220/joq.2012.19(1).01
function detectSearch(items) {
	if (!items) return false;
	
	if (typeof items == 'string' || !items.length) items = [items];
	
	for (var i=0, n=items.length; i<n; i++) {
		if (!items[i]) continue;
		
		if (items[i].DOI && ZU.cleanDOI(items[i].DOI)) return true;
		if (typeof items[i] == 'string' && ZU.cleanDOI(items[i])) return true;
	}
	
	return false;
}

function filterQuery(items) {
	if (!items) return [];
	
	if (typeof items == 'string' || !items.length) items = [items];
	
	//filter out invalid queries
	var query = [];
	for (var i=0, n=items.length; i<n; i++) {
		if ( ( items[i].DOI && ZU.cleanDOI(items[i].DOI) )
			|| ( typeof items[i] == 'string' && ZU.cleanDOI(items[i]) ) ) {
			query.push(items[i]);
		}
	}
	return query;
}

function doSearch(items) {
	var query = filterQuery(items);
	var queryTracker = {};
	var dois = [];
	for (let i=0, n=query.length; i<n; i++) {
		var doi = ZU.cleanDOI(query[i].DOI || query[i]);
		followDOI(doi);
	}
}

function followDOI(doi) {
	ZU.processDocuments('https://doi.org/' + encodeURIComponent(doi), async function(doc, url) {
		//var redirectedUrl = ZU.xpathText(doc, '//meta[@name="citation_abstract_html_url"]/@content');
		var docID = ZU.xpathText(doc, '//a/@docid');
		if (!docID) return;
		await scrape([docID]);
	});
}