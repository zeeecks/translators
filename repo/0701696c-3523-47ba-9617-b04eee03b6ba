function detectWeb(doc, url) {
	if (url.includes('/DocumentDetails.aspx') // older collections
		|| url.includes('/DocumentDetailsSearch.aspx')) {
		return 'manuscript';
	}
	if (url.includes('/Documents/Details/') // newer collections
		|| url.includes('/Documents/SearchDetails')) {
		return getTypeNew(doc);
	}
	if (getSearchResults(doc, true)) {
		return "multiple";
	}
	else if (doc.querySelector('.DocumentsList')) {
		Z.monitorDOMChanges(doc.querySelector('.DocumentsList'));
	}
	return false;
}

function getTypeNew(doc) {
	let type = text(doc, 'tr[data-field-name="Document Type"] td[data-field-role="value"]');
	if (!type) {
		if (doc.body.classList.contains('cinema')) {
			return 'videoRecording';
		}
		else {
			return 'document';
		}
	}
	
	type = ZU.trimInternal(type).toLowerCase();
	
	if (type.includes('book')) {
		return 'book';
	}
	if (type.includes('manuscript')) {
		return 'manuscript';
	}
	if (type.includes('drawing') || type.includes('illustration')
		|| type.includes('photograph')) {
		return 'artwork';
	}
	if (type.includes('map')) {
		return 'map';
	}
	if (type.includes('correspondence')) {
		return 'letter';
	}
	return 'document';
}

function getSearchResults(doc, checkOnly) {
	const items = {};
	let found = false;
	const rows = doc.querySelectorAll(
		'.contentsList .tableRow .descriptionCell a, .SearchList tbody .title a, .DocumentsList tbody .title a');
	for (const row of rows) {
		const href = row.href;
		const title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	if (url.includes('/Documents/')) {
		// newer collections (served with HTTPS, no .aspx pages) have a
		// completely different, and much easier to parse, structure
		scrapeNew(doc, url);
	}
	else {
		scrapeOld(doc, url);
	}
}

function scrapeNew(doc, url) {
	function fromTable(fieldName) {
		return text(doc, `tr[data-field-name="${fieldName}"] td[data-field-role="value"]`);
	}
	
	let item = new Zotero.Item(getTypeNew(doc));
	
	item.title = fromTable('Title');
	item.abstractNote = fromTable('Abstract') || fromTable('Additional Information');
	item.date = ZU.strToISO(fromTable('Date'));
	item.place = fromTable('Places');
	item.rights = fromTable('Copyright');
	item.publisher = fromTable('Publisher');
	item.language = fromTable('Language');
	
	item.creators = fromTable('Names')
		.split('; ')
		.map(name => ZU.cleanAuthor(name, 'author', true));
	
	let director = fromTable('Director');
	if (director) {
		item.creators.push(ZU.cleanAuthor(director, 'director', true));
	}
	
	let pageSelect = doc.querySelector('#DownloadPageFrom');
	if (pageSelect) {
		item.numPages = pageSelect.childElementCount;
	}
	item.archive = fromTable('Library/Archive') || fromTable('Collection');
	item.archiveLocation = fromTable('Reference');
	item.libraryCatalog = extractCatalogName(doc.title);
	item.url = url.replace('/SearchDetails/', '/Details/')
		.replace('?SessionExpired=True', '');
	
	if (item.itemType != 'videoRecording') {
		item.attachments.push({
			title: "Full Text PDF",
			mimeType: 'application/pdf',
			url: attr(doc, 'a[href*="/FullDownload"]', 'href')
		});
	}
	
	item.tags = [...doc.querySelectorAll('tr[data-field-name="Subjects"] td[data-field-role="value"] a')]
		.map(el => ({ tag: el.textContent }));
	
	item.complete();
}

function scrapeOld(doc, url) {
	function fromTable(selector) {
		return text(doc, selector + ' > .detCol2') || text(doc, selector);
	}
	
	let item = new Zotero.Item('manuscript');
	
	item.title = fromTable('#Body_DocumentDetailsMeta_descSpan')
		|| fromTable('#Body_descriptionElement');
	let abstract = doc.querySelector('#Body_DocumentDetailsMeta_notesElement>.detCol2, #Body_notesElement>.detCol2');
	item.abstractNote = abstract ? abstract.innerText : "";
	item.date = ZU.strToISO(fromTable('#Body_DocumentDetailsMeta_dateElement'));
	
	let pageSelect = doc.querySelector('.pageRangeSelect'); // either will do
	if (pageSelect) {
		item.numPages = pageSelect.childElementCount;
	}
	item.archive = fromTable('#Body_DocumentDetailsMeta_sourceElement');
	
	let box = fromTable('#Body_DocumentDetailsMeta_boxElement')
		|| fromTable('#Body_boxElement');
	let folder = fromTable('#Body_DocumentDetailsMeta_folderElement')
		|| fromTable('#Body_folderElement');
	item.archiveLocation = `Box ${box}, folder ${folder}`;
	item.libraryCatalog = extractCatalogName(doc.title);
	item.attachments.push({
		title: "Full Text PDF",
		mimeType: 'application/pdf',
		url: attr(doc, '.downloadPDFLink > a', 'href')
	});
	// we want a URL without any search strings, navigation data, etc
	item.url = url.replace(/\?.*(documentid=[^&]+).*/, '?$1');
	
	item.complete();
}

/**
 * get the site's name by taking everything after the first segment of the title:
 * "Search Results - Jewish Life in America - Adam Matthew Digital"
 * becomes "Jewish Life in America - Adam Matthew Digital"
 */
function extractCatalogName(title) {
	return title.substring(title.indexOf('-') + 2);
}