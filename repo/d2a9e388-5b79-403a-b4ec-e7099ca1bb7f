function detectWeb(doc, url) {
	if (url.includes('articles/found.htm?')) {
		if (getSearchResults(doc, true)) {
			return 'multiple';
		}
	} else {
		return 'journalArticle';
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	translator.setHandler('itemDone', function(obj, item) {
		// Necessary as author surname comes first and is often capitalised, so Zotero thinks it's actually initials.
		let authors = ZU.xpath(doc, '//span[@itemprop="author"]/a');
		item.creators = authors.map(function(author) { 
			let authorNames = author.text.split(' ');
			authorNames[0] = authorNames[0].charAt(0) + authorNames[0].substr(1).toLowerCase();
			return ZU.cleanAuthor(authorNames.reverse().join(' '), 'author');
		});
		
		let keywords = ZU.xpath(doc, '//span[@itemprop="headline"]/a');
		item.tags = keywords.map(function (keyword) {
			return keyword.textContent;
		});
		item.complete();
	});
	translator.translate();
}

function getSearchResults(doc, checkOnly) {
	let items = {};
	let found = false;
	let rows = ZU.xpath(doc, '//div[@class="searchlist"]/a[b]');
	for (let i=0; i<rows.length; i++) {
		let href = rows[i].href;
		let title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) === 'multiple') {
		Zotero.selectItems(getSearchResults(doc, false), function (selected) {
			if (!selected) {
				return true;
			}
			ZU.processDocuments(Object.keys(selected), scrape);
		});
	} else {
		scrape(doc, url);
	}
}