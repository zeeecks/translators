function detectWeb(_doc, _url) {
	return "newspaperArticle";
}


function doWeb(doc, _url) {
	var newItem = new Zotero.Item("newspaperArticle");
	var scripts = doc.getElementsByTagName("script");
	var json = '';
	var jsonre = /var staPageDetail = JSON.parse\((.+?)\);/;
	for (var i = 0; i < scripts.length; i++) {
		var arr = scripts[i].textContent.match(jsonre);
		if (arr) {
			json = arr[1];
			break;
		}
	}
	
	// one JSON.parse to unstringify the json string, and one to parse it into an object
	// the replace fixes escaped apostrophes in the source, which JSON.parse considers invalid
	var details = JSON.parse(JSON.parse(json.replace(/\\'/g, "'")));

	var metaArr = {};
	var metaTags = doc.getElementsByTagName("meta");
	for (let metaTag of metaTags) {
		if (metaTag.getAttribute("property")) {
			metaArr[metaTag.getAttribute("property")] = metaTag.getAttribute("content");
		}
	}
	newItem.title = details.citation.title;
	// remove the unnecessary xid param
	newItem.url = details.citation.url.replace(/\?xid=[0-9]*$/, "");
	
	/*
		The user can append the author to the title with a forward slash
		e.g. "My Day / Eleanor Roosevelt"
	*/
	if (newItem.title.includes('/')) {
		var tokens = newItem.title.split("/");
		var authorString = tokens[1];
		newItem.title = tokens[0].trim();
		// multiple authors are separated with semicolons
		var authors = authorString.split("; ");
		for (let author of authors) {
			newItem.creators.push(Zotero.Utilities.cleanAuthor(author, "author"));
		}
	}

	newItem.abstractNote = details.media.note;
	
	var uniqueID = newItem.url.match(/\/clip\/(\d+)/)[1];
	var pdfurl = "https://www.newspapers.com/clippings/download/?id=" + uniqueID;
	newItem.attachments.push({
		title: "Full Text PDF",
		mimeType: "application/pdf",
		url: pdfurl
	});

	newItem.publicationTitle = details.source.publisherName;
	// details["source"]["title"] gives a string like
	// "Newspapers.com - The Akron Beacon Journal - 1939-10-30 - Page Page 15"
	var editiontokens = details.source.title.replace(/ - /g, "|").split("|");
	if (editiontokens.length == 3) { // there's an edition label
		newItem.edition = editiontokens[1];
	}
	newItem.pages = editiontokens.slice(-1)[0].replace(/Page/g, '');
	newItem.date = details.source.publishedDate;
	newItem.place = details.source.publishedLocation;
	
	// handle empty title
	if (newItem.title === "") {
		newItem.title = "Clipped From " + newItem.publicationTitle;
	}
	newItem.complete();
}