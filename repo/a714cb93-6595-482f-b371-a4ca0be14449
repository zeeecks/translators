function detectWeb(doc, url) {
	if (url.includes('/record/')) {
		var collections = ZU.xpath(doc, '//span[@class="pull-right"]/span[contains(@class, "label-default")]');
		for (var i=0; i<collections.length; i++) {
			var type = collections[i].textContent.toLowerCase();
			//Z.debug(type)
			switch (type) {
			case "software":
				return "computerProgram";
			case "video/audio":
				return "videoRecording";//or audioRecording?
			case "figure":
			case "drawing":
			case "photo":
			case "diagram":
			case "plot":
				return "artwork";
			case "presentation":
			case "conference paper":
			case "poster":
			case "lesson":
				return "presentation";
			case "book":
				return "book";
			case "book section":
				return "bookSection";
			case "patent":
				return "patent";
			case "report":
			case "working paper":
			case "project deliverables":
			case "preprint":
				return "report";
			case "thesis":
				return "thesis";
			case "dataset":
				//change when dataset as itemtype is available
				return "document";
			case "journal article":
				return "journalArticle";
			}
		}
		return "journalArticle";
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//invenio-search-results//h4/a');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var abstract = ZU.xpathText(doc, '//meta[@name="description"]/@content');
	var doi = ZU.xpathText(doc, '//meta[@name="citation_doi"]/@content');
	var schemaType = ZU.xpathText(doc, '//div[contains(@class, "record-detail")]//div[@itemscope]/@itemtype');
	var pdfURL = ZU.xpathText(doc, '//meta[@name="citation_pdf_url"]/@content');
	var tags = ZU.xpath(doc, '//meta[@name="citation_keywords"]');
	var cslURL = url.replace(/#.+/, "").replace(/\?.+/, "").replace(/\/export\/.+/, "") + "/export/csl";
	//Z.debug(cslURL)
	//Z.debug(schemaType)
	// use CSL JSON translator
	ZU.processDocuments(cslURL, function(newDoc){
		var text = ZU.xpathText(newDoc, '//h3/following-sibling::pre');
		//Z.debug(text)
		text = text.replace(/publisher_place/, "publisher-place");
		text = text.replace(/container_title/, "container-title");

		var trans = Zotero.loadTranslator('import');
		// CSL JSON
		trans.setTranslator('bc03b4fe-436d-4a1f-ba59-de4d2d7a63f7');
		trans.setString(text);
		trans.setHandler("itemDone", function(obj, item) {
			// The "note" field of CSL maps to Extra. Put it in a note instead
			if (item.extra) {
				item.notes.push({"note": item.extra});
				item.extra = "";
			}

			if (!item.DOI && doi) {
				item.extra = "DOI: " + doi;
			}
			//workaround while we don't have proper item type for data
			//if (schemaType && schemaType.includes("Dataset")) {
			if (ZU.xpathText(doc, '//span[@class="pull-right"]/span[contains(@class, "label-default") and contains(., "Dataset")]')) {
				if (item.extra) {
					item.extra += "\nType: dataset";
				}
				else {
					item.extra = "Type: dataset";
				}
			}

			//get PDF attachment, otherwise just snapshot.
			if (pdfURL) {
				item.attachments.push({url:pdfURL, title: "Zenodo Full Text PDF", mimeType: "application/pdf"});
			}
			else {
				item.attachments.push({url:url, title: "Zenodo Snapshot", mimeType: "text/html"});
			}
			for (var i = 0; i<tags.length; i++) {
				item.tags.push(tags[i].content);
			}

			//something is odd with zenodo's author parsing to CSL on some pages; fix it
			//e.g. https://zenodo.org/record/569323
			for (var i = 0; i< item.creators.length; i++) {
				let creator = item.creators[i];
				if (!creator.firstName || !creator.firstName.length) {
					if (creator.lastName.includes(",")) {
						creator.firstName = creator.lastName.replace(/.+?,\s*/, "");
						creator.lastName = creator.lastName.replace(/,.+/, "");
					} else {
						item.creators[i] = ZU.cleanAuthor(creator.lastName,
							creator.creatorType, false);
					}
				}
				delete item.creators[i].creatorTypeID;
			}

			//Don't use Zenodo as university for theses
			if (item.itemType == "thesis" && item.publisher == "Zenodo") {
				item.publisher = "";
			}
			// or as institution for reports
			else if (item.itemType == "report" && item.institution == "Zenodo") {
				item.institution = "";
			}

			if (item.date) item.date = ZU.strToISO(item.date);
			if (url.includes('#')) {
				url = url.substring(0, url.indexOf('#'));
			}
			item.url = url;
			if (abstract) item.abstractNote = abstract;

			item.itemType = detectWeb(doc, url);
			item.itemID = "";
			item.complete();
		});
		trans.translate();
	});
}