async function detectWeb(doc, url) {
	if (url.includes('/detail.aspx')) {
		return 'book';
	}
	else if (getSearchResults(doc, true)) {
		return 'multiple';
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('#ctl00_PageContent_hitlist .rgRow a');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

async function doWeb(doc, url) {
	if (await detectWeb(doc, url) == 'multiple') {
		let items = await Zotero.selectItems(getSearchResults(doc, false));
		if (items) {
			await Promise.all(
				Object.keys(items)
					.map(url => requestDocument(url).then(doc => scrape(doc, url)))
			);
		}
	}
	else {
		await scrape(doc, url);
	}
}

async function scrape(doc, url) {
	let id = url.match(/[&?]Id=([^&#]+)/)[1];
	let db = url.match(/[&?]db=([^&#]+)/)[1];
	let unit = url.match(/[&?]Unit=([^&#]+)/)[1];

	let risURL = `/mikromarc3/RISHandler.ashx?marcId=${id}&db=${db}&Unit=${unit}`;
	let risText = await requestText(risURL);
	let translator = Zotero.loadTranslator('import');
	translator.setTranslator('32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7'); // RIS
	translator.setString(risText);
	translator.setHandler('itemDone', (_, item) => {
		item.title = item.title.replace(' :', ':');
		if (item.numPages) {
			item.numPages = item.numPages.replace('s.', '');
		}
		item.complete();
	});
	await translator.translate();
}