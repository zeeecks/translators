function detectWeb(doc, url) {
	if (url.indexOf('/vollanzeige.html?FId=')>-1
		|| url.indexOf('source_opus=')>-1) {
		var coins = doc.getElementsByClassName("Z3988");
		if (coins.length > 0) {
			var info = coins[0].title;
			if (info.indexOf("rft.genre=bookitem") > -1) {
				return "bookSection";
			}
			if (info.indexOf("rft.genre=book") > -1) {
				return "book";
			}
		}
		return "journalArticle";
	} else if (getSearchResults(doc, true)) {
		//searches will perform POST calls and therefore
		//we don't have a test case here; test manually
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//li//a[contains(@href, "/literatur/vollanzeige.html")]|//ol[contains(@class, "pedocs_ergebnisliste")]/li/a');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = new Array();
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var m = url.match(/FId=([\w\d]+)(&|$|#)/);
	if (m) {
		//e.g. http://www.fachportal-paedagogik.de/literatur/fis_ausgabe.html?FId%5B%5D=1041537&lart=BibTeX&senden=Exportieren&senden_an=
		var bibUrl = "/literatur/fis_ausgabe.html?FId[]=" + m[1] + "&lart=BibTeX";
		ZU.doGet(bibUrl, function(text){
			var translator = Zotero.loadTranslator("import");
			translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");//BibTex translator
			translator.setString(text);
			translator.setHandler("itemDone", function(obj, item) {
				finalize(doc, item);
			});
			translator.translate();
		});
	} else {
		var pdfUrl = ZU.xpathText(doc, '//meta[@name="citation_pdf_url"]/@content');
		//Z.debug(pdfUrl);
		
		var coins = ZU.xpathText(doc, '//span[@class="Z3988"]/@title');
		if (coins) {
			coins = transcodeURIEncoding(coins, 'Windows-1252');
			if (coins.indexOf('rft.genre=article') > -1
				|| coins.indexOf('rft.genre=bookitem') > -1) {
				coins = coins.replace('rft.title', 'rft.atitle');
			}
			var item = new Zotero.Item();
			ZU.parseContextObject(coins, item);
			
			if (item.abstractNote) {
				item.abstractNote = ZU.unescapeHTML(item.abstractNote);
			}
			
			if (pdfUrl) {
				item.attachments.push({
					url: pdfUrl,
					title: "Full Text PDF",
					mimeType: "application/pdf"
				});
			}
			finalize(doc, item);
		}
	}
}

function finalize(doc, item) {
	if (item.url) {
		item.attachments.push({
			url: item.url,
			title: "Entry in the German Education Index",
			snapshot: false
		});
		delete item.url;
	}
	var urn = ZU.xpathText(doc, '//meta[@name="DC.Identifier" and contains(@content, "urn:nbn")]/@content');
	if (urn) {
		item.url = "http://nbn-resolving.de/" + urn;
	}
	if (item.numPages) {
		item.numPages = item.numPages.replace(/\D/g, '');
	}
	if (item.publicationTitle) {
		item.publicationTitle = item.publicationTitle.replace(/\.$/, '');
	}
	item.complete();
}


/**
 * Credit for this function: Aurimas Vinckevicius
 * 
 * Transcodes non-UTF-8-encoded text that was passed through encodeURIComponent
 * (which assumed that it was UTF-8) into the UTF-8 equivalent. This makes decodeURIComponent
 * correctly decode the encoded text into UTF-8.
 *
 * E.g. 0x82 (SINGLE LOW-9 QUOTATION MARK) in Windows-1252 is treated as UTF-8 and encoded
 * as %C2%82. This would transcode it to %E2%80%9A and decodeURIComponent would then
 * decode it to "\u201A" (the same symbol)
 *
 * @param {String} s String to transcode
 * @param {String} fromEncoding String specifying source encoding. Only "Windows-1252" is
 *     currently supported.
 * @return {String} Transcoded string. Unaltered string is returned if the encoding is not recognized.
 * 
 * Examples:
 * transcodeURIEncoding("%C2%82", "Windows-1252") => "%E2%80%9A"
 * transcodeURIEncoding("%26%238208%3B", "Windows-1252") => "%26%238208%3B"
 */
function transcodeURIEncoding(s, fromEncoding) {
	// Only differing code points need to be specified
	var map = {
		// http://unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT
		'Windows-1252': {
			0x80: 0x20AC,
			0x81: null,
			0x82: 0x201A,
			0x83: 0x0192,
			0x84: 0x201E,
			0x85: 0x2026,
			0x86: 0x2020,
			0x87: 0x2021,
			0x88: 0x02C6,
			0x89: 0x2030,
			0x8A: 0x0160,
			0x8B: 0x2039,
			0x8C: 0x0152,
			0x8D: null,
			0x8E: 0x017D,
			0x8F: null,
			0x90: null,
			0x91: 0x2018,
			0x92: 0x2019,
			0x93: 0x201C,
			0x94: 0x201D,
			0x95: 0x2022,
			0x96: 0x2013,
			0x97: 0x2014,
			0x98: 0x02DC,
			0x99: 0x2122,
			0x9A: 0x0161,
			0x9B: 0x203A,
			0x9C: 0x0153,
			0x9D: null,
			0x9E: 0x017E,
			0x9F: 0x0178
		}
	}[fromEncoding];

	if (!map) return s;

	// Match two-byte UTF-8 patterns from 0x80 (%C2%80) to 0xFF (%C3%BF) code point, since
	// that would cover all 8-bit encodings. Note that in UTF-8 the two bytes are always in the 
	// 0b110xxxxx 0b10xxxxxx format, so the second byte is limited to [89AB][0-9A-F] hex codes
	return s.replace(/%C[23]%[89AB][0-9A-F]/g, function(m) {
		var codePoint = decodeURIComponent(m).codePointAt(0);

		if (!(codePoint in map)) return m;

		codePoint = map[codePoint];
		if (codePoint === null) {
			// Code point was not defined. Shouldn't really happen, unless
			// an incorrect fromEncoding was specified.
			return '';
		}

		return encodeURIComponent(String.fromCodePoint(codePoint));
	});
}