/*
SIRS Knowledge Source Translator
Copyright (C) 2014 ProQuest LLC
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

var yearRE = /\b\d{4}\b/;
var volRE = /Vol\. +#?(\d+|[MCLXIV]+)/;
var issueRE = /\(?(?:No\.|Issue)\)? #?(\d+\/?\d*)/;
var placeRE = /\((.+?)\)/;

function detectWeb(doc, url) {
	var results = ZU.xpath(doc, './/div[@class="result-icon"]//img/@src');

	if (results.length > 1) {
		return "multiple";
	}
	else if (results.length == 1) {
		var typeImage = results[0].value;
		
		if (typeImage.indexOf("magazines") > -1) {
			return "magazineArticle";
		}
		else if (typeImage.indexOf("newspapers") > -1) {
			return "newspaperArticle";
		}
		else if (typeImage.indexOf("books") > -1) {
			return "encyclopediaArticle";
		}
		else {
			// "websites", "govt_docs", "primary_srcs"
			return "document";
		}
	}

	return false;
}

function doWeb(doc, url) {
	var type = detectWeb(doc, url);

	if (type == "multiple") {
		importSearchPage(doc);
	}
	else if (type) {
		importSingle(doc, type, url);
	}
}

function andSplit(author) {
	return author.split(" and ")
		.map(function(a) { 
			a = ZU.trim(a);
			return (a.charAt(a.length - 1) == "," ? a.slice(0, a.length - 1) : a);
		})
		.filter(function(v) { return !!v; });
}

function commaSplit(author) {
	var authorSet = [];
	
	for (var i = 0; i < author.length; i++) {
		authorSet = authorSet.concat(author[i].split(",").map(function (a) {
			return ZU.trim(a);
		}));
	}
	
	return authorSet;
}

function parseAuthors(author, isSearch) {
	var authorSet = [];
	
	if (author) {
		var type = "author";
		author = ZU.trim(author);
	
		if (author.charAt(0) == ',') {
			author = ZU.trim(author.substring(1));
		}
		
		if (author.toLowerCase().indexOf("by") == 0) {
			author = ZU.trim(author.substring(2));
		}
		
		author = andSplit(author);
		
		if (!isSearch) {
			author = commaSplit(author);
		}
		
		if (author[author.length - 1] == "eds.") {
			type = "editor";
			author.pop();
		}
	
		for (var i = 0; i < author.length; i++) {		
			if (author[i] == "others") {
				continue;
			}
			
			authorSet.push(ZU.cleanAuthor(author[i], type, author[i].indexOf(",") > -1));
		}
	}
	
	return authorSet;
}

function importSingle(doc, type, url) {
	var item = new Zotero.Item(type);
	
	item.url = url;
	
	var summary = ZU.xpathText(doc, '//div[@id="document-view"][a[@name="summary"]]/p');
	if (summary != "No summary available") {
		item.abstractNote = summary;
	}
	
	item.tags = ZU.xpath(doc, '//div[@id="rel-subjects"]//td/a').map(function(a) {
		return a.textContent;
	});
	
	var pdfUrl = ZU.xpath(doc, '//div[@id="rel-contents"]//a[@class="pdf-icon"]')[0];
	if (pdfUrl && pdfUrl.href) {
		item.attachments.push({
			mimeType: "application/pdf",
			title: "Full Text PDF",
			url: pdfUrl.href
		});
	}
	
	item.attachments.push({
		title: "SIRS Knowledge Source Snapshot",
		document: doc
	});
	
	var root = ZU.xpath(doc, '//div[@id="artcont"]');
	
	var title = ZU.xpath(root, './/h1')[0];
	if (!title) {
		title = ZU.xpath(root, './/strong[not(ancestor::table)]')[0];
	}
	if (title) {
		item.title = title.textContent;
	}
	
	var author = [];
	var authorXpath = ['.//cmsheader//i', './/em/text()', './p/text()', './text()'];
	
	for (var i = 0; i < authorXpath.length; i++) {
		author = ZU.xpath(root, authorXpath[i]).filter(function (node) {
			return ZU.trim(node.textContent).toLowerCase().indexOf("by ") == 0;
		});
	
		if (author.length > 0) break;
	}
	
	var citation = ZU.xpath(doc, '//div[@id="document-view"]/div[@class="mlacitation"]/p');
	
	if (author.length == 0) {
		author = citation[0].textContent;
		if (author.indexOf('"') > 0) {
			// if we make it in here, we probably have an organizational author
			author = author.slice(0, author.indexOf('"') - 2);
			item.creators = [{lastName: author, creatorType: "author", fieldMode: 1}];
		}
	}
	else {
		item.creators = parseAuthors(ZU.trim(author[0].textContent));
	}
	
	item.libraryCatalog = cleanLastChar(ZU.xpath(citation, './i/text()')[1].textContent);

	var dateText = ZU.trim(ZU.xpath(citation, './text()')[1].textContent);
	dateText = dateText.slice(2, dateText.length);
	
	var datePageObj = getDatePages(ZU.trim(dateText));
	item.date = datePageObj.date;
	item.pages = datePageObj.pages;
	
	var pubTitle = ZU.xpath(citation, './i')[0];
	if (pubTitle) {
		item = getPlaceIssueVol(pubTitle.textContent, item);
	}
	
	if (!(item.issue && item.volume && item.place && item.date)) {
		var headerLines = ZU.xpath(root, './cmsheader/h5/text()');
	
		if (headerLines.length == 0) {
			headerLines = ZU.xpath(root, './h5/text()');
		}
	
		if (headerLines.length > 0) {
			headerLines = headerLines.map(function(node) {
				return ZU.trim(node.textContent);
			});
	
			if (!item.publicationTitle) {
				item.publicationTitle = headerLines[0];
			}
		
			for (var i = 1; i < headerLines.length; i++) {
				if (headerLines[i].indexOf("Copyright") > -1) {
					continue;
				}
			
				var issueCheck = issueRE.test(headerLines[i]);
				var volumeCheck = volRE.test(headerLines[i]);
			
				if ((!item.issue && issueCheck) || (!item.volume && volumeCheck)) {
					if (issueCheck) {
						item.issue = issueRE.exec(headerLines[i])[1];
					}
				
					if (volumeCheck) {
						item.volume = volRE.exec(headerLines[i])[1];
					}
				}
				else if (!item.date && yearRE.test(headerLines[i]))	{
					datePageObj = getDatePages(headerLines[i]);
					item.pages = datePageObj.pages;
					item.date = datePageObj.date			
				}
				else if (!item.place && placeRE.test(headerLines[i]) && item.itemType != "document" && !issueCheck && !volumeCheck) {
					// The check for "document" itemType is to catch a weird quirk that happens on "Government Document"
					// and "Primary Source" SIRS page types. (It does not affect "WebSite" pages.) These pages have one 
					// or more extra lines in the headerLines array for issuing organizations, such as the 
					// Department of Justice or FBI. There is no way to reliably differentiate these lines from the 
					// place, and these page types never seem to have a place anyway, so they're getting screened out.
					item.place = headerLines[i].substring(1, headerLines[i].length - 1);
				}
			}
		}
	}
	
	item.complete();
}

function getDatePages(line) {
	var split = line.indexOf('n.p.');
	var pages, date;

	if (split > -1) {		//no pages
		date = line.substring(0, split);
	}
	else {
		var regex = /pp?\.|:/;
	
		if (regex.test(line)) {
			var match = line.match(regex)[0];
			split = line.indexOf(match);
			pages = cleanLastChar(line.substring(split + 1 + match.length));
			date = line.substring(0, split);
		}
	}

	date = cleanLastChar(ZU.trim(date || line));

	return {"pages" : pages, "date" : date};
}

function cleanLastChar(s) {
	return s.replace(/\W$/, "");
}

function importSearchPage(doc) {
	var results = ZU.xpath(doc, '//div[@class="result normal-document"]');
	var items = {};
	
	for (var i = 0; i < results.length; i++) {
		items[i] = ZU.trim(ZU.xpathText(results[i], './/div[@class="line1"]/a'));
	}
	
	Zotero.selectItems(items, function (items) {
		if (!items) {
			return true;
		}
		
		for (var item in items) {
			processSearchItems(results[item]);
		}
	});
}

function processSearchItems(data) {
	var ref = new Zotero.Item(detectWeb(data));
	var pubTitle = ZU.trim(ZU.xpathText(data, './/div[@class="line1"]/span[@class="pub"]'));
	var libString = ZU.xpathText(data, './/div[@class="line2"]');

	ref.libraryCatalog = libString.slice(libString.indexOf("SIRS"));
	ref.title = ZU.trim(ZU.xpathText(data, './/div[@class="line1"]/a'));			
	ref.url = ZU.xpathText(data, './/div[@class="line1"]/a/@href');
	ref.creators = parseAuthors(ZU.xpathText(data, './/div[@class="line1"]/span[@class="author"]'), true);
	ref.abstractNote = ZU.trim(ZU.xpath(data, './/div[@name="article-summary"]/text()')[0].textContent);
	ref.tags = ZU.xpath(data, './/div[@name="article-summary"]/a/text()').map(function(a) {
		return ZU.trim(a.textContent);
	});
		
	var pdfUrl = ZU.xpath(data, './/a[@class="pdf"]')[0];
	if (pdfUrl && pdfUrl.href) {
		ref.attachments.push({
			url: pdfUrl.href,
			mimeType: "application/pdf",
			title: "Full Text PDF"
		});
	}
		
	ref = getPlaceIssueVol(pubTitle, ref);
		
	var line2Fields = ZU.xpathText(data, './/div[@class="line2"]').split("|").map(function(line) {
		return ZU.trim(line);
	});
		
	if (yearRE.test(line2Fields[0])) {
		ref.date = line2Fields[0];
	}
		
	if (line2Fields[1].indexOf('pg.') == 0) {
		var pages = ZU.trim(line2Fields[1]).substring(3);
		if (pages != "n.p.") {
			ref.pages = pages;
		}
	}
	
	ref.complete();
}

function getPlaceIssueVol(pubTitle, refItem) {
	if (pubTitle.length != 0) {
		var pubSplit = pubTitle.length
		var volCheck = volRE.test(pubTitle);
		var issueCheck = issueRE.test(pubTitle);
		var parenIndex = pubTitle.indexOf("(");
	
		if (volCheck) {
			var volMatch = volRE.exec(pubTitle);
			refItem.volume = volMatch[1]
			pubSplit = pubTitle.indexOf(volMatch[0]);
		}
	
		if (issueCheck) {
			var issueMatch = issueRE.exec(pubTitle);
			var issueSplit = pubTitle.indexOf(issueMatch[0]);
			refItem.issue = issueMatch[1];
			if (issueSplit < pubSplit) {
				pubSplit = issueSplit;
			}
		}
	
		if (placeRE.test(pubTitle) && !volCheck && !issueCheck) {
			var placeMatch = placeRE.exec(pubTitle);
			var placeSplit = pubTitle.indexOf(placeMatch[0]);
			refItem.place = placeMatch[1];
			if (placeSplit < pubSplit) {
				pubSplit = placeSplit;
			}
		}
	
		if (parenIndex > -1 && parenIndex < pubSplit) {
			pubSplit = parenIndex;
		}
	
		refItem.publicationTitle = (pubSplit == pubTitle.length ? pubTitle : pubTitle.slice(0, pubSplit));
	}
	
	return refItem;
}