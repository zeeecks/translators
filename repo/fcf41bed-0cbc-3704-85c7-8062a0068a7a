/*******************************
 * Import translator functions *
 *******************************/

function detectImport() {
	var text = Zotero.read(1000);
	return text.includes("<PubmedArticleSet>");
}

function processAuthors(newItem, authorsLists) {
	for (var j = 0, m = authorsLists.length; j < m; j++) {
		// default to 'author' unless it's 'editor'
		var type = "author";
		if (authorsLists[j].hasAttribute('Type')
			&& authorsLists[j].getAttribute('Type') === "editors") {
			type = "editor";
		}

		var authors = ZU.xpath(authorsLists[j], 'Author');

		for (var k = 0, l = authors.length; k < l; k++) {
			var author = authors[k];
			var lastName = ZU.xpathText(author, 'LastName');
			var firstName = ZU.xpathText(author, 'FirstName');
			if (!firstName) {
				firstName = ZU.xpathText(author, 'ForeName');
			}

			var suffix = ZU.xpathText(author, 'Suffix');
			if (suffix && firstName) {
				firstName += ", " + suffix;
			}

			if (firstName || lastName) {
				var creator = ZU.cleanAuthor(lastName + ', ' + firstName, type, true);
				if (creator.lastName.toUpperCase() == creator.lastName) {
					creator.lastName = ZU.capitalizeTitle(creator.lastName, true);
				}
				if (creator.firstName.toUpperCase() == creator.firstName) {
					creator.firstName = ZU.capitalizeTitle(creator.firstName, true);
				}
				newItem.creators.push(creator);
			}
			else if ((lastName = ZU.xpathText(author, 'CollectiveName'))) {
				// corporate author
				newItem.creators.push({
					creatorType: type,
					lastName: lastName,
					fieldMode: 1
				});
			}
		}
	}
}

function doImport() {
	var doc = Zotero.getXML();

	var pageRangeRE = /(\d+)-(\d+)/g;

	// handle journal articles
	var articles = ZU.xpath(doc, '/PubmedArticleSet/PubmedArticle');
	for (let i = 0, n = articles.length; i < n; i++) {
		var newItem = new Zotero.Item("journalArticle");

		var citation = ZU.xpath(articles[i], 'MedlineCitation')[0];

		var article = ZU.xpath(citation, 'Article')[0];

		let title = ZU.xpathText(article, 'ArticleTitle');
		if (!title) title = ZU.xpathText(article, 'VernacularTitle');
		if (title) {
			if (title.charAt(title.length - 1) == ".") {
				title = title.substring(0, title.length - 1);
			}
			newItem.title = title;
		}

		var fullPageRange = ZU.xpathText(article, 'Pagination/MedlinePgn');
		if (fullPageRange) {
			// where page ranges are given in an abbreviated format, convert to full
			pageRangeRE.lastIndex = 0;
			var range;
			while ((range = pageRangeRE.exec(fullPageRange))) {
				var pageRangeStart = range[1];
				var pageRangeEnd = range[2];
				var diff = pageRangeStart.length - pageRangeEnd.length;
				if (diff > 0) {
					pageRangeEnd = pageRangeStart.substring(0, diff) + pageRangeEnd;
					var newRange = pageRangeStart + "-" + pageRangeEnd;
					fullPageRange = fullPageRange.substring(0, range.index) // everything before current range
						+ newRange	// insert the new range
						+ fullPageRange.substring(range.index + range[0].length);	// everything after the old range
					// adjust RE index
					pageRangeRE.lastIndex += newRange.length - range[0].length;
				}
			}
			newItem.pages = fullPageRange;
		}
		// use elocation pii when there's no page range
		if (!newItem.pages) {
			newItem.pages = ZU.xpathText(article, 'ELocationID[@EIdType="pii"]');
		}

		var journal = ZU.xpath(article, 'Journal')[0];
		if (journal) {
			newItem.ISSN = ZU.xpathText(journal, 'ISSN');

			var abbreviation;
			if ((abbreviation = ZU.xpathText(journal, 'ISOAbbreviation'))) {
				newItem.journalAbbreviation = abbreviation;
			}
			else if ((abbreviation = ZU.xpathText(article, '//MedlineTA'))) {
				newItem.journalAbbreviation = abbreviation;
			}

			let title = ZU.xpathText(journal, 'Title');
			if (title) {
				title = ZU.trimInternal(title);
				// Fix sentence-cased titles, but be careful...
				if (!( // of accronyms that could get messed up if we fix case
					/\b[A-Z]{2}/.test(title) // this could mean that there's an accronym in the title
					&& (title.toUpperCase() != title // the whole title isn't in upper case, so bail
						|| !(/\s/.test(title))) // it's all in upper case and there's only one word, so we can't be sure
				)) {
					title = ZU.capitalizeTitle(title, true);
				}
				newItem.publicationTitle = title;
			}
			else if (newItem.journalAbbreviation) {
				newItem.publicationTitle = newItem.journalAbbreviation;
			}
			// (do we want this?)
			if (newItem.publicationTitle) {
				newItem.publicationTitle = ZU.capitalizeTitle(newItem.publicationTitle);
			}

			var journalIssue = ZU.xpath(journal, 'JournalIssue')[0];
			if (journalIssue) {
				newItem.volume = ZU.xpathText(journalIssue, 'Volume');
				newItem.issue = ZU.xpathText(journalIssue, 'Issue');
				var pubDate = ZU.xpath(journalIssue, 'PubDate')[0];
				if (pubDate) {	// try to get the date
					var day = ZU.xpathText(pubDate, 'Day');
					var month = ZU.xpathText(pubDate, 'Month');
					var year = ZU.xpathText(pubDate, 'Year');

					if (day) {
						// month appears in two different formats:
						// 1. numeric, e.g. "07", see 4th test
						if (month && /\d+/.test(month)) {
							newItem.date = ZU.strToISO(year + "-" + month + "-" + day);
						}
						// 2. English acronym, e.g. "Aug", see 3rd test
						else {
							newItem.date = ZU.strToISO(month + " " + day + ", " + year);
						}
					}
					else if (month) {
						newItem.date = ZU.strToISO(month + "/" + year);
					}
					else if (year) {
						newItem.date = year;
					}
					else {
						newItem.date = ZU.xpathText(pubDate, 'MedlineDate');
					}
				}
			}
		}

		var authorLists = ZU.xpath(article, 'AuthorList');
		processAuthors(newItem, authorLists);

		newItem.language = ZU.xpathText(article, 'Language');

		var keywords = ZU.xpath(citation, 'MeshHeadingList/MeshHeading');
		for (let j = 0, m = keywords.length; j < m; j++) {
			newItem.tags.push(ZU.xpathText(keywords[j], 'DescriptorName'));
		}
		// OT Terms
		var otherKeywords = ZU.xpath(citation, 'KeywordList/Keyword');
		for (let j = 0, m = otherKeywords.length; j < m; j++) {
			newItem.tags.push(otherKeywords[j].textContent);
		}
		var abstractSections = ZU.xpath(article, 'Abstract/AbstractText');
		var abstractNote = [];
		for (let j = 0, m = abstractSections.length; j < m; j++) {
			var abstractSection = abstractSections[j];
			var paragraph = abstractSection.textContent.trim();
			if (paragraph) paragraph += '\n';

			var label = abstractSection.hasAttribute("Label") && abstractSection.getAttribute("Label");
			if (label && label != "UNLABELLED") {
				paragraph = label + ": " + paragraph;
			}
			abstractNote.push(paragraph);
		}
		newItem.abstractNote = abstractNote.join('');

		newItem.DOI = ZU.xpathText(articles[i], 'PubmedData/ArticleIdList/ArticleId[@IdType="doi"]');

		var PMID = ZU.xpathText(citation, 'PMID');
		var PMCID = ZU.xpathText(articles[i], 'PubmedData/ArticleIdList/ArticleId[@IdType="pmc"]');
		if (PMID) {
			newItem.extra = "PMID: " + PMID;
			// this is a catalog, so we should store links as attachments
			newItem.attachments.push({
				title: "PubMed entry",
				url: "http://www.ncbi.nlm.nih.gov/pubmed/" + PMID,
				mimeType: "text/html",
				snapshot: false
			});
		}

		if (PMCID) {
			newItem.extra = (newItem.extra ? newItem.extra + "\n" : "")
				+ "PMCID: " + PMCID;
		}

		newItem.complete();
	}

	// handle books and chapters
	var books = ZU.xpath(doc, '/PubmedArticleSet/PubmedBookArticle');
	for (let i = 0, n = books.length; i < n; i++) {
		let citation = ZU.xpath(books[i], 'BookDocument')[0];

		// check if this is a section
		var sectionTitle = ZU.xpathText(citation, 'ArticleTitle');
		var isBookSection = !!sectionTitle;
		// eslint-disable-next-line
		var newItem = new Zotero.Item(isBookSection ? 'bookSection' : 'book');

		if (isBookSection) {
			newItem.title = sectionTitle;
		}

		var book = ZU.xpath(citation, 'Book')[0];

		// title
		let title = ZU.xpathText(book, 'BookTitle');
		if (title) {
			if (title.charAt(title.length - 1) == ".") {
				title = title.substring(0, title.length - 1);
			}
			if (isBookSection) {
				newItem.publicationTitle = title;
			}
			else {
				newItem.title = title;
			}
		}

		// date
		// should only need year for books
		newItem.date = ZU.xpathText(book, 'PubDate/Year');

		// edition
		newItem.edition = ZU.xpathText(book, 'Edition');

		// series
		newItem.series = ZU.xpathText(book, 'CollectionTitle');

		// volume
		newItem.volume = ZU.xpathText(book, 'Volume');

		// place
		newItem.place = ZU.xpathText(book, 'Publisher/PublisherLocation');

		// publisher
		newItem.publisher = ZU.xpathText(book, 'Publisher/PublisherName');

		// chapter authors
		if (isBookSection) {
			let authorsLists = ZU.xpath(citation, 'AuthorList');
			processAuthors(newItem, authorsLists);
		}

		// book creators
		let authorsLists = ZU.xpath(book, 'AuthorList');
		processAuthors(newItem, authorsLists);

		// language
		newItem.language = ZU.xpathText(citation, 'Language');

		// abstractNote
		newItem.abstractNote = ZU.xpathText(citation, 'Abstract/AbstractText');

		// rights
		newItem.rights = ZU.xpathText(citation, 'Abstract/CopyrightInformation');

		// seriesNumber, numPages, numberOfVolumes
		// not available

		// ISBN
		newItem.ISBN = ZU.xpathText(book, 'Isbn');

		let PMID = ZU.xpathText(citation, 'PMID');
		if (PMID) {
			newItem.extra = "PMID: " + PMID;

			// this is a catalog, so we should store links as attachments
			newItem.attachments.push({
				title: "PubMed entry",
				url: "http://www.ncbi.nlm.nih.gov/pubmed/" + PMID,
				mimeType: "text/html",
				snapshot: false
			});
		}

		newItem.callNumber = ZU.xpathText(citation,
			'ArticleIdList/ArticleId[@IdType="bookaccession"]');
		// attach link to the bookshelf page
		if (newItem.callNumber) {
			var url = "http://www.ncbi.nlm.nih.gov/books/" + newItem.callNumber + "/";
			if (PMID) {	// books with PMIDs appear to be hosted at NCBI
				newItem.url = url;
				// book sections have printable views, which can stand in for full text PDFs
				if (newItem.itemType == 'bookSection') {
					newItem.attachments.push({
						title: "Printable HTML",
						url: 'http://www.ncbi.nlm.nih.gov/books/'
							+ newItem.callNumber + '/?report=printable',
						mimeType: 'text/html',
						snapshot: true
					});
				}
			}
			else {	// currently this should not trigger, since we only import books with PMIDs
				newItem.attachments.push({
					title: "NCBI Bookshelf entry",
					url: "http://www.ncbi.nlm.nih.gov/books/" + newItem.callNumber + "/",
					mimeType: "text/html",
					snapshot: false
				});
			}
		}

		newItem.complete();
	}
}