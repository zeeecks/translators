function detectWeb(doc, url) {
	if (url.includes('/book/')) {
		return "book";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h2.title > a[href*="/book/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, _url) {
	let item = new Zotero.Item('book');
	
	for (let keyElem of doc.querySelectorAll('#d-book-details dt')) {
		let key = ZU.trimInternal(keyElem.textContent);
		let value = keyElem.nextElementSibling.textContent;

		switch (key) {
			case 'Title':
				item.title = value.replace(/\.\s*$/, '');
				break;
			case 'Author':
				for (let name of value.split(';')) {
					item.creators.push(ZU.cleanAuthor(name, 'author', true));
				}
				break;
			case 'Edition':
				item.edition = value;
				break;
			case 'Publisher':
				item.publisher = value;
				break;
			case 'Place of Publication':
				item.place = value;
				break;
			case 'Date published':
			case 'First published':
			case 'This edition first published':
				item.date = ZU.strToISO(value);
				break;
			case 'ISBN 10':
			case 'ISBN 13':
				item.ISBN = ZU.cleanISBN(value);
				break;
			default:
				if (!item.date && /\bpublished\b/i.test(key)) {
					// handle odd date labels, just in case
					item.date = ZU.strToISO(value);
				}
				break;
		}
	}
	
	item.url = attr(doc, 'link[rel="canonical"]', 'href');
	
	item.complete();
}