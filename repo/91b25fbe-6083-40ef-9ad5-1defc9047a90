/* eslint-disable camelcase */
const TYPE_MAPPING = {
	docmaintype_archives: 'document',
	docmaintype_article: 'journalArticle',
	docmaintype_audio: 'audioRecording',
	docmaintype_book: 'book',
	docsubtype_manuscript: 'manuscript',
	docsubtype_thesis: 'thesis',
	docmaintype_electronic: 'computerProgram',
	docsubtype_video_game: 'computerProgram',
	docmaintype_image: 'artwork',
	docmaintype_map: 'map',
	docmaintype_movie_series: 'videoRecording',
	docmaintype_patent: 'patent',
	docmaintype_preprint: 'preprint',
};

// Copied from MARC translator
const CREATOR_MAPPING = {
	act: "castMember",
	asn: "contributor", // Associated name
	aut: "author",
	cmp: "composer",
	ctb: "contributor",
	drt: "director",
	edt: "editor",
	pbl: "SKIP", // publisher
	prf: "performer",
	pro: "producer",
	pub: "SKIP", // publication place
	trl: "translator"
};

async function detectWeb(doc, url) {
	if (!doc.querySelector('.rero-ils-header')) {
		return false;
	}

	if (getDomainAndID(url).length) {
		return 'book';
	}
	else if (getSearchResults(doc, true)) {
		return 'multiple';
	}
	else if (url.includes('/search/')) {
		Z.monitorDOMChanges(doc.querySelector('public-search-root'),
			{ childList: true, subtree: true });
	}
	return false;
}

function getDomainAndID(url) {
	return (url.match(/\/([^/]+)\/documents\/(\d+)/) || []).slice(1);
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('#recordlist h4 > a[href*="/documents/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

async function doWeb(doc, url) {
	if (await detectWeb(doc, url) == 'multiple') {
		let items = await Zotero.selectItems(getSearchResults(doc, false));
		if (items) {
			await Promise.all(
				Object.keys(items)
					.map(url => scrape(getDomainAndID(url)))
			);
		}
	}
	else {
		await scrape(getDomainAndID(url));
	}
}

async function scrape([domain, id]) {
	let jsonDoc = await requestDocument(`/${domain}/documents/${id}/export/json`);
	let json = JSON.parse(text(jsonDoc, 'pre')).metadata;

	let itemType = 'book';
	for (let { main_type, subtype } of json.type) {
		if (subtype && TYPE_MAPPING[subtype]) {
			itemType = TYPE_MAPPING[subtype];
		}
		else if (TYPE_MAPPING[main_type]) {
			itemType = TYPE_MAPPING[main_type];
		}
	}

	let item = new Zotero.Item(itemType);

	if (json.title && json.title.length) {
		item.title = json.title[0]._text
			|| (json.title[0].mainTitle[0].value + ': ' + json.title[0].subtitle[0].value);
	}
	else {
		item.title = 'Untitled';
	}

	if (json.contribution && json.contribution.length) {
		for (let creator of json.contribution) {
			let type = CREATOR_MAPPING[creator.role[0]] || 'author';
			if (type === 'SKIP') continue;
			let name = creator.agent.preferred_name
				|| (await requestJSON(creator.agent.$ref)).metadata.preferred_name;
			if (creator.agent.type == 'bf:Organisation') {
				item.creators.push({
					lastName: name,
					creatorType: type,
					fieldMode: 1
				});
			}
			else {
				item.creators.push(ZU.cleanAuthor(name, type, name.includes(',')));
			}
		}

		if (item.creators.every(c => c.creatorType == 'contributor')) {
			for (let creator of item.creators) {
				creator.creatorType = 'author';
			}
		}
	}

	if (json.extent) {
		let extent = json.extent.replace('p.', '');
		if (!(/^vol/i.test(extent)) && ZU.fieldIsValidForType('numPages', itemType)) {
			item.numPages = extent;
		}
	}

	if (json.language && json.language.length) {
		item.language = json.language[0].value;
	}

	if (json.provisionActivity && json.provisionActivity.length) {
		let provision = json.provisionActivity[0];
		let place, agent, date;
		if (provision.statement) {
			for (let statement of provision.statement) {
				let label = statement.label[0] && statement.label[0].value;
				if (!label) continue;
				switch (statement.type) {
					case 'bf:Place':
						place = label;
						break;
					case 'bf:Agent':
						agent = label;
						break;
					case 'Date':
						date = label;
						break;
				}
			}
		}
		if (!date) {
			date = provision.startDate;
		}

		if (place) {
			item.place = place
				.replace(/^\[(.+)\]$/, '$1')
				.replace(/\([^)]+\)/, '')
				.replace(/\[[^\]]+\]/, '');
		}
		if (agent) {
			item.publisher = agent
				.replace(/\([^)]+\)/, '')
				.replace(/\[[^\]]+\]/, '');
		}
		if (date) {
			item.date = ZU.strToISO(date);
		}
	}

	if (json.seriesStatement && json.seriesStatement.length) {
		let statement = json.seriesStatement[0];
		let series = statement.seriesTitle && statement.seriesTitle[0].value;
		if (ZU.fieldIsValidForType('publicationTitle', itemType)) {
			item.publicationTitle = series;
			let seriesEnum = statement.seriesEnumeration && statement.seriesEnumeration[0]
				&& statement.seriesEnumeration[0].value;
			if (seriesEnum) {
				let parts = seriesEnum.split(',').map(part => part.trim().toLowerCase());
				for (let part of parts) {
					if (part.startsWith('vol.')) {
						item.volume = part.substring(4);
					}
					else if (part.startsWith('no.')) {
						item.issue = part.substring(3);
					}
					else if (part.startsWith('p.')) {
						item.pages = part.substring(2);
					}
				}
			}
		}
		else {
			// These are usually collection names, not really series;
			// we probably don't want to store them.
			// item.series = series;
		}
	}

	if (json.identifiedBy) {
		for (let identifier of json.identifiedBy) {
			switch (identifier.type) {
				case 'bf:Isbn':
					item.ISBN = ZU.cleanISBN(identifier.value);
					break;
				case 'uri':
					item.url = identifier.value;
					break;
				case 'bf:Local':
					if (identifier.source == 'RERO') {
						item.callNumber = identifier.value;
					}
			}
		}
	}

	if (json.dimensions && json.dimensions[0]
			&& ZU.fieldIsValidForType('artworkSize', itemType)) {
		item.artworkSize = json.dimensions[0];
	}

	if (json.editionStatement && json.editionStatement[0]) {
		item.edition = json.editionStatement[0].editionDesignation[0].value;
	}

	if (json.subjects) {
		for (let subject of json.subjects) {
			item.tags.push({ tag: subject.term });
		}
	}

	if (json.supplementaryContent) {
		for (let note of json.supplementaryContent) {
			item.notes.push({ note });
		}
	}

	if (json.note) {
		for (let note of json.note) {
			item.notes.push({ note: note.label });
		}
	}

	if (json.summary) {
		for (let summary of json.summary) {
			for (let label of summary.label) {
				item.abstractNote = (item.abstractNote ? item.abstractNote + '\n' : '')
					+ label.value;
			}
		}
	}

	if (json.electronicLocator) {
		for (let locator of json.electronicLocator) {
			if (locator.content == 'coverImage'
					|| locator.url.endsWith('.jpg')
					|| locator.url.endsWith('.png')) {
				continue;
			}
			let title = locator.content == 'fullText'
				? 'Full Text PDF'
				: 'Full Text';
			let mimeType = locator.content == 'fullText'
				? 'application/pdf'
				: 'text/html';
			let snapshot = locator.content != 'fullText';
			item.attachments.push({
				title,
				mimeType,
				snapshot,
				url: locator.url
			});
		}
	}

	item.complete();
}