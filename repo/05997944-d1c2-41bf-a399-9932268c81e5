function detectWeb(doc, url) {
	if (/\/books\/[^/]+\/[0-9]+/.test(url)
		&& attr('meta[property="og:type"]', 'content') == 'book') {
		return "book";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h2 a[href*="/books/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		item.numPages = text(doc, '[itemprop="numberOfPages"]');
		item.publisher = text(doc, '[itemprop="publisher"]');
		
		item.tags = [];
		item.attachments = [];
		item.url = '';
		
		for (let author of doc.querySelectorAll('span[itemprop="author"]')) {
			let name = text(author, 'span[itemprop="name"]');
			let type = author.parentNode.nextSibling.textContent;
			
			if (type.includes('Author')) {
				type = 'author';
			}
			else if (type.includes('Editor')) {
				type = 'editor';
			}
			else if (type.includes('Translator')) {
				type = 'translator';
			}
			else {
				type = 'contributor';
			}
			
			item.creators.push(ZU.cleanAuthor(name, type));
		}
		
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = "book";
		trans.doWeb(doc, url);
	});
}