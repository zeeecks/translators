function detectWeb(doc) {
	let contentType = attr(doc, 'meta[property="og:type"]', 'content');
	switch (contentType) {
		case "article":
			return "newspaperArticle";
		case "website":
		default:
			if (getSearchResults(doc, true)) {
				return "multiple";
			}
			break;
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a[class*="-mediacard"]');
	for (let row of rows) {
		let href = row.href;
		let title = text(row, 'h3');
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) return;
			ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var trans = Zotero.loadTranslator('web');
	trans.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48'); // Embedded Metadata
	trans.setDocument(doc);

	trans.setHandler('itemDone', function (obj, item) {
		if (item.itemType == "newspaperArticle") {
			item.publicationTitle = "The Toronto Star";
			item.libraryCatalog = "Toronto Star";
			item.ISSN = "0319-0781";
		}
		item.language = "en-CA";

		let linkedData = JSON.parse(text(doc, 'script[type="application/ld+json"]'))["@graph"];
		if (linkedData.length > 0) {
			let articleData = linkedData.find(x => x["@type"] == "ReportageNewsArticle");
			if (articleData) {
				item.title = articleData.headline;
				item.date = articleData.datePublished;
				item.abstractNote = articleData.description;

				if (articleData.author) {
					if (Array.isArray(articleData.author)) {
						for (let author of articleData.author) {
							if (author.name) item.creators.push(ZU.cleanAuthor(author.name, 'author'));
						}
					}
					else if (articleData.author.name) {
						item.creators.push(ZU.cleanAuthor(articleData.author.name, 'author'));
					}
				}
			}
		}

		for (let tag of doc.querySelectorAll('div.tags a')) {
			item.tags.push(tag.textContent);
		}
		item.tags = item.tags.filter(tag => !tag.includes('_'));

		item.complete();
	});

	trans.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}