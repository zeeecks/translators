let ns = {
	srw: 'http://www.loc.gov/zing/srw/',
	mxc: 'info:lc/xmlns/marcxchange-v2'
};

function detectSearch(item) {
	return !!item.ISBN;
}

function doSearch(item) {
	let ISBN = ZU.cleanISBN(item.ISBN);
	let url = `https://catalogue.bnf.fr/api/SRU?version=1.2&operation=searchRetrieve&query=bib.isbn%20all%20%22${ISBN}%22`;
	ZU.doGet(url, function (xmlText) {
		let parser = new DOMParser();
		let xml = parser.parseFromString(xmlText, 'application/xml');
		let records = ZU.xpath(xml.documentElement, '/srw:searchRetrieveResponse/srw:records/srw:record', ns);
		if (!records) return;

		for (let record of records) {
			if (ZU.xpathText(record, '//srw:recordSchema', ns) != 'marcxchange') continue;

			let marcRecords = ZU.xpath(record, '//srw:recordData/mxc:record', ns);
			if (!marcRecords) continue;

			for (let marcRecord of marcRecords) {
				marcRecord.setAttribute('xmlns:marc', 'http://www.loc.gov/MARC21/slim');

				// Here we convert the XML we get from BnF from the original
				// MarcXchange format into MARCXML by search-and-replacing
				// the namespace. MARCXML and and MarcXchange are essentially
				// the same format: the latter is a "generalization (mainly by
				// weakening restrictions)" of the former. We didn't enforce
				// those restrictions to begin with.

				// MarcXchange spec:
				// https://www.loc.gov/standards/iso25577/ISO_DIS_25577__E_.pdf

				let marcxchangeText = new XMLSerializer().serializeToString(marcRecord);
				let marcXMLText = marcxchangeText.replace(/<mxc:/g, '<marc:').replace(/<\/mxc:/g, '</marc:');

				let translator = Zotero.loadTranslator('import');
				// MARCXML
				translator.setTranslator('edd87d07-9194-42f8-b2ad-997c4c7deefd');
				translator.setString(marcXMLText);
				translator.translate();
			}
		}
	});
}