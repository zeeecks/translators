function detectImport() {
	var line;
	var i = 0;
	while ((line = Zotero.read()) !== false) {
		line = line.replace(/^\s+/, "");
		if (line != "") {
			// All Ovid databases have this at the top:
			if (line.match(/^VN\s{1,2}- Ovid Technologies/)) {
				return true;
			}
			else if (i++ > 3) {
				return false;
			}
		}
	}
	return false;
}

var fieldMap = {
	TI: "title",
	VI: "volume",
	IP: "issue",
	PL: "place",
	PB: "publisher",
	BT: "bookTitle",
	JT: "publicationTitle",
	TA: "journalAbbreviation",
	PG: "pages",
	PN: "patentNumber",
	RO: "rights",
	DG: "issueDate",
	IB: "ISBN",
	IS: "ISSN",
	LG: "language",
	EN: "edition",
	DB: "libraryCatalog",
	AB: "abstractNote",
	AN: "callNumber"
};


// Only the most basic types. Mostly guessing from existing Ovid records here
var inputTypeMap = {
	Book: "book",
	"Book Chapter": "bookSection",
	"Book chapter": "bookSection",
	Chapter: "bookSection",
	Dissertation: "thesis",
	"Dissertation Abstract": "thesis",
	"Journal Article": "journalArticle",
	"Newspaper Article": "newspaperArticle",
	"Video-Audio Media": "videoRecording",
	"Technical Report": "report",
	"Legal Case": "case",
	Legislation: "statute",
	Patent: "patent"
};

function processTag(item, tag, value) {
	value = Zotero.Utilities.trim(value);
	if (fieldMap[tag]) {
		item[fieldMap[tag]] = value;
	}
	else if (tag == "PT" || tag == "DT") {
		if (inputTypeMap[value]) { // first check inputTypeMap
			item.itemType = inputTypeMap[value];
		}
	// I don't think FED or ED exist, but let's keep them to be safe
	}
	else if (tag == "FA" || tag == "FED") {
		let type;
		if (tag == "FA") {
			type = "author";
		}
		else if (tag == "FED") {
			type = "editor";
		}
		item.creators.push(Zotero.Utilities.cleanAuthor(value, type, value.includes(",")));
	}
	else if (tag == "AU" || tag == "ED") {
		let type;
		if (tag == "AU") {
			type = "author";
		}
		else if (tag == "ED") {
			type = "editor";
		}
		value = value.replace(/[0-9,+*\s]+$/, "").replace(/ Ph\.?D\.?.*/, "").replace(/\[.+/, "")
			.replace(/(\b(?:MD|[BM]Sc|[BM]A|MPH|MB)(,\s*)?)+$/gi, "");
		// Z.debug(value)
		item.creatorsBackup.push(Zotero.Utilities.cleanAuthor(value, type, value.includes(",")));
	}
	else if (tag == "UI") {
		item.PMID = "PMID: " + value;
	}
	else if (tag == "DI" || tag == "DO") {
		if (value.includes("10.")) item.DOI = value;
	}
	else if (tag == "YR") {
		item.date = value;
	}
	else if (tag == "IN") {
		item.institution = value;
	}
	else if (tag == "SO") {
		item.citation = value;
	}
	else if (tag == "PU") {
		item.publishing = value;
	}
	else if (tag == "KW") {
		let tags = value.split(/;\s*/);
		for (let tag of tags) {
			item.tags.push({ tag });
		}
	}
}

function doImport() {
	var line = true;
	var potentialItemID, checkID;
	do { // first valid line is type
		Zotero.debug("ignoring " + line);
		line = Zotero.read();
		line = line.replace(/^\s+/, "");
		checkID = line.match(/^<\s*(\d+)\.\s*>\s*$/);
		if (checkID) potentialItemID = checkID[1];
	} while (line !== false && line.search(/^[A-Z0-9]+\s*-/) == -1);

	var item = new Zotero.Item();
	item.creatorsBackup = [];
	if (potentialItemID) item.itemID = potentialItemID;
	potentialItemID = null;
	
	var tag = line.match(/^[A-Z0-9]+/)[0];
	var data = line.substr(line.indexOf("-") + 1);
	while ((line = Zotero.read()) !== false) { // until EOF
		line = line.replace(/^\s+/, "");
		
		checkID = line.match(/^<\s*(\d+)\.\s*>\s*$/);
		if (checkID && !potentialItemID) potentialItemID = checkID[1];
		
		if (line.search(/^[A-Z0-9]+\s*-/) != -1) {
			// if this line is a tag, take a look at the previous line to map
			// its tag
			if (tag) {
				processTag(item, tag, data);
			}

			// then fetch the tag and data from this line
			tag = line.match(/^[A-Z0-9]+/)[0];
			
			if (tag == 'VN') {
				// New item, finalize last one
				finalizeItem(item);
				
				item = new Zotero.Item();
				item.creatorsBackup = [];
				if (potentialItemID) item.itemID = potentialItemID;
				potentialItemID = null;
			}
			
			data = line.substr(line.indexOf("-") + 1);
		}
		else if (tag) {
			// otherwise, assume this is data from the previous line continued
			data += " " + line;
		}
	}

	if (tag) { // save any unprocessed tags
		processTag(item, tag, data);
		// and finalize with some post-processing
		finalizeItem(item);
	}
}

function finalizeItem(item) {
	if (item.creators.length == 0 && item.creatorsBackup.length > 0) {
		item.creators = item.creatorsBackup;
	}
	delete item.creatorsBackup;
	if (!item.itemType) item.itemType = inputTypeMap["Journal Article"];
	item.title = item.title
		.replace(/(\.\s*)?(\[(Article|Report|Miscellaneous|References)\])?([.\s]*)?$/, "")
		.replace(/^\s*"(.+)"\s*$/, '$1');
	var monthRegex = /(?:[-/]?(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))+\b/;
	var value = item.citation;
	if (!value && item.itemType == "bookSection") value = item.bookTitle;
	if (item.itemType == "journalArticle" && value) {
		if (value.match(/\d{4}/)) {
			if (!item.date) item.date = value.match(/\d{4}/)[0];
		}
		var month = monthRegex.exec(value);
		if (month) item.date = item.date += " " + (month)[0];
		if (value.match(/(\d+)\((\d+(?:-\d+)?)\)/)) {
			var voliss = value.match(/(\d+)\((\d+(?:-\d+)?)\)/);

			item.volume = voliss[1];
			item.issue = voliss[2];
		}
		if (value.match(/vol\.\s*(\d+)/)) {
			item.volume = value.match(/vol\.\s*(\d+)/)[1];
		}
		if (!item.volume && value.match(/\d{4};(\d+):/)) item.volume = value.match(/\d{4};(\d+):/)[1];
		if (value.match(/vol\.\s*\d+\s*,\s*no\.\s*(\d+)/)) {
			item.issue = value.match(/vol\.\s*\d+\s*,\s*no\.\s*(\d+)/)[1];
		}
		if (value.match(/:\s*\d+-\d+/)) item.pages = value.match(/:\s*(\d+-\d+)/)[1];
		if (value.match(/pp\.\s*(\d+-\d+)/)) item.pages = value.match(/pp\.\s*(\d+-\d+)/)[1];
		if (value.match(/^\s*[J|j]ournal[-\s\w&:]+/)) {
			item.publicationTitle = value.match(/^\s*[J|j]ournal[-\s\w&:]+/)[0];
		}
		else {
			item.publicationTitle = Zotero.Utilities.trimInternal(value.split(/(\.|;|(,\s*vol\.))/)[0]);
		}
		item.publicationTitle = item.publicationTitle.split(monthRegex)[0];
	}
	if (item.itemType == "bookSection" && value) {
		if (!item.pages) {
			if (value.match(/:\s*\d+-\d+/)) item.pages = value.match(/:\s*(\d+-\d+)/)[1];
			if (value.match(/pp\.\s*(\d+-\d+)/)) item.pages = value.match(/pp\.\s*(\d+-\d+)/)[1];
		}
		// editors are only listed as part of the citation...
		if (/(.+?)\[Ed(itor|\.|\])/.test(value)) {
			var editors = value.match(/.+?\[Ed(itor|\.|\])/g);
			for (let editor of editors) {
				editor = editor.replace(/\[Ed(itor|\.|\]).*$/, "").replace(/.*?\][,\s]*/, "");
				item.creators.push(ZU.cleanAuthor(editor, "editor", true));
			}
		}
		if (value.match(/.+\[Ed(?:\.|itor)?\][.\s]*([^.]+)/)) {
			item.bookTitle = value.match(/.+\[Ed(?:\.|itor)?\][.\s]*(?:\(\d{4}\)\.)?([^.]+)/)[1];
		}
	}
	// fix all caps authors
	for (var i in item.creators) {
		if (item.creators[i].lastName && item.creators[i].lastName == item.creators[i].lastName.toUpperCase()) {
			item.creators[i].lastName = ZU.capitalizeTitle(item.creators[i].lastName.toLowerCase(), true);
		}
	}
	if (item.pages) {
		// Z.debug(item.pages)
		// where page ranges are given in an abbreviated format, convert to full
		// taken verbatim from NCBI Pubmed translator
		var pageRangeRE = /(\d+)-(\d+)/g;
		pageRangeRE.lastIndex = 0;
		var range = pageRangeRE.exec(item.pages);
		if (range) {
			var pageRangeStart = range[1];
			var pageRangeEnd = range[2];
			var diff = pageRangeStart.length - pageRangeEnd.length;
			if (diff > 0) {
				pageRangeEnd = pageRangeStart.substring(0, diff) + pageRangeEnd;
				var newRange = pageRangeStart + "-" + pageRangeEnd;
				var fullPageRange = item.pages.substring(0, range.index) // everything before current range
				+ newRange // insert the new range
				+ item.pages.substring(range.index + range[0].length); // everything after the old range
				// adjust RE index
				pageRangeRE.lastIndex += newRange.length - range[0].length;
				item.pages = fullPageRange;
			}
		}
	}
	if ((item.itemType == "book" || item.itemType == "bookSection") && !item.publisher) {
		item.publisher = item.publishing;
	}
	
	if (item.publisher && !item.pace) {
		if (item.publisher.search(/,./) != -1) {
			item.place = item.publisher.match(/,(.+?)$/)[1];
			item.publisher = item.publisher.replace(/,.+?$/, "");
		}
	}
	if (item.itemType == "thesis" && item.institution) {
		item.publisher = item.institution.replace(/^.+:\s*/, "");
		delete item.institution;
	}
	if (item.ISBN) item.ISBN = ZU.cleanISBN(item.ISBN);
	if (item.ISSN) item.ISSN = ZU.cleanISSN(item.ISSN);
	if (item.DOI) item.DOI = ZU.cleanDOI(item.DOI);
	if (item.callNumber) {
		item.callNumber = item.callNumber.replace(/[.\s]+$/, '');
	}
	// strip extraneous label at the end of title (reported for Psycinfo)
	if (item.libraryCatalog && item.libraryCatalog.includes("MEDLINE") && item.PMID) {
		item.extra = item.PMID;
		delete item.PMID;
	}

	delete item.publishing;
	delete item.citation;
	delete item.itemID;
	item.complete();
}