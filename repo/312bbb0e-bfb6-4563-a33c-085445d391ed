/*
This translator works only partially, because zeit.de uses some strange javascript that makes 
processDocuments return an error. If I just call scrape(doc, url) on a single document, it works.
The way the translator is programmed now, it only works for multiples if JavaScript is turned off in the browser.
For example at 
   http://www.zeit.de/suche/index?q=Krise
only the first reference can be scraped.
*/

function detectWeb(doc, url) {
	var pageType = doc.body.getAttribute("data-page-type");
	if (pageType == "article") {
		return "newspaperArticle";
	} else if (getSearchResults(doc, true)){ //ZU.xpath(doc, '//h4/a|//h2/a').length>0
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.getElementsByClassName('archiveteaser');
	if (rows.length === 0) {
		rows = doc.getElementsByClassName('teaser-small__container');
	}
	for (var i=0; i<rows.length; i++) {
		var href = ZU.xpathText(rows[i], '(.//a/@href)[1]');
		var title = ZU.trimInternal( ZU.xpathText(rows[i], './/a/h4|.//a[span]') );
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var data = ZU.xpath(doc, '//script[@type="application/ld+json"]');
	let json;
	let found = false;
	for (let dataItem of data) {
		json = JSON.parse(dataItem.textContent);
		if (json["@type"] == "Article") {
			found = true;
			break;
		}
	}
	if (!found) {
		return;
	}
	// Z.debug(json);
	
	var newItem = new Zotero.Item("newspaperArticle");
	newItem.url = url;
	newItem.title = json.headline;
	newItem.abstractNote = json.description;
	if (json.datePublished) {
		newItem.date = json.datePublished.replace(/T.+/, "");
	}
	if (json.author) {
		if (!Array.isArray(json.author)) {
			json.author = [json.author];
		}
		for (let author of json.author) {
			if (author.name) {
				newItem.creators.push(ZU.cleanAuthor(author.name, "author"));
			}
		}
	} else {
		var authorNode = ZU.xpath(doc, '//div[@class="byline"]');
		for (let i=0; i<authorNode.length; i++) {
			var authorName = authorNode[i].textContent;
			if (authorName){
				authorName = authorName.replace(/^\s*Von/, '');
				newItem.creators.push(ZU.cleanAuthor(authorName, "author"));
			}
		}
	}
	for (let i=0; i<newItem.creators.length; i++) {
		if (newItem.creators[i].firstName === "") {
			newItem.creators[i].fieldMode = 1;
			delete newItem.creators[i].firstName;
		}
	}
	
	var section = doc.getElementsByClassName("nav__ressorts-link--current");
	if (section.length > 0) {
		newItem.section = section[0].textContent;
	}
	
	newItem.publicationTitle = "Die Zeit";
	newItem.ISSN = "0044-2070";
	newItem.language = "de-DE";
	newItem.place = "Hamburg";
	
	var keywordsString = json.keywords;
	var keywords = keywordsString.split(',');
	for (let i=0; i<keywords.length; i++) {
		newItem.tags.push(
			keywords[i].trim()
		);
	}

	// if present, use the link to show the whole content on a single page
	var snapshotNode = ZU.xpath(doc, '//li[@class="article-pager__all"]/a');
	var snapshotUrl = (snapshotNode.length > 0) ? snapshotNode[0].href : url;
	newItem.attachments.push({
		url : snapshotUrl,
		title : "Snapshot", 
		mimeType : "text/html"
	}); 
	newItem.complete();
}