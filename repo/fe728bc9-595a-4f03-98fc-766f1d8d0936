/*
   Wiley Online Translator
   Copyright (C) 2011-2021 CHNM, Avram Lyon and Aurimas Vinckevicius

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


function fixCase(authorName) {
	if (typeof authorName != 'string') return authorName;

	if (authorName.toUpperCase() == authorName
		|| authorName.toLowerCase() == authorName) {
		return ZU.capitalizeTitle(authorName, true);
	}

	return authorName;
}

function addCreators(item, creatorType, creators) {
	if (typeof (creators) == 'string') {
		creators = [creators];
	}
	else if (!(creators instanceof Array)) {
		return;
	}

	for (var i = 0, n = creators.length; i < n; i++) {
		item.creators.push(ZU.cleanAuthor(fixCase(creators[i]), creatorType, false));
	}
}

function getAuthorName(text) {
	// lower case words at the end of a name are probably not part of a name
	text = text.replace(/(\s+[a-z]+)+\s*$/, '');

	text = text.replace(/(^|[\s,])(PhD|MA|Prof|Dr)(\.?|(?=\s|$))/gi, '');	// remove salutations

	return fixCase(text.trim());
}

function scrapeBook(doc, url) {
	var title = doc.getElementById('productTitle');
	if (!title) return;

	var newItem = new Zotero.Item('book');
	newItem.title = ZU.capitalizeTitle(title.textContent, true);

	var data = ZU.xpath(doc, '//div[@id="metaData"]/p');
	var dataRe = /^(.+?):\s*(.+?)\s*$/;
	var match;
	var isbn = [];
	for (var i = 0, n = data.length; i < n; i++) {
		match = dataRe.exec(data[i].textContent);
		if (!match) continue;

		switch (match[1].trim().toLowerCase()) {
			case 'author(s)':
				addCreators(newItem, 'author', match[2].split(', '));
				break;
			case 'series editor(s)':
				addCreators(newItem, 'seriesEditor', match[2].split(', '));
				break;
			case 'editor(s)':
				addCreators(newItem, 'editor', match[2].split(', '));
				break;
			case 'published online':
				var date = ZU.strToDate(match[2]);
				date.part = null;
				newItem.date = ZU.formatDate(date);
				break;
			case 'print isbn':
			case 'online isbn':
				isbn.push(match[2]);
				break;
			case 'doi':
				newItem.DOI = ZU.cleanDOI(match[2]);
				break;
			case 'book series':
				newItem.series = match[2];
		}
	}

	newItem.ISBN = isbn.join(', ');
	newItem.rights = ZU.xpathText(doc, '//div[@id="titleMeta"]/p[@class="copyright"]');
	newItem.url = url;
	newItem.abstractNote = ZU.trimInternal(
		ZU.xpathText(doc, [
			'//div[@id="homepageContent"]',
			'/h6[normalize-space(text())="About The Product"]',
			'/following-sibling::p'
		].join(''), null, "\n") || "");
	newItem.accessDate = 'CURRENT_TIMESTAMP';

	newItem.complete();
}

function scrapeEM(doc, url) {
	var itemType = detectWeb(doc, url);

	// fetch print publication date
	var date = ZU.xpathText(doc, '//meta[@name="citation_date"]/@content');

	// remove duplicate meta tags
	var metas = ZU.xpath(doc,
		'//head/link[@media="screen,print"]/following-sibling::meta');
	for (var i = 0, n = metas.length; i < n; i++) {
		metas[i].parentNode.removeChild(metas[i]);
	}
	var translator = Zotero.loadTranslator('web');
	// use Embedded Metadata
	translator.setTranslator("951c027d-74ac-47d4-a107-9c3069ab7b48");
	translator.setDocument(doc);
	translator.setHandler('itemDone', function (obj, item) {
		if (itemType == 'bookSection') {
			// add authors if we didn't get them from embedded metadata
			if (!item.creators.length) {
				var authors = ZU.xpath(doc, '//ol[@id="authors"]/li/node()[1]');
				for (let i = 0, n = authors.length; i < n; i++) {
					item.creators.push(
						ZU.cleanAuthor(getAuthorName(authors[i].textContent), 'author', false));
				}
			}

			// editors
			var editors = ZU.xpath(doc, '//ol[@id="editors"]/li/node()[1]');
			for (let i = 0, n = editors.length; i < n; i++) {
				item.creators.push(
					ZU.cleanAuthor(getAuthorName(editors[i].textContent), 'editor', false));
			}

			item.rights = ZU.xpathText(doc, '//p[@id="copyright"]');

			// this is not great for summary, but will do for now
			item.abstractNote = ZU.xpathText(doc, '//div[@id="abstract"]/div[@class="para"]//p', null, "\n");
		}
		else {
			var keywords = ZU.xpathText(doc, '//meta[@name="citation_keywords"]/@content');
			if (keywords) {
				item.tags = keywords.split(', ');
			}
			item.rights = ZU.xpathText(doc, '//div[@id="titleMeta"]//p[@class="copyright"]');
			item.abstractNote = ZU.xpathText(doc, '//div[@id="abstract"]/div[@class="para"]', null, "\n");
		}

		// set correct print publication date
		if (date) item.date = date;
		
		// remove pdf attachments
		for (let i = 0, n = item.attachments.length; i < n; i++) {
			if (item.attachments[i].mimeType == 'application/pdf') {
				item.attachments.splice(i, 1);
				i--;
				n--;
			}
		}

		var pdfURL = attr(doc, 'meta[name="citation_pdf_url"]', "content");
		if (pdfURL) {
			pdfURL = pdfURL.replace('/pdf/', '/pdfdirect/');
			Z.debug("PDF URL: " + pdfURL);
			item.attachments.push({
				url: pdfURL,
				title: 'Full Text PDF',
				mimeType: 'application/pdf'
			});
		}
		item.complete();
	});

	translator.getTranslatorObject(function (em) {
		em.itemType = itemType;
		em.doWeb(doc, url);
	});
}

function scrapeBibTeX(doc, url) {
	var doi = ZU.xpathText(doc, '(//meta[@name="citation_doi"])[1]/@content')
		|| ZU.xpathText(doc, '(//input[@name="publicationDoi"])[1]/@value');
	if (!doi) {
		doi = ZU.xpathText(doc, '(//p[@id="doi"])[1]');
		if (doi) doi = doi.replace(/^\s*doi:\s*/i, '');
	}
	if (!doi) {
		scrapeEM(doc, url);
		return;
	}

	// Use the current domain on Wiley subdomains (e.g., ascpt.) so that the
	// download works even if third-party cookies are blocked. Otherwise, use
	// the main domain.
	let postUrl;
	if (doc.location.host.endsWith('.onlinelibrary.wiley.com')) {
		postUrl = 'https://onlinelibrary.wiley.com/action/downloadCitation';
	}
	else {
		postUrl = '/action/downloadCitation';
	}
	var body = 'direct=direct'
				+ '&doi=' + encodeURIComponent(doi)
				+ '&downloadFileName=pericles_14619563AxA'
				+ '&format=bibtex'
				+ '&include=abs'
				+ '&submit=Download';

	ZU.doPost(postUrl, body, function (text) {
		// Replace uncommon dash (hex e2 80 90)
		text = text.replace(/‐/g, '-').trim();
		// Z.debug(text);

		var re = /^\s*@[a-zA-Z]+[({]/;
		if (text.startsWith('<') || !re.test(text)) {
			throw new Error("Error retrieving BibTeX");
		}

		var translator = Zotero.loadTranslator('import');
		// use BibTeX translator
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setString(text);

		translator.setHandler('itemDone', function (obj, item) {
			// fix author case
			for (let i = 0, n = item.creators.length; i < n; i++) {
				item.creators[i].firstName = fixCase(item.creators[i].firstName);
				item.creators[i].lastName = fixCase(item.creators[i].lastName);
			}

			// delete nonsense author Null, Null
			if (item.creators.length && item.creators[item.creators.length - 1].lastName == "Null"
				&& item.creators[item.creators.length - 1].firstName == "Null"
			) {
				item.creators = item.creators.slice(0, -1);
			}

			// editors
			var editors = ZU.xpath(doc, '//ol[@id="editors"]/li/node()[1]');
			for (let i = 0, n = editors.length; i < n; i++) {
				item.creators.push(
					ZU.cleanAuthor(getAuthorName(editors[i].textContent), 'editor', false));
			}

			// title
			if (item.title && item.title.toUpperCase() == item.title) {
				item.title = ZU.capitalizeTitle(item.title, true);
			}

			if (!item.date) {
				item.date = ZU.xpathText(doc, '//meta[@name="citation_publication_date"]/@content');
			}
			// date in the cochraine library RIS is wrong
			if (ZU.xpathText(doc, '//meta[@name="citation_book_title"]/@content') == "The Cochrane Library") {
				item.date = ZU.xpathText(doc, '//meta[@name="citation_online_date"]/@content');
			}
			if (item.date) {
				item.date = ZU.strToISO(item.date);
			}

			if (!item.ISSN) {
				item.ISSN = ZU.xpathText(doc, '//meta[@name="citation_issn"]/@content');
			}

			// tags
			if (!item.tags.length) {
				var keywords = ZU.xpathText(doc,
					'//meta[@name="citation_keywords"][1]/@content');
				if (keywords) {
					item.tags = keywords.split(', ');
				}
			}

			// abstract should not start with "Abstract"
			if (item.abstractNote) {
				item.abstractNote = item.abstractNote.replace(/^(Abstract|Summary) /i, '');
			}

			// url in bibtex is invalid
			item.url
				= ZU.xpathText(doc,
					'//meta[@name="citation_summary_html_url"][1]/@content')
				|| ZU.xpathText(doc,
					'//meta[@name="citation_abstract_html_url"][1]/@content')
				|| ZU.xpathText(doc,
					'//meta[@name="citation_fulltext_html_url"][1]/@content')
				|| url;
			
			if (item.DOI) {
				item.DOI = ZU.cleanDOI(item.DOI);
			}
			
			if (item.itemID) {
				item.itemID = 'doi:' + ZU.cleanDOI(item.itemID);
			}

			// bookTitle
			if (!item.bookTitle) {
				item.bookTitle = item.publicationTitle
					|| ZU.xpathText(doc,
						'//meta[@name="citation_book_title"][1]/@content');
			}

			// language
			if (!item.language) {
				item.language = ZU.xpathText(doc,
					'//meta[@name="citation_language"][1]/@content');
			}

			// rights
			item.rights = ZU.xpathText(doc,
				'//p[@class="copyright" or @id="copyright"]');
			
			// try to detect invalid data in pages (e.g. "inside_front_cover")
			if (item.pages && /[a-zA-Z]_[a-zA-Z]/.test(item.pages)) {
				delete item.pages;
			}

			// attachments
			item.attachments = [{
				title: 'Snapshot',
				document: doc,
				mimeType: 'text/html'
			}];

			var pdfURL = attr(doc, 'meta[name="citation_pdf_url"]', "content");
			if (pdfURL) {
				pdfURL = pdfURL.replace('/pdf/', '/pdfdirect/');
				Z.debug("PDF URL: " + pdfURL);
				item.attachments.push({
					url: pdfURL,
					title: 'Full Text PDF',
					mimeType: 'application/pdf'
				});
			}
			item.complete();
		});

		translator.translate();
	});
}

function scrapeCochraneTrial(doc) {
	Z.debug("Scraping Cochrane External Sources");
	var item = new Zotero.Item('journalArticle');
	// Z.debug(ZU.xpathText(doc, '//meta/@content'))
	item.title = ZU.xpathText(doc, '//meta[@name="Article-title"]/@content');
	item.publicationTitle = ZU.xpathText(doc, '//meta[@name="source"]/@content');
	item.abstractNote = ZU.xpathText(doc, '//meta[@name="abstract"]/@content');
	item.date = ZU.xpathText(doc, '//meta[@name="simpleYear"]/@content');
	item.volume = ZU.xpathText(doc, '//meta[@name="volume"]/@content');
	item.pages = ZU.xpathText(doc, '//meta[@name="pages"]/@content');
	item.issue = ZU.xpathText(doc, '//meta[@name="issue"]/@content');
	item.rights = ZU.xpathText(doc, '//meta[@name="Copyright"]/@content');
	var tags = ZU.xpathText(doc, '//meta[@name="cochraneGroupCode"]/@content');
	if (tags) tags = tags.split(/\s*;\s*/);
	for (var i in tags) {
		item.tags.push(tags[i]);
	}
	item.attachments.push({ document: doc, title: "Cochrane Snapshot", mimType: "text/html" });
	var authors = ZU.xpathText(doc, '//meta[@name="orderedAuthors"]/@content');
	if (!authors) authors = ZU.xpathText(doc, '//meta[@name="Author"]/@content');

	authors = authors.split(/\s*,\s*/);

	for (let i = 0; i < authors.length; i++) {
		// authors are in the forms Smith AS
		var authormatch = authors[i].match(/(.+?)\s+([A-Z]+(\s[A-Z])?)\s*$/);
		if (authormatch) {
			item.creators.push({
				lastName: authormatch[1],
				firstName: authormatch[2],
				creatorType: "author"
			});
		}
		else {
			item.creators.push({
				lastName: authors[i],
				fieldMode: 1,
				creatorType: "author"
			});
		}
	}
	item.complete();
}

function scrape(doc, url) {
	var itemType = detectWeb(doc, url);

	if (itemType == 'book') {
		scrapeBook(doc, url);
	}
	else if (/\/o\/cochrane\/(clcentral|cldare|clcmr|clhta|cleed|clabout)/.test(url)) {
		scrapeCochraneTrial(doc);
	}
	else {
		scrapeBibTeX(doc, url);
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.table-of-content a.issue-item__title, .item__body h2 a');
	for (var i = 0; i < rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function detectWeb(doc, url) {
	// monitor for site changes on Cochrane
	if (doc.getElementsByClassName('cochraneSearchForm').length && doc.getElementById('searchResultOuter')) {
		Zotero.monitorDOMChanges(doc.getElementById('searchResultOuter'));
	}

	if (url.includes('/toc')
		|| url.includes('/results')
		|| url.includes('/doSearch')
		|| url.includes('/mainSearch?')
	) {
		if (getSearchResults(doc, true)) return 'multiple';
	}
	else if (url.includes('/book/')) {
		// if the book has more than one chapter, scrape chapters
		if (getSearchResults(doc, true)) return 'multiple';
		// otherwise, import book
		return 'book'; // does this exist?
	}
	else if (ZU.xpath(doc, '//meta[@name="citation_book_title"]').length) {
		return 'bookSection';
	}
	else {
		return 'journalArticle';
	}
	return false;
}


function doWeb(doc, url) {
	var type = detectWeb(doc, url);
	if (type == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return;
			}
			var articles = [];
			for (var i in items) {
				// for Cochrane trials - get the frame with the actual data
				if (i.includes("frame.html")) i = i.replace(/frame\.html$/, "sect0.html");
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	}
	// Single article
	// /pdf/, /epdf/, or /pdfdirect/
	else if (/\/e?pdf(direct)?\//.test(url)) {
		url = url.replace(/\/e?pdf(direct)?\//, '/');
		Zotero.debug("Redirecting to abstract page: " + url);
		ZU.processDocuments(url, function (doc, url) {
			scrape(doc, url);
		});
	}
	else {
		scrape(doc, url);
	}
}