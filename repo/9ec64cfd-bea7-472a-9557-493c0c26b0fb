function detectImport() {
	var line;
	var i = 0;
	while ((line = Zotero.read()) !== false) {
		line = line.replace(/^\s+/, "");
		if (line != "") {
			// Actual MEDLINE format starts with PMID
			// ERIC .nbib starts with "OWN -  ERIC"
			if (line.substr(0, 6).match(/^PMID( {1, 2})?- /) || line.includes("OWN - ERIC")) {
				return true;
			}
			else if (i++ > 3) {
				return false;
			}
		}
	}
	return false;
}

var fieldMap = {
	TI: "title",
	VI: "volume",
	IP: "issue",
	PL: "place",
	PB: "publisher", // not in the specs, but is used
	BTI: "bookTitle",
	JT: "publicationTitle",
	TA: "journalAbbreviation",
	PG: "pages",
	CI: "rights",
	ISBN: "ISBN",
	ISSN: "ISSN",
	LA: "language",
	EN: "edition",
	AB: "abstractNote"
};


// Only the most basic types. Most official MEDLINE types make little sense as item types
var inputTypeMap = {
	Book: "book",
	"Book Chapter": "bookSection", // can't find in specs, but is used.
	"Journal Article": "journalArticle",
	"Newspaper Article": "newspaperArticle",
	"Video-Audio Media": "videoRecording",
	"Technical Report": "report",
	"Legal Case": "case",
	Legislation: "statute"
};

function processTag(item, tag, value) {
	value = Zotero.Utilities.trim(value);
	var type;
	if (fieldMap[tag]) {
		item[fieldMap[tag]] = value;
	}
	else if (tag == "PT") {
		if (inputTypeMap[value]) { // first check inputTypeMap
			item.itemType = inputTypeMap[value];
		}
	}
	else if (tag == "FAU" || tag == "FED") {
		if (tag == "FAU") {
			type = "author";
		}
		else if (tag == "FED") {
			type = "editor";
		}
		item.creators.push(Zotero.Utilities.cleanAuthor(value, type, value.includes(",")));
	}
	else if (tag == "AU" || tag == "ED") { // save normal author tags as fallback
		if (tag == "AU") {
			type = "author";
		}
		else if (tag == "ED") {
			type = "editor";
		}
		value = value.replace(/\s([A-Z]+)$/, ", $1");
		item.creatorsBackup.push(Zotero.Utilities.cleanAuthor(value, type, value.includes(",")));
	}
	else if (tag == "PMID") {
		item.extra = "PMID: " + value;
	}
	else if (tag == "PMC") {
		item.extra += " \nPMCID: " + value;
	}
	else if (tag == "IS") {
		if (ZU.cleanISSN(value)) {
			if (!item.ISSN) {
				item.ISSN = ZU.cleanISSN(value);
			}
			else {
				item.ISSN += " " + ZU.cleanISSN(value);
			}
		}
		else if (ZU.cleanISBN(value)) {
			if (!item.ISBN) {
				item.ISBN = ZU.cleanISBN(value);
			}
			else {
				item.ISBN += " " + ZU.cleanISBN(value);
			}
		}
	}
	else if (tag == "AID") {
		if (value.includes("[doi]")) item.DOI = value.replace(/\s*\[doi\]/, "");
	}
	else if (tag == "DP") {
		item.date = value;
	}
	// Save link to attached link
	else if (tag == "LID") {
		// Pubmed adds all sorts of different IDs in here, so make sure these are URLs
		if (value.startsWith("http")) {
			item.attachments.push({ url: value, title: "Catalog Link", snapshot: false });
		// If the value is tagged as a PII, we can use this as a page number if we have not previously managed to extract one
		} else if (value.includes("[pii]")) item.pagesBackup = value.replace(/\s*\[pii\]/, "");
	}
	else if (tag == "MH" || tag == "OT") {
		item.tags.push(value);
	}
}

function doImport() {
	var line = true;
	var tag = false;
	var data = false;
	do { // first valid line is type
		Zotero.debug("ignoring " + line);
		line = Zotero.read();
	} while (line !== false && line.search(/^[A-Z0-9]+\s*-/) == -1);

	var item = new Zotero.Item();
	item.creatorsBackup = [];
	tag = line.match(/^[A-Z0-9]+/)[0];
	data = line.substr(line.indexOf("-") + 1);
	while ((line = Zotero.read()) !== false) { // until EOF
		if (!line) {
			if (tag) {
				processTag(item, tag, data);
				// unset info
				tag = data = false;
				// new item
				finalizeItem(item);
				item = new Zotero.Item();
				item.creatorsBackup = [];
			}
		}
		else if (line.search(/^[A-Z0-9]+\s*-/) != -1) {
			// if this line is a tag, take a look at the previous line to map
			// its tag
			if (tag) {
				processTag(item, tag, data);
			}

			// then fetch the tag and data from this line
			tag = line.match(/^[A-Z0-9]+/)[0];
			data = line.substr(line.indexOf("-") + 1).trim();
		}
		else if (tag) {
			// otherwise, assume this is data from the previous line continued
			data += " " + line.replace(/^\s+/, "");
		}
	}

	if (tag) { // save any unprocessed tags
		processTag(item, tag, data);
		// and finalize with some post-processing
		finalizeItem(item);
	}
}

function finalizeItem(item) {
	// if we didn't get full authors (included post 2002, sub in the basic authors)
	if (item.creators.length == 0 && item.creatorsBackup.length > 0) {
		item.creators = item.creatorsBackup;
	}
	delete item.creatorsBackup;
	if (item.pages) {
		// where page ranges are given in an abbreviated format, convert to full
		// taken verbatim from NCBI Pubmed translator
		var pageRangeRE = /(\d+)-(\d+)/g;
		pageRangeRE.lastIndex = 0;
		var range;

		while (range = pageRangeRE.exec(item.pages)) { // eslint-disable-line no-cond-assign
			var pageRangeStart = range[1];
			var pageRangeEnd = range[2];
			var diff = pageRangeStart.length - pageRangeEnd.length;
			if (diff > 0) {
				pageRangeEnd = pageRangeStart.substring(0, diff) + pageRangeEnd;
				var newRange = pageRangeStart + "-" + pageRangeEnd;
				var fullPageRange = item.pages.substring(0, range.index) // everything before current range
					+ newRange	// insert the new range
					+ item.pages.substring(range.index + range[0].length);	// everything after the old range
				// adjust RE index
				pageRangeRE.lastIndex += newRange.length - range[0].length;
			}
		}
		if (fullPageRange) {
			item.pages = fullPageRange;
		}
	// If there is not an explicitly defined page range, try and use the value extracted from the LID field
	} else if (item.pagesBackup) item.pages = item.pagesBackup;
	delete item.pagesBackup;
	// check for and remove duplicate ISSNs
	if (item.ISSN && item.ISSN.includes(" ")) {
		let ISSN = item.ISSN.split(/\s/);
		// convert to Set and back
		ISSN = [...new Set(ISSN)];
		item.ISSN = ISSN.join(" ");
	}
	
	// journal article is the fallback item type
	if (!item.itemType) item.itemType = inputTypeMap["Journal Article"];
	// titles for books are mapped to bookTitle
	if (item.itemType == "book") item.title = item.bookTitle;
	item.complete();
}