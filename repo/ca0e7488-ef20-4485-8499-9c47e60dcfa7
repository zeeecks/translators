function getResults(doc) {
	/** Both search result and book ToC pages use javascript to load content, so
	 * this actually doesn't work as intended. Search results will work, but
	 * will also trigger on empty result set. detectWeb for book ToC does not
	 * work, but doWeb does,
	 */
	return ZU.xpath(doc, '//div[@id="all" or @id="chapterList"]//div[contains(@class,"title_text")]//a[not(contains(@href,"/database/"))]');
}

function detectWeb(doc, url) {
	if (/\/results[?/]/i.test(url) || url.includes('/ebook/')
		&& getResults(doc).length) {
		return 'multiple';
	}
	// apparently URLs sometimes have upper case as in /Content/ArticleLanding/
	if (url.search(/\/content\/articlelanding\//i) != -1 && ZU.xpathText(doc, '//meta[@name="citation_title"]/@content')) {
		return 'journalArticle';
	}

	if (url.search(/\/content\/chapter\//i) != -1) {
		return 'bookSection';
	}

	return false;
}

function scrape(doc, url, type) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	translator.setHandler('itemDone', function (obj, item) {
	//	item.itemType = type;


		// keywords is frequently an empty string
		if (item.tags.length == 1 && !item.tags[0]) {
			item.tags = [];
		}

		if (item.date) {
			item.date = ZU.strToISO(item.date);
		}
		
		for (let link of doc.querySelectorAll('.list__item-link')) {
			if (link.textContent.includes('Supplementary information')) {
				item.attachments.push({
					url: link.href,
					title: 'Supplementary Information PDF',
					mimeType: 'application/pdf'
				});
				break;
			}
		}

		item.complete();
	});
	translator.getTranslatorObject(function (trans) {
		trans.itemType = type;
		trans.doWeb(doc, url);
	});
}

function doWeb(doc, url) {
	var type = detectWeb(doc, url);
	if (type == 'multiple') {
		var results = getResults(doc);
		var items = {};
		for (var i = 0, n = results.length; i < n; i++) {
			items[results[i].href] = ZU.trimInternal(
				ZU.xpathText(results[i], './node()', null, ' '));
		}

		Zotero.selectItems(items, function (selectedItems) {
			if (!selectedItems) return;

			var urls = [];
			for (var i in selectedItems) {
				urls.push(i);
			}
			ZU.processDocuments(urls, doWeb);
		});
	}
	else {
		scrape(doc, url, type);
	}
}