/*
not tests working, should work e.g. here:
http://fsu.catalog.fcla.edu/permalink.jsp?23FS000905416
http://fgcu.catalog.fcla.edu/permalink.jsp?25GC000505950
http://ucf.catalog.fcla.edu/permalink.jsp?29CF000392490
http://fau.catalog.fcla.edu/permalink.jsp?28FA000629423
*/




function detectWeb(doc, url) {
	var namespace = doc.documentElement.namespaceURI;
	var nsResolver = namespace ? function(prefix) {
		if (prefix == 'x') return namespace; else return null;
	} : null;
	//Try to avoid false positives - test for presence of MARC for individual items.
	var xpath = '//td/a[contains(@href, "&V=M")]|//td/a[contains(@href, "&V=U")]'
	if (doc.evaluate(xpath, doc, nsResolver, XPathResult.ANY_TYPE, null).iterateNext()){
		return "book";
	}
	//for multiples be conservative - make sure these are items that likely have MARC
	else if (url.match(/fl=bo|Book/) && !url.match(/\&DLS=/)) return "multiple";

}

function scrape(marc, newDoc) {
	var namespace = newDoc.documentElement.namespaceURI;
	var nsResolver = namespace ? function(prefix) {
	  if (prefix == 'x') return namespace; else return null;
	} : null;

	var newItem = new Zotero.Item();
	var record = new marc.record();
	//The width = 95% seems consistent, though there really should be a better way to get to this
	var xpath = '//table[@width="95%"]/tbody/tr[@class="trGenContent"]';
	var elmts = newDoc.evaluate(xpath, newDoc, nsResolver, XPathResult.ANY_TYPE, null);
	var elmt;
	while (elmt = elmts.iterateNext()) {

	  var tag =	ZU.xpathText(elmt, './td[1]');
	  var ind =   ZU.xpathText(elmt, './td[2]');
	  var tagValue =   ZU.xpathText(elmt, './td[3]');
	//Z.debug("tag: "+tag+" ind: "+ind+" tagValue: "+tagValue)
	if (tag == "LDR"){
	  record.leader = tagValue;
	}
	else if (tag != "FMT"){
	  tagValue = tagValue.replace(/\|/g, marc.subfieldDelimiter);
		record.addField(tag, ind, tagValue);
	}

	}
	//Z.debug(record)
		record.translate(newItem);
	// put stuff from notes into extra
		for (var i in newItem.notes){
		if (extra){
		  extra = extra + "\n" +newItem.notes[i].note;
		}
		else {
		  var	extra= newItem.notes[i].note;
		}
		}
  newItem.extra = extra;
		newItem.notes = [];
		//editors get mapped as contributors - but so do many others who should be
		// --> for books that don't have an author, turn contributors into editors.
  if (newItem.itemType=="book"){
	var hasAuthor = false;
	for (var i in newItem.creators) {
	  if (newItem.creators[i].creatorType=="author") {
	hasAuthor = true;
	  }
	}
	if (!hasAuthor) {
	  for (var i in newItem.creators) {
	if (newItem.creators[i].creatorType=="contributor") {
	  newItem.creators[i].creatorType="editor";
	}
	  }
	}
  }

  newItem.complete();

}

function pageByPage(marc, urls) {
	Zotero.Utilities.processDocuments(urls, function(newDoc) {
		scrape(marc, newDoc);
	}, function() { Zotero.done() });
}

function doWeb(doc, url) {
	var uri = doc.location.href;
	var newUri;
	// load translator for MARC
	var translator = Zotero.loadTranslator("import");
	translator.setTranslator("a6ee60df-1ddc-4aae-bb25-45e0537be973");
	translator.getTranslatorObject(function(marc) {
		var namespace = doc.documentElement.namespaceURI;
		var nsResolver = namespace ? function(prefix) {
			if (prefix == 'x') return namespace; else return null;
		} : null;

		if (detectWeb(doc, url) == "book") {
	//we prefer local MARC, but some items have only unimarc
		  var localmarc = '//td/a[contains(@href, "&V=M")]';
		  var unimarc = '//td/a[contains(@href, "&V=U")]';
			if (doc.evaluate(localmarc, doc, nsResolver, XPathResult.ANY_TYPE, null).iterateNext()){
			newUri = uri.replace(/\&V=D\&/, "&V=M&");
			}
			else if (doc.evaluate(unimarc, doc, nsResolver, XPathResult.ANY_TYPE, null).iterateNext()){
				newUri = uri.replace(/\&V=D\&/, "&V=U&");
			}
		  Z.debug(newUri);
			pageByPage(marc, [newUri]);
		}
else {	// Search results page
			var urls = new Array();
			var availableItems = new Array();
			var firstURL = false;

			var tableRows = doc.evaluate('//td[@id="dimRecords3"]/table//table[@width="100%"]', doc, nsResolver, XPathResult.ANY_TYPE, null);
			// Go through table rows
			var i = 0;
			while (tableRow = tableRows.iterateNext()) {
				// get link
				var links = doc.evaluate('.//div/a[contains(@id, "Title")]', tableRow, nsResolver, XPathResult.ANY_TYPE, null);
				var link = links.iterateNext();
				if (!link) {
					var links = doc.evaluate('.//div/a[contains(@id, "Title")]/@href', tableRow, nsResolver, XPathResult.ANY_TYPE, null);
					link = links.iterateNext();
				}

				if (link) {
					if (availableItems[link.href]) {
						continue;
					}

					// Go through links
					while (link) {
						if (link.textContent.match(/\w+/)) availableItems[link.href] = link.textContent;
						link = links.iterateNext();
					}
					i++;
				}
			};

			 Zotero.selectItems(availableItems, function (items) {
			if (!items) {
				return true;
			}

			var newUrls = new Array();
			for (var itemURL in items) {
				newUrls.push(itemURL.replace(/\&V=D\&/, "&V=M&"));
			}
			pageByPage(marc, newUrls);
			})
		}
	});

	Zotero.wait();
}