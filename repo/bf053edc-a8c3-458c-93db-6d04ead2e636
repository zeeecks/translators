// the eli resource types are described at:
// https://op.europa.eu/en/web/eu-vocabularies/at-dataset/-/resource/dataset/resource-type
// all types not mapped below are saved as bills
const typeMapping = {
	DIR: "bill", // directive
	REG: "statute", // regulation
	DEC: "statute", // decision
	RECO: "report", // recommendation
	OPI: "report", // opinion
	CONS: "statute", // consolidated text
	TREATY: "statute", // treaty
};


function detectWeb(doc, _url) {
	var docSector = attr(doc, 'meta[name="WT.z_docSector"]', 'content');
	var eliTypeURI = attr(doc, 'meta[property="eli:type_document"]', 'resource');
	if (eliTypeURI) {
		var eliType = eliTypeURI.split("/").pop();
		var eliCategory = eliType.split("_")[0];
		var type = typeMapping[eliCategory];
		if (type) {
			return type;
		}
		else {
			Z.debug("Unknown eliType: " + eliType);
			return "bill";
		}
	}
	else if (docSector == "6") {
		return "case";
	}
	else if (docSector && docSector !== "other") {
		return "bill";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll("a.title");
	for (let i = 0; i < rows.length; i++) {
		let href = rows[i].href;
		let title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


// we need to remember the language in search page to use the same for
// individual entry page
var autoLanguage;


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		var m = url.match(/\blocale=([a-z][a-z])/);
		if (m) {
			autoLanguage = m[1];
		}
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}


// this maps language codes from ISO 639-1 to 639-3 and adds court names
// see https://op.europa.eu/en/web/eu-vocabularies/at-dataset/-/resource/dataset/court-type
function LMObj(iso, ECJ, GC, CST) {
	this.iso = iso;
	this.ECJ = ECJ;
	this.GC = GC;
	this.CST = CST;
}

const languageMapping = {
	BG: new LMObj("BUL", "Съд", "Общ съд", "Съд на публичната служба"),
	CS: new LMObj("CES", "Soudní dvůr", "Tribunál", "Soud pro veřejnou službu"),
	DA: new LMObj("DAN", "EU-Domstolen", "EU-Retten", "EU-Personalretten"),
	DE: new LMObj("DEU", "EuGH", "Gerichtshof", "Gericht für den öffentlichen Dienst"),
	EL: new LMObj("ELL", "Δικαστήριο", "Γενικό Δικαστήριο", "Δικαστήριο Δημόσιας Διοίκησης"),
	EN: new LMObj("ENG", "ECJ", "GC", "CST"),
	ES: new LMObj("SPA", "TJUE", "Tribunal General", "Tribunal de la Función Pública"),
	ET: new LMObj("EST", "Euroopa Kohus", "Üldkohus", "Avaliku Teenistuse Kohus"),
	FI: new LMObj("FIN", "Unionin tuomioistuin", "Unionin yleinen tuomioistuin", "Virkamiestuomioistuin"),
	FR: new LMObj("FRA", "Cour de justice", "Tribunal", "Tribunal de la fonction publique"),
	GA: new LMObj("GLE", "An Chúirt Bhreithiúnais", "Cúirt Ghinearálta", "An Binse um Sheirbhís Shibhialta"),
	HR: new LMObj("HRV", "Europski sud", "Opći sud", "Službenički sud"),
	HU: new LMObj("HUN", "A Bíróság", "Törvényszék", "Közszolgálati Törvényszék"),
	IT: new LMObj("ITA", "Corte di giustizia", "Tribunale", "Tribunale della funzione pubblica"),
	LV: new LMObj("LAV", "Tiesa", "Vispārējā tiesa", "Civildienesta tiesa"),
	LT: new LMObj("LIT", "Teisingumo Teismas", "Bendrasis Teismas", "Tarnautojų teismas"),
	MT: new LMObj("MLT", "Il-Qorti tal-Ġustizzja", "Il-Qorti Ġenerali", "Il-Tribunal għas-Servizz Pubbliku"),
	NL: new LMObj("NLD", "HvJ EU", "Gerecht EU", "GvA EU"),
	PL: new LMObj("POL", "Trybunał Sprawiedliwości", "Sąd", "Sąd do spraw Służby Publicznej"),
	PT: new LMObj("POR", "Tribunal Europeu de Justiça", "Tribunal Geral", "Tribunal da Função Pública"),
	RO: new LMObj("RON", "Curtea Europeană de Justiție", "Tribunalul", "Tribunalul Funcţiei Publice"),
	SK: new LMObj("SLK", "Súdny dvor", "Všeobecný súd", "Súd pre verejnú službu"),
	SL: new LMObj("SLV", "Sodišče", "Splošno sodišče", "Sodišče za uslužbence"),
	SV: new LMObj("SWE", "Domstolen", "Tribunalen", "Personaldomstolen")
};

function scrape(doc, url) {
	// declare meta variables present for all sectors
	// var docSector = attr(doc, 'meta[name="WT.z_docSector"]', 'content');
	var docType = attr(doc, 'meta[name="WT.z_docType"]', 'content');
	var celex = attr(doc, 'meta[name="WT.z_docID"]', 'content');
	
	var eliTypeUri = (attr(doc, 'meta[property="eli:type_document"]', "resource"));
	
	var type = detectWeb(doc, url);
	var item = new Zotero.Item(type);
	// determine the language in which we are currently viewing the document
	var languageUrl = url.split("/")[4].toUpperCase();
	if (languageUrl == "AUTO") {
		languageUrl = autoLanguage || "EN";
	}
	var language = languageMapping[languageUrl].iso || "eng";
	// Cases only return language; discard everything else
	item.language = languageUrl.toLowerCase();
	

	if (eliTypeUri) {
		// type: everything with ELI (see var typeMapping: bill, statute, report)
		item.title = attr(doc, 'meta[property="eli:title"][lang=' + languageUrl.toLowerCase() + "]", "content");
		var uri = attr(doc, "#format_language_table_digital_sign_act_" + languageUrl.toUpperCase(), "href");
		if (uri) {
			var uriParts = uri.split("/").pop().replace("?uri=", "")
.split(":");
			// e.g. uriParts =  ["OJ", "L", "1995", "281", "TOC"]
			// e.g. uriParts = ["DD", "03", "061", "TOC", "FI"]
			if (uriParts.length >= 4) {
				if (/\d+/.test(uriParts[1])) {
					item.code = uriParts[0];
					item.codeNumber = uriParts[1] + ", " + uriParts[2];
				}
				else {
					item.code = uriParts[0] + " " + uriParts[1];
					item.codeNumber = uriParts[3];
				}
			}
			if (type == "bill") {
				item.codeVolume = item.codeNumber;
				item.codeNumber = null;
			}
		}

		item.date = attr(doc, 'meta[property="eli:date_document"]', "content");
		if (!item.date) {
			item.date = attr(doc, 'meta[property="eli:date_publication"]', "content");
		}
		
		var passedBy = doc.querySelectorAll('meta[property="eli:passed_by"]');
		var passedByArray = [];
		for (let i = 0; i < passedBy.length; i++) {
			passedByArray.push(passedBy[i].getAttribute("resource").split("/").pop());
		}
		item.legislativeBody = passedByArray.join(", ");
		
		item.url = attr(doc, 'meta[typeOf="eli:LegalResource"]', "about") + "/" + language.toLowerCase();
	}
		
	else if (item.itemType == "case") {
		// type: case
		// pretty hacky stuff, as there's little metadata available
		var docCourt = docType.substr(0, 1);
		if (docCourt == "C") {
			item.court = languageMapping[languageUrl].ECJ || languageMapping.EN.ECJ;
		}
		else if (docCourt == "T") {
			item.court = languageMapping[languageUrl].GC || languageMapping.EN.GC;
		}
		else if (docCourt == "F") {
			item.court = languageMapping[languageUrl].CST || languageMapping.EN.CST;
		}
		item.url = url;

		if (docType.substr(1) == "J") { // Judgments
			var titleParts = attr(doc, 'meta[name="WT.z_docTitle"]', "content").replace(/\./g, "").split("#");
			if (titleParts.length > 1) {
				item.caseName = titleParts[1];
				item.abstractNote = titleParts[titleParts.length - 2];
				item.docketNumber = titleParts.pop();
				item.dateDecided = titleParts[0].substr(titleParts[0].search(/[0-9]/g));
			}
		}
		else { // Orders, summaries, etc.
			item.caseName = attr(doc, 'meta[name="WT.z_docTitle"]', "content").replace(/#/g, " ");
			item.dateDecided = celex.substr(1, 4);
		}
	}
	else {
		// type: bill
		item.title = attr(doc, 'meta[name="WT.z_docTitle"]', "content");
		item.date = celex.substr(1, 4);
		item.url = url;
		if (docType == "C") {
			var celexCParts = celex.substr(1).split("/");
			item.code = "OJ C";
			item.codeVolume = celexCParts[1];
			item.codePages = celexCParts[2];
		}
	}
	// attachments
	// type: all
	var pdfurl = "https://eur-lex.europa.eu/legal-content/" + languageUrl + "/TXT/PDF/?uri=CELEX:" + celex;
	var htmlurl = "https://eur-lex.europa.eu/legal-content/" + languageUrl + "/TXT/HTML/?uri=CELEX:" + celex;
	item.attachments = [{ url: pdfurl, title: "EUR-Lex PDF (" + languageUrl + ")", mimeType: "application/pdf" }];
	item.attachments.push({ url: htmlurl, title: "EUR-Lex HTML (" + languageUrl + ")", mimeType: "text/html", snapshot: true });
	
	item.complete();
}