function detectWeb(doc, url) {
	if (url.includes('/article/') && doc.querySelector('.page-article')) {
		return "report";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a.article-title[href*="/article/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	let bareURL = url.replace(/[?#].*/, '');
	let risURL = bareURL
		.replace('researchsquare.com/article', 'researchsquare.com/api/article')
		+ '.ris';
	let pdfURL = bareURL + '.pdf';
	
	ZU.doGet(risURL, function (text) {
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
		translator.setString(text);
		translator.setHandler("itemDone", function (obj, item) {
			if (!item.title) {
				// ...no title in the RIS sometimes? odd
				item.title = attr(doc, 'meta[property="og:title"]', 'content');
			}
			
			item.itemType = 'report';
			if (!item.extra || !/^type: article/im.test(item.extra)) {
				item.extra = (item.extra || '') + '\nType: article';
			}
			
			// research square assigns preprints publication titles based on
			// where they've been submitted to, which isn't really right from
			// zotero's point of view
			delete item.publicationTitle;
			delete item.journalAbbreviation;
			
			item.attachments.push({
				url: pdfURL,
				title: "Full Text PDF",
				mimeType: "application/pdf"
			});
			
			for (let creator of item.creators) {
				if (creator.fieldMode == 1) {
					delete creator.fieldMode;
					Object.assign(creator,
						ZU.cleanAuthor(creator.lastName, creator.creatorType));
				}
			}
			
			item.url = bareURL;
			
			item.complete();
		});
		translator.translate();
	});
}