function detectWeb(doc, _url) {
	if (doc.querySelector('meta[property="og:video"]')) {
		return "tvBroadcast";
	}
	else if (doc.querySelector('meta[property="og:audio"]')) {
		return "radioBroadcast";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h2 > a[href*="/catalog/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		if (item.abstractNote) {
			item.abstractNote = item.abstractNote.replace(/\n+/g, ' ');
		}
		
		for (let entry of doc.querySelectorAll('.contributors dl')) {
			for (let b of entry.querySelectorAll('b')) {
				let label = b.textContent;
				let name = b.nextSibling.textContent.trim().replace(/^Dr\b/, '');
				let type = 'contributor';
				let institution = false;
				
				if (label.includes('Reporter') || label.includes('Host')) {
					type = 'castMember';
				}
				else if (label.includes('Director')) {
					type = 'director';
				}
				else if (label.includes('Writer')) {
					type = 'scriptwriter';
				}
				else if (label.includes('Produc')) {
					type = 'producer';
				}
				else if (label.includes('Copyright Holder')) {
					continue;
				}
				
				if (label.includes('Organization')) {
					institution = true;
				}
				
				if (institution) {
					item.creators.push({
						lastName: name,
						creatorType: type,
						fieldMode: 1
					});
				}
				else {
					item.creators.push(ZU.cleanAuthor(name, type, name.includes(', ')));
				}
			}
		}
		
		for (let dt of doc.querySelectorAll('dt')) {
			let key = ZU.trimInternal(dt.textContent);
			
			let dd = dt.nextElementSibling;
			while (dd && dd.tagName == 'DD') {
				let value = ZU.trimInternal(dd.textContent);
	
				switch (key) {
					case 'Contributing Organization':
					case 'Producing Organization': {
						if (item.network) break;
						
						if (!item.creators.length) {
							item.creators.push({
								lastName: value.replace(/\s*\(.*\)/, ''),
								creatorType: 'contributor',
								fieldMode: 1
							});
						}
						
						let [, broadcaster, place] = value.match(/^([^(]*)(?:\((.+)\))?/);
						
						if (/([WK][A-Z]{2,3}|PBS|NPR|Broadcast|Network)/.test(broadcaster)) {
							item.network = broadcaster;
						}
						
						if (place) item.place = place;
						
						break;
					}
					case 'Date':
					case 'Created':
						if (!item.date) {
							item.date = ZU.strToISO(value);
						}
						break;
					case 'Genres':
					case 'Topics':
						item.tags.push({ tag: value });
						break;
					case 'Duration':
						item.runningTime = value;
						break;
					case 'Series':
						item.programTitle = value;
						break;
					case 'Episode':
						item.title = value;
						break;
					case 'Episode Number':
						item.episodeNumber = value;
						break;
					case 'Rights':
						item.rights = value;
						break;
				}
				
				dd = dd.nextElementSibling;
			}
		}
		
		// from the suggested citation on item pages
		item.archive = 'American Archive of Public Broadcasting (GBH and the Library of Congress)';
		
		// would like to grab the video file and attach it here, but they do a
		// referer check that precludes that.
		
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}