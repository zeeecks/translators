function detectWeb(doc, url) {
	//supports table of contents, seach results and single document pages
	if (url.indexOf("web/search?") > 1 || url.indexOf("index.html") > -1) {
		return "multiple";
	} else if (url.indexOf("/csdl/mags/") > 1) {
		return "magazineArticle";
	} else if (url.search(/\/portal\/web\/computingnow\/.*content/) > 1) {
		if (ZU.xpath(doc, '//li/a[contains(text(), "BibTex") and contains(@href, ".bib")]|//div[@id="bibText-content"]').length > 0) return "magazineArticle";
	} else if (url.indexOf("/csdl/trans/") > 1) {
		return "journalArticle";
	} else if (url.indexOf("/csdl/proceedings/") > 1) {
		return "conferencePaper";
	} else if (url.indexOf("/csdl/abs/proceedings/") > 1) {
		return "multiple";
	} else if (url.indexOf("/csdl/letters/") > 1) {
		return "journalArticle";
	} else if (url.indexOf("/portal/web/csdl/doi/") > 1) {
		var refWork = ZU.xpathText(doc, '//div[@id="refWorksText-content"]');
		if (refWork) refWork = refWork.substr(0, 9);
		else return false;
		if (refWork.indexOf("JOUR") > 1) return "journalArticle";
		else if (refWork.indexOf("MGZN") > 1) return "magazineArticle";
		else if (refWork.indexOf("CONF") > 1) return "conferencePaper";
		else return false;
	} else {
		return false;
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	//index pages
	var rows = ZU.xpath(doc, '//span[@class="tocLineItemTitle"]/a[not(contains(@href, ".pdf"))]');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	//search result pages
	rows = ZU.xpath(doc, '//div[@class="row"]');
	for (var i=0; i<rows.length; i++) {
		var href = ZU.xpathText(rows[i], './/a[contains(text(), "Abstract")]/@href');
		var title = ZU.xpathText(rows[i], './/span[contains(@class, "h4")]');
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var bibtexlink = ZU.xpathText(doc, '//a[contains(text(), "BibTex") and contains(@href, "bibtex")]/@href');
	ZU.doGet(bibtexlink, function (text) {
		text = text.replace(/<br\/>/g,"");
		var translator = Zotero.loadTranslator("import");// BibTeX translator
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setHandler("itemDone", function (obj, item) {
			if (item.DOI) item.DOI = item.DOI.replace(/^.*?10\./, "10.");
			finalize(doc, url, item);
			item.complete();
		});
		translator.setString(text);
		translator.translate();
	});
}


function finalize(doc, url, item) {
	item.itemType = detectWeb(doc, url);
	var title = ZU.xpathText(doc, '//div[@class="abstractTitle"]');
	
	//Sometimes the BibTeX does not contain the authors names and
	//then we have to try to extract this info from the website.
	if (item.creators.length == 0) {
		var authors = ZU.xpath(doc, '//div[@class="abstractTitle"]/following-sibling::div[@class="abstractAuthor"]/a');
		for (var i=0; i<authors.length; i++) {
			item.creators.push(ZU.cleanAuthor(authors[i].textContent, "author"));
		}
	}
	//Authors names in BibTeX are nonstandard and therefore
	//splitting into first and last name normally fails.
	//Moreover, ignore "undefined" authors
	var creators = [];
	for (var i=0; i<item.creators.length; i++) {
		if (item.creators[i].firstName=="") {
			if (item.creators[i].lastName!=="undefined") {
				creators.push(ZU.cleanAuthor(item.creators[i].lastName, item.creators[i].creatorType));
			}
			//delete the else cases
		} else {
			creators.push(item.creators[i]);
		}
	}
	item.creators = creators;
	//Adding abstract
	item.abstractNote = ZU.xpathText(doc, '//div[text()="ABSTRACT"]/following-sibling::div[1]');
	//Adding tags
	var keywordText = ZU.xpathText(doc, '//div[text()="INDEX TERMS"]/following-sibling::div[1]');
	if (keywordText) {
		keywordText = keywordText.replace(/,\s*$/, '');
		if (keywordText.indexOf(";")>-1) {
			item.tags = keywordText.split("; ");
		} else {
			item.tags = keywordText.split(", ");
		}
	}
	//Fixing undefined issue number from wrong BibTeX value "number = {undefined}"
	if (!item.issue || item.issue=="undefined") {
		var abstractText = ZU.xpathText(doc, '//div[@class="abstractTitle"]/following-sibling::div[contains(@class, "abstractText")]');
		var m = abstractText.match(/Issue No\. 0?(\d+)/);
		if (m) {
			item.issue = m[1];
		} else {
			delete item.issue;
		}
	}
	//Fixing wrong volume number from wrong BibTeX value "volume = {00}"
	if (item.volume=="00") {
		delete item.volume;
	}
	//Add isbn
	var isbn = ZU.xpathText(doc, '//div[@class="abstractText" and contains(text(), "ISBN:")]');
	if (!item.ISBN && isbn) {
		item.ISBN = isbn;
	}
	//Add attachments
	item.attachments.push({
		document: doc,
		mimeType: "text/html",
		title: "Snapshot"
	});
	var pdfurl = ZU.xpathText(doc, '//div[@class="panel-body"]//a[contains(text(), "PDF")]/@href');
	if (pdfurl) {
		item.attachments.push({
			url: pdfurl,
			mimeType: "application/pdf",
			title: "Full Text PDF"
		});
		
	} 
	
}