function detectWeb(doc, url) {
	if (url.includes('/detail/ISBN')) {
		return "book";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h4.biblioTitle a');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc) {
	var item = new Zotero.Item("book");
	// Set the title
	item.title = ZU.xpathText(doc, '//h1[@class="biblioTitle"]');
	if (ZU.xpathText(doc, '//div[@class="titles"]/div[@class="biblioSubTitle"]')) item.title += ": " + ZU.xpathText(doc, '//div[@class="titles"]/div[@class="biblioSubTitle"]');
	// ISBN
	item.ISBN = text(doc, '.biblioId .value');
	// Publisher
	item.publisher = text(doc, '.biblioPublisher .value');
	// Publisher Location
	item.place = text(doc, '.biblioPublicationTown .value');
	// Publication Date
	item.date = text(doc, '.biblioPublishingYear .value');
	// Number of pages
	item.numPages = text(doc, '.biblioPages .value');
	// Abstract
	item.abstractNote = text(doc, '.description .blurb .value');
	// Get Creators
	var creators = doc.querySelectorAll('.authorMain .biblioAuthor');
	for (let creator of creators) {
		let creatorName = creator.querySelector('.value').textContent;
		let creatorRole;
		// check for editors
		if ((creator.textContent.includes("Hrsg.")) || (creator.textContent.includes("Editor")) || (creator.textContent.includes("Editeur")))  {
			creatorRole = "editor";
		}
		// check for translators
		else if ((creator.textContent.includes("Ãœbersetzung")) || (creator.textContent.includes("Translator")) || (creator.textContent.includes("Traduction"))) {
			creatorRole = "translator";
		}
		// everything else will be treated as authors
		else {
			creatorRole = "author";
		}
		item.creators.push(Zotero.Utilities.cleanAuthor(creatorName, creatorRole, creatorName.includes(', ')));
	}
	item.complete();
}