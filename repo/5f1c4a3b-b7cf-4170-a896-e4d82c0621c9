// See BibTeX.js
var bibtex2zoteroTypeMap = {
	book: "book", // or booklet, proceedings
	inbook: "bookSection",
	incollection: "bookSection",
	article: "journalArticle", // or magazineArticle or newspaperArticle
	patent: "patent",
	phdthesis: "thesis",
	unpublished: "manuscript",
	inproceedings: "conferencePaper", // check for conference also
	conference: "conferencePaper",
	techreport: "report",
	booklet: "book",
	manual: "book",
	mastersthesis: "thesis",
	misc: "book",
	proceedings: "book",
	online: "webpage",
	// from BibLaTeX translator:
	thesis: "thesis",
	letter: "letter",
	movie: "film",
	artwork: "artwork",
	report: "report",
	legislation: "bill",
	jurisdiction: "case",
	audio: "audioRecording",
	video: "videoRecording",
	software: "computerProgram",
	inreference: "encyclopediaArticle",
	collection: "book",
	mvbook: "book"
};

function detectWeb(doc, url) {
	if (url.includes('/pubs/pub')) {
		let bibtex = extractBibtex(doc);
		let doctype = bibtex.split('{')[0].replace('@', '');
		return bibtex2zoteroTypeMap[doctype] || 'journalArticle';
	}
	else if (getSearchResults(doc, true)) {
		return 'multiple';
	}
	return false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) === 'multiple') {
		// The below two pages with multiples are populated after page load has finished,
		// so can't be used as automatic test cases. For others this is not the case.
		// https://ai.google/research/people/105197
		// https://ai.google/research/pubs/
		Zotero.selectItems(getSearchResults(doc), function (selected) {
			if (selected) {
				ZU.processDocuments(Object.keys(selected), scrape);
			}
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc) {
	let bibtex = extractBibtex(doc);
	let translator = Zotero.loadTranslator("import");
	translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
	translator.setString(bibtex);
	translator.setHandler("itemDone", function (obj, item) {
		let downloadUrl = ZU.xpathText(doc, '//a[span[contains(@class, "icon--download")]]/@href');
		if (downloadUrl && downloadUrl.endsWith('.pdf')) {
			item.attachments.push({
				url: downloadUrl,
				title: 'Full Text PDF',
				mimeType: 'application/pdf'
			});
		}
		delete item.itemID;
		item.complete();
	});
	translator.translate();
}

function extractBibtex(doc) {
	let bibtex = ZU.xpathText(doc, '//a[contains(text(), "Bibtex")]/@copy-to-clipboard');
	return decodeURIComponent(bibtex);
}

function getSearchResults(doc, checkOnly) {
	let items = {};
	let found = false;
	let rows = ZU.xpath(doc, '//a[contains(@class, "card__title")]');
	for (let i = 0; i < rows.length; i++) {
		let href = rows[i].href;
		let title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}