function detectWeb(doc, url) {
	if (url.includes('/details/publication/')) {
		return "journalArticle";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h3 > a[href*="/details/publication/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	let id = url.match(/\/publication\/([^/?#]+)/)[1];
	let bibURL = `/details/sources/publication/export/${id}/citation/bibtex`;

	let readcube = getReadcubeConfig(doc);
	let PMID = readcube && readcube.pmid;
	let PMCID = readcube && readcube.pmc_id;
	let arXiv = readcube && readcube.arxiv_id;
	let oaURL = readcube && readcube.linkout;

	ZU.doGet(bibURL, function (bibText) {
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4"); // BibTeX
		translator.setString(bibText);
		translator.setHandler("itemDone", function (obj, item) {
			delete item.itemID;
			
			if (PMID && !(item.extra && item.extra.includes('PMID:'))) {
				item.extra = (item.extra || '') + `\nPMID: ${PMID}`;
			}
			
			if (PMCID && !(item.extra && item.extra.includes('PMCID:'))) {
				item.extra = (item.extra || '') + `\nPMCID: ${PMCID}`;
			}
			
			if (arXiv && !(item.extra && item.extra.includes('arXiv:'))) {
				item.extra = (item.extra || '') + `\narXiv: ${arXiv}`;
			}
			
			if (oaURL) {
				item.attachments.push({
					title: 'Full Text PDF',
					mimeType: 'application/pdf',
					url: oaURL
				});
			}
			
			if (item.url.includes('app.dimensions.ai/')) {
				delete item.url;
			}
			
			item.complete();
		});
		translator.translate();
	});
}

function getReadcubeConfig(doc) {
	for (let script of doc.body.querySelectorAll('script:not([src])')) {
		let match = script.textContent
			.match(/config\.details_actions\.readcube\s*=\s*({.*})/);
		if (match) {
			return JSON.parse(match[1]);
		}
	}
	return null;
}