function detectWeb(doc, url) {
	if (doc.querySelector('meta[name="description"]')) {
		return "magazineArticle";
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	}
}


function scrape(doc, url) {
	let item = new Zotero.Item('magazineArticle');
	let json = JSON.parse(text(doc, '.tie-schema-graph'));

	item.title = decodeEntities(json.headline, doc);
	item.publicationTitle = "MCV";
	item.ISSN = "1469-4832";
	item.date = json.dateModified || json.datePublished;
	item.url = json.url;
	item.abstractNote = decodeEntities(json.description, doc);
	item.language = 'en';
	for (let tag of json.keywords.split(',')) {
		if (tag.toLowerCase().startsWith('mcv')) continue;
		item.tags.push({ tag });
	}
	item.creators.push(ZU.cleanAuthor(json.author.name, 'author'));
	if (["Staff", "Editors"].includes(item.creators[0].lastName)) {
		delete item.creators[0].firstName;                    // remove the firstName param
		item.creators[0].lastName = "MCV Editors"; // write the desired name to lastName
		item.creators[0].fieldMode = 1;                       // change to single-field mode
	}
	item.attachments.push({ document: doc, title: 'Snapshot' });
	
	item.complete();
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.post-box-title');
	var links = doc.querySelectorAll('.post-box-title a');
	for (let i=0; i<rows.length; i++) {
		let href = links[i].href;
		let title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	switch (detectWeb(doc, url)) {
		case "multiple":
			Zotero.selectItems(getSearchResults(doc, false), function (items) {
				if (!items) {
					return true;
				}
				var articles = [];
				for (var i in items) {
					articles.push(i);
				}
				ZU.processDocuments(articles, scrape);
			});
			break;
		case "magazineArticle":
			scrape(doc, url);
			break;
	}
}

function decodeEntities(str, doc) {
	if (!str || !str.includes('&') || !doc.createElement) {
		return str;
	}

	// https://stackoverflow.com/questions/7394748/whats-the-right-way-to-decode-a-string-that-has-special-html-entities-in-it/7394787#7394787
	var textarea = doc.createElement('textarea');
	textarea.innerHTML = str;
	return textarea.value;
}