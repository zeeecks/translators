let idRe = /(?:\/([a-z]{2}))?\/book\/(?:info|view)\/([^#?/]+)/;

function detectWeb(doc, url) {
	if (idRe.test(url)) {
		return "book";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	else if (url.includes('/search')) {
		Z.monitorDOMChanges(doc.querySelector('.main-wrapper'));
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a.book-link[href*="/book/"], a.book-title[href*="/book/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	let [, lang, id] = url.match(idRe);
	let risURL = attr(doc, '#refDownload > a[href*="RIS" i]', 'href');
	if (!risURL) {
		risURL = `/api/citation/getCitationFile?format=RIS&bookId=${id}&language=${lang}`;
	}

	ZU.doGet(risURL, function (risText) {
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
		translator.setString(risText);
		translator.setHandler("itemDone", function (obj, item) {
			let hijri = false;
			for (let dateElem of doc.querySelectorAll('[id^="publishYear"]')) {
				let date = dateElem.textContent;
				if (!hijri && date.includes('هجری')) { // hijri
					item.date += lang == 'en' ? ' AH' : 'هـ ';
					hijri = true;
				}
				else if (date.includes('میلادی')) { // miladi (gregorian)
					item.date = ZU.strToISO(date);
					break;
				}
			}
			
			for (let creator of item.creators) {
				if (creator.fieldMode && creator.lastName.includes('،')) {
					let newCreator = ZU.cleanAuthor(
						creator.lastName.replace(/،/g, ','),
						creator.creatorType,
						true
					);
					delete creator.fieldMode;
					Object.assign(creator, newCreator);
				}
			}
			
			// downloading full-text content requires repeated requests to check
			// status and likely some manual user input, so it isn't possible
			// here.
			
			item.complete();
		});
		translator.translate();
	});
}