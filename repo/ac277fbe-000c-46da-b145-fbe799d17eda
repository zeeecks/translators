function detectWeb(doc, url) {
	if (url.includes('/books/') && !url.includes('/series/') && !url.includes('/distribution/') && !url.includes('/imprint/')) {
		return 'book';
	}
	else if (getSearchResults(doc, true)) {
		return 'multiple';
	}
	return false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) === 'multiple') {
		Zotero.selectItems(getSearchResults(doc, false), function (selected) {
			if (selected) {
				ZU.processDocuments(Object.keys(selected), scrape);
			}
		});
	}
	else {
		scrape(doc);
	}
}

function scrape(doc, url) {
	let item = new Zotero.Item('book');
	item.url = url;
	item.place = 'Cambridge, MA, USA';
	item.language = 'en';
	item.date = ZU.xpathText(doc, '(//time[@property = "publishDate"]/@content)[1]');
	item.ISBN = ZU.xpathText(doc, '(//span[@property = "isbn"])[1]');
	item.numPages = ZU.xpathText(doc, '(//span[@property = "numPages"])[1]');
	
	let abstract = doc.querySelector('div.book__blurb');
	if (abstract) {
		item.abstractNote = abstract.textContent.trim();
	}
	
	let title = ZU.xpathText(doc, '//h1[@class = "book__title"]').trim();
	
	let editionRegex = /, (([\w ]+) edition( [\w ]+)?)/i;
	let matchedEdition = title.match(editionRegex);
	if (matchedEdition) {
		item.edition = cleanEdition(matchedEdition[1]);
		title = title.replace(matchedEdition[0], '');
	}
	
	let volumeRegex = /, volume (\d+)/i;
	let matchedVolume = title.match(volumeRegex);
	if (matchedVolume) {
		item.volume = matchedVolume[1];
		title = title.replace(matchedVolume[0], '');
	}
	
	let subtitle = ZU.xpathText(doc, '//h2[@class = "book__subtitle"]');
	if (subtitle) {
		subtitle = subtitle.trim();
		item.title = [title, subtitle].join(': ');
	}
	else {
		item.title = title;
	}
	
	const contributorTypes = [['By', 'author'], ['Translated by', 'translator'], ['Edited by', 'editor']];
	let allContributors = ZU.xpath(doc, '//span[@class = "book__authors"]/p');
	allContributors.forEach(function (contributorLine) {
		contributorLine = contributorLine.textContent;
		contributorTypes.forEach(function (contributorType) {
			if (contributorLine.startsWith(contributorType[0])) {
				let contributors = contributorLine.replace(contributorType[0], '').split(/ and |,/);
				contributors.forEach(function (contributorName) {
					item.creators.push(ZU.cleanAuthor(contributorName, contributorType[1]));
				});
			}
		});
	});
	
	let series = ZU.xpathText(doc, '//p[@class = "book__series"]/a[contains(@href, "/series/")]');
	if (series) {
		item.series = series.trim();
	}
	
	let publisher = ZU.xpathText(doc, '//p[@class = "book__series"]/a[contains(@href, "/imprint/") or contains(@href, "/distribution/")]');
	if (publisher) {
		item.publisher = publisher.trim();
	}
	else {
		item.publisher = 'MIT Press';
	}
	
	let openAccessUrl = ZU.xpathText(doc, '//div[contains(@class, "open-access")]/a/@href');
	if (openAccessUrl) {
		if (openAccessUrl.endsWith('.pdf') || openAccessUrl.endsWith('.pdf?dl=1')) {
			item.attachments.push({
				url: openAccessUrl,
				title: 'Full Text PDF',
				mimeType: 'application/pdf'
			});
		}
		else {
			item.attachments.push({
				url: openAccessUrl,
				title: 'Open Access',
				mimeType: 'text/html'
			});
		}
	}
	
	let seriesURL = attr(doc, '.book__series a', 'href');
	if (seriesURL) {
		ZU.processDocuments(seriesURL, function (seriesDoc) {
			let seriesEditors = text(seriesDoc, '.series__editors')
				.split(/,| and /);
			for (let seriesEditor of seriesEditors) {
				let creator = ZU.cleanAuthor(seriesEditor, 'seriesEditor');
				
				// sometimes series editors are also editors of individual
				// volumes, and it doesn't make sense to include the same name
				// twice. not an efficient approach but we're dealing with 4-5
				// contributors max.
				let duplicate = false;
				for (let other of item.creators) {
					if (other.firstName == creator.firstName && other.lastName == creator.lastName) {
						duplicate = true;
					}
				}
				
				if (!duplicate) {
					item.creators.push(creator);
				}
			}
			item.complete();
		});
	}
	else {
		item.complete();
	}
}

function cleanEdition(text) {
	if (!text) return text;
	
	// from Taylor & Francis eBooks translator, slightly adapted
	
	const ordinals = {
		first: "1",
		second: "2",
		third: "3",
		fourth: "4",
		fifth: "5",
		sixth: "6",
		seventh: "7",
		eighth: "8",
		ninth: "9",
		tenth: "10"
	};
	
	text = ZU.trimInternal(text).replace(/[[\]]/g, '');
	// this somewhat complicated regex tries to isolate the number (spelled out
	// or not) and make sure that it isn't followed by any extra info
	let matches = text
		.match(/^(?:(?:([0-9]+)(?:st|nd|rd|th)?)|(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth))(?:\s?ed?\.?|\sedition)?$/i);
	if (matches) {
		let edition = matches[1] || matches[2];
		edition = ordinals[edition.toLowerCase()] || edition;
		return edition == "1" ? null : edition;
	}
	else {
		return text;
	}
}

function getSearchResults(doc, checkOnly) {
	let rows = ZU.xpath(doc, '//ul[contains(@class, "results__list")]//a[@property = "name"]');
	
	if (checkOnly) {
		return rows.length > 0;
	}
	
	let items = {};
	for (let i = 0; i < rows.length; i++) {
		items[rows[i].href] = rows[i].text.trim();
	}
	return items;
}