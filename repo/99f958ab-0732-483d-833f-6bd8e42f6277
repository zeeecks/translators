const pdfSlugRe = /\/files(\/[^/]+\/[^/]+)/;
const preprintType = ZU.fieldIsValidForType('title', 'preprint')
	? 'preprint'
	: 'report';

function detectWeb(doc, url) {
	if (doc.querySelector('meta[name="citation_title"]')
		|| (pdfSlugRe.test(url) && url.endsWith('.pdf'))) {
		if (url.includes('/papers/')) {
			return preprintType;
		}
		else if (url.includes('/books-and-chapters/')) {
			if (url.match(/\/books-and-chapters\/[^/]+\/[^/]+/)) {
				// if the URL has two locators, we're on a chapter
				return "bookSection";
			}
			else {
				return "book";
			}
		}
		else if (url.includes('/chapters/')) {
			return "bookSection";
		}
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.digest-card__title a');
	for (let i = 0; i < rows.length; i++) {
		let href = rows[i].href;
		let title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (href.match(/\.pdf$/)) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	if (doc.querySelector('form.download-citation')) {
		scrapeWithBib(doc, url, getBibURL(doc));
	}
	else if (doc.querySelector('a[href$=".bib"]')) {
		scrapeWithBib(doc, url, attr(doc, 'a[href$=".bib"]', 'href'));
	}
	else if (url.endsWith('.pdf')) {
		let catalogSlug = url.match(pdfSlugRe);
		if (catalogSlug && catalogSlug != url) {
			catalogSlug = catalogSlug[1];
			ZU.processDocuments(catalogSlug, doc => scrape(doc, catalogSlug));
		}
	}
	else if (doc.querySelector('.table-of-contents__title a')) {
		// if we're on a book page without a citation form, we'll navigate to
		// the first chapter and grab the BibTeX from there. it'll contain a
		// citation for the book.
		ZU.processDocuments(attr(doc, '.table-of-contents__title a', 'href'),
			chapterDoc => scrapeWithBib(doc, url, getBibURL(chapterDoc)));
	}
	else {
		throw new Error('No BibTeX source found');
	}
}


function scrapeWithBib(doc, url, bibURL) {
	ZU.doGet(bibURL, function (respText) {
		// first we preprocess a bit: the BibTeX sometimes contains unescaped
		// quotes within the quoted title, so we'll fix it
		respText = respText.replace(/(^\s*)title = "(.+)"/gm, (_, spaces, title) => {
			let escapedTitle = title.replace(/"(.+)"/g, "``$1''");
			return `${spaces}title = "${escapedTitle}"`;
		});
		
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setString(respText);
		translator.setHandler("itemDone", function (obj, item) {
			// NBER gives us a BibTeX citation for the book when we try to pull
			// the citation for one chapter, so we'll just skip it. vice versa
			// for generating book citations by grabbing a chapter detail page.
			// we don't want to blindly skip when itemType != detected, because
			// detectWeb might make mistakes.
			let detected = detectWeb(doc, url);

			if ((item.itemType == 'book' && detected == 'bookSection')
				|| (item.itemType == 'bookSection' && detected == 'book')) {
				return;
			}

			if (item.itemType == 'report' && detected == 'preprint') {
				item.itemType = 'preprint';
				item.archiveID = item.reportNumber;
				delete item.reportNumber;
			}

			if (item.itemType == 'book' && item.publisher.includes(', volume ')) {
				let [series, vol, issue] = item.publisher.split(', ');
				delete item.publisher;
				item.series = series;
				item.volume = vol.replace(/^volume\b/, '');
				item.seriesNumber = issue.replace(/^issue\b/, '');
			}
			
			var pdfURL = attr(doc, 'meta[name="citation_pdf_url"]', 'content');
			if (!pdfURL) {
				pdfURL = attr(doc, '.page-header__intro-links a[href$=".pdf"]', 'href');
			}
			item.attachments.push({
				url: pdfURL,
				title: "Full Text PDF",
				mimeType: "application/pdf"
			});
			
			item.url = attr(doc, 'link[rel="canonical"]', 'href') || item.url;
			
			for (let creator of item.creators) {
				// fix initials without period ("William H Macy")
				if (creator.firstName && creator.firstName.match(/\b[A-Z]$/)) {
					creator.firstName += '.';
				}
			}
			
			item.complete();
		});
		translator.translate();
	});
}


function getBibURL(doc) {
	let paperNumber = attr(doc, 'meta[name="citation_technical_report_number"]', 'content');
	return `https://back.nber.org/bibliographic/${paperNumber}.bib`;
}