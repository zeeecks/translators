// attr()/text() v2
function attr(docOrElem,selector,attr,index){var elem=index?docOrElem.querySelectorAll(selector).item(index):docOrElem.querySelector(selector);return elem?elem.getAttribute(attr):null;}function text(docOrElem,selector,index){var elem=index?docOrElem.querySelectorAll(selector).item(index):docOrElem.querySelector(selector);return elem?elem.textContent:null;}


function detectWeb(doc, url) {
	if (url.includes('url=article')) {
		return "journalArticle";
	} else if (url.includes('url=issue') && getSearchResults(doc, true)) {
		return "multiple";
	}
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('tr');
	for (let i=0; i<rows.length; i++) {
		let href = attr(rows[i], 'td a', 'href');
		let title = text(rows[i], 'td', 1);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function ALLCaps(name) {
	return name === name.toUpperCase();
}


// Concatenate the values of all nodes until a BR or B tag respecting the HTML formatting
function getValue(nodes) {
	var value = "";
	for (let part of nodes) {
		if (part.tagName=="BR" || part.tagName=="B") break;
		value += ' ';
		if (part.tagName) {
			value += part.outerHTML;
		} else {
			value += part.textContent.trim();
		}
	}
	return value;
}


function scrape(doc, url) {
	var item = new Z.Item('journalArticle');
	
	var titleNodes = ZU.xpath(doc, '//b[contains(text(), "Title:")]/following-sibling::node()');
	item.title = getValue(titleNodes);
	var subtitleNodes = ZU.xpath(doc, '//b[contains(text(), "Subtitle:")]/following-sibling::node()');
	var subtitle = getValue(subtitleNodes);
	if (subtitle) {
		item.title += ': ' + subtitle;
	}
	
	// e.g. Author(s): HANDAL, Boris , WATSON, Kevin , ..., VAN DER MERWE, W.L.
	// but sometimes the space before the comma is also missing
	var authors = ZU.xpathText(doc, '//b[contains(text(), "Author(s):")]/following-sibling::text()[1]');
	if (authors) {
		authors = authors.split(',');
	}
	var creator;
	for (let i=0; i<authors.length; i++) {
		let name = authors[i];
		if (ALLCaps(name)) name = ZU.capitalizeTitle(name, true);
		if (i%2===0) {// last name
			creator = {
				creatorType: 'author',
				lastName: ZU.capitalizeTitle(name, true)
			};
		} else {// first name
			creator.firstName = name;
			item.creators.push(creator); 
		}
	}

	item.publicationTitle = ZU.xpathText(doc, '//b[contains(text(), "Journal:")]/following-sibling::a[1]');
	item.volume = ZU.xpathText(doc, '//b[contains(text(), "Volume:")]/following-sibling::a[1]');
	item.issue = ZU.xpathText(doc, '//b[contains(text(), "Issue:")]/following-sibling::text()[1]');
	item.date = ZU.xpathText(doc, '//b[contains(text(), "Date:")]/following-sibling::text()[1]');
	item.pages = ZU.xpathText(doc, '//b[contains(text(), "Pages:")]/following-sibling::text()[1]');
	item.DOI = ZU.xpathText(doc, '//b[contains(text(), "DOI:")]/following-sibling::text()[1]');
	item.abstractNote = ZU.xpathText(doc, '//b[contains(text(), "Abstract :")]/following-sibling::text()[1]');
	
	item.attachments.push({
		url: url,
		title: "Snapshot",
		mimeType: "text/html"
	});
	item.complete();
}