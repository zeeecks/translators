function detectWeb(doc, _url) {
	let contentType = attr(doc, 'meta[property="ABC.ContentType"]', 'content');
	if (contentType == 'CMChannel' && getSearchResults(doc, true)) {
		return 'multiple';
	}
	else if (contentType == 'Video') {
		return 'videoRecording';
	}
	else if (contentType == 'Article') {
		return 'newspaperArticle';
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h3 a');
	for (var i = 0; i < rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) return;
			ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		item.language = "en-AU";
		// og:url does not preserve https prefixes, so use canonical link until fixed
		var canonical = doc.querySelector('link[rel="canonical"]');
		if (canonical) {
			item.url = canonical.href;
		}
		
		if (item.itemType == 'videoRecording') {
			item.studio = "ABC News"; // i guess this is correct...
		}
		else {
			item.publicationTitle = "ABC News";
		}
		
		item.language = "en-AU";
		
		if (item.date) {
			item.date = ZU.strToISO(item.date);
		}
		else {
			item.date = ZU.strToISO(attr(doc, 'time', 'datetime'));
		}
		
		var authors = text(doc, '[data-component="Byline"] p');
		if (authors && item.creators.length <= 1) {
			authors = authors.replace(/^By /, '');
			if (authors == authors.toUpperCase()) { // convert to title case if all caps
				authors = ZU.capitalizeTitle(authors, true);
			}
			item.creators = [];
			var authorsList = authors.split(/,|\band\b/);
			for (let i = 0; i < authorsList.length; i++) {
				item.creators.push(ZU.cleanAuthor(authorsList[i], "author"));
			}
		}
		
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}