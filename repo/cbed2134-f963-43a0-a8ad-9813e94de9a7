function detectWeb(doc, _url) {
	if (doc.querySelector('.bookinfo')) {
		return "conferencePaper";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.pagecontent > .contentpadding > a[href*="abstract"][href$=".html"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(nearestPreviousSibling(row, 'b'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function nearestPreviousSibling(el, selector) {
	while ((el = el.previousElementSibling)) {
		if (el.matches(selector)) {
			return el.textContent.trim();
		}
	}
	return '';
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		fillBookInfo(doc, url, item);
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = 'conferencePaper';
		trans.doWeb(doc, url);
	});
}

function fillBookInfo(doc, url, item) {
	let bookInfo = doc.querySelector('.bookinfo > .contentpadding')
		|| doc.querySelector('.pagecontent > .contentpadding');
	item.proceedingsTitle = text(bookInfo, '.largerfont');
	item.abstractNote = text(doc, '.abstract div');
	
	if (item.publisher && item.publisher.startsWith('Cascadilla')) {
		item.place = 'Somerville, MA';
	}
	
	item.url = url;
	
	for (let child of bookInfo.childNodes) {
		if (child.textContent.trim().startsWith('edited by')) {
			for (let name of child.textContent.trim()
					.replace(/^edited by\s*/, '').split(/, (?:and )?| and /)) {
				item.creators.push(ZU.cleanAuthor(name, 'editor'));
			}
			break;
		}
	}
	
	for (let attachment of item.attachments) {
		if (attachment.url && attachment.url.startsWith('www.')) {
			attachment.url = 'https://' + attachment.url;
		}
	}
}