function detectWeb(doc, url) {
	if (url.includes('/Record/')) {
		let format = doc.querySelector('.recordFormat span').className;
		if (format.includes('video')) {
			return "videoRecording";
		}
		else if (format.includes('sound')) {
			return "audioRecording";
		}
		else if (format.includes('journalarticle')) {
			return "journalArticle";
		}
		else if (format.includes('thesis')) {
			return "thesis";
		}
		else {
			return "book";
		}
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h2 > a.title[href*="/Record/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent)
			.replace(/Show detailed view|Näytä tarkat tiedot|Visa detaljrik vy/, '');
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) {
				for (let url of Object.keys(items)) {
					scrapeMARC(url);
				}
			}
		});
	}
	else {
		scrapeMARC(url);
	}
}

function scrapeMARC(url) {
	let cleanURL = url.replace(/[#?].*$/, '').replace(/\/$/, '');
	let marcURL = cleanURL + '/Export?style=MARC';
	
	// would like to pass all the URLs at once as an array here, but it makes
	// the RIS fallback difficult.
	ZU.doGet(marcURL, function (marcData) {
		var success = false;
		
		var translator = Zotero.loadTranslator("import");
		// MARC
		translator.setTranslator("a6ee60df-1ddc-4aae-bb25-45e0537be973");
		translator.setString(marcData);
		
		translator.setHandler('itemDone', function (_, item) {
			if (item.place) {
				item.place = item.place.replace(/\[[^[]+\]/, '');
			}
			
			if (item.publisher) {
				item.publisher = item.publisher.replace(/&amp;/g, '&');
			}
			
			success = true;
			item.complete();
		});
		
		translator.setHandler('done', function (_) {
			if (!success) {
				Z.debug('Falling back to RIS.');
				scrapeRIS(cleanURL);
			}
		});
		
		translator.translate();
	});
}

function scrapeRIS(cleanURL) {
	let risURL = cleanURL + '/Export?style=RIS';
	
	ZU.doGet(risURL, function (text) {
		var translator = Zotero.loadTranslator("import");
		// RIS
		translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
		translator.setString(text);
		translator.setHandler("itemDone", function (obj, item) {
			item.complete();
		});
		translator.translate();
	});
}