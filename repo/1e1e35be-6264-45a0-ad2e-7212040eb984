// Some test cases are only working in the browser with some AJAX loading:
// 1) http://psycnet.apa.org/PsycBOOKS/toc/10023
// 2) follow a link in a search
// 3) search page
// 4) journal page
//
// Moreover, after three test cases you have to load an psycnet url in the browser
// to avoid some automatic download detection.


function detectWeb(doc, url) {
	if (url.includes('/search/display?')
			|| url.includes('/record/')
			|| url.includes('/fulltext/')
			|| url.includes('/buy/')
			|| url.includes('/doiLanding?doi=')) {
		if (doc.getElementById('bookchapterstoc')) {
			return "book";
		}
		else if (attr(doc, 'meta[property="og:type"]', 'content') == 'Chapter') {
			return "bookSection";
		}
		else {
			return "journalArticle";
		}
	}
	if (url.includes('/search/results?') || url.includes('/journal/')) { // && getSearchResults(doc, true)) {
		return "multiple";
	}
	
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a.article-title');
	for (var i = 0; i < rows.length; i++) {
		var href = attr(rows[i].parentNode, '#buy, a.fullTextHTMLLink, a.fullTextLink', 'href');
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var uid = getIds(doc, url.replace(/[?#].*$/, ''));
	if (!uid) {
		throw new Error("ID not found");
	}
	
	var productCode;
	var db = doc.getElementById('database') || doc.querySelector('doi-landing .meta span');
	if (db) {
		db = db.parentNode.textContent.toLowerCase();
		if (db.includes('psycarticles')) {
			productCode = 'PA';
		}
		else if (db.includes('psycbooks')) {
			productCode = 'PB';
		}
		else if (db.includes('psycinfo')) {
			productCode = 'PI';
		}
		else if (db.includes('psycextra')) {
			productCode = 'PE';
		}
	}
	else {
		// default, e.g. if page is not completely loaded
		productCode = 'PI';
	}
	
	var postData = JSON.stringify({
		api: "record.exportRISFile",
		params: {
			UIDList: [{UID: uid, ProductCode: productCode}],
			exportType: "zotero"
		}
	});
	var headers = {
		'Content-Type': 'application/json',
		Referer: url
	};

	// 1. We have to set the uid, product code and format with a post request
	ZU.doPost('/api/request/record.exportRISFile', postData, function (apiReturnMessage) {
		var apiReturnData;
		try {
			apiReturnData = JSON.parse(apiReturnMessage);
		}
		catch (e) {
			Z.debug('POST request did not result in valid JSON');
			Z.debug(apiReturnMessage);
		}
		
		if (apiReturnData && apiReturnData.isRisExportCreated) {
			// 2. Download the requested data (after step 1)
			ZU.doGet('/ris/download', function (data) {
				if (data.includes('Content: application/x-research-info-systems')) {
					processRIS(data, doc);
				}
				else {
					// sometimes (e.g. during testing) the data is not loaded
					// but a meta redirect to a captcha page mentioning
					Z.debug("The APA anomaly detection think we are doing "
						+ "something unusual (sigh). Please reload any APA page e.g. "
						+ "http://psycnet.apa.org/ in your browser and try again.");
					Z.debug(data);
				}
			});
		}
	}, headers);
}


function processRIS(text, doc) {
	var translator = Zotero.loadTranslator("import");
	translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
	translator.setString(text);
	translator.setHandler("itemDone", function (obj, item) {
		item.title = cleanTitle(item.title);
		if (item.publication) item.publication = cleanTitle(item.publication);
		if (item.bookTitle) item.bookTitle = cleanTitle(item.bookTitle);
		if (item.series) item.series = cleanTitle(item.series);
		if (item.place) item.place = item.place.replace(/\s+/g, ' ');
		if (item.ISSN) item.ISSN = ZU.cleanISSN(item.ISSN);
		for (var i = 0; i < item.tags.length; i++) {
			item.tags[i] = item.tags[i].replace(/^\*/, '');
		}
		var pdfURL = attr(doc, 'a[href*="/fulltext"]', 'href');
		if (pdfURL) {
			item.attachments.push({
				url: pdfURL,
				title: "Full Text PDF",
				mimeType: "application/pdf"
			});
		}
		item.attachments.push({
			title: "Snapshot",
			document: doc
		});
		item.complete();
	});
	translator.translate();
}


// try to figure out ids that we can use for fetching RIS
function getIds(doc, url) {
	// try to extract uid from the table
	var uid = text(doc, '#uid + dd') || text(doc, '#bookUID');
	if (uid) {
		return uid;
	}

	// try to extract uid from the url
	if (url.includes('/record/')) {
		let m = url.match(/\/record\/([\d-]*)/);
		if (m && m[1]) {
			return m[1];
		}
	}

	// DOI landing pages include a link to the /record/ page
	if (url.includes('/doiLanding') && doc.querySelector('.title > a')) {
		let m = attr(doc, '.title > a', 'href').match(/\/record\/([\d-]*)/);
		if (m && m[1]) {
			return m[1];
		}
	}
	
	/** on the book pages, we can find the UID in
	 * the Front matter and Back matter links
	 */
	if (url.includes('/PsycBOOKS/')) {
		var link = attr(doc, '.bookMatterLinks a', 'href');
		if (link) {
			let m = link.match(/\/fulltext\/([^&]+?)-(?:FRM|BKM)/i);
			if (m && m[1]) {
				return m[1];
			}
		}
	}

	/** for pages with buy.optionToBuy
	 * we can fetch the id from the url
	 * alternatively, the id is in a javascript section (this is messy)
	 */
	if (url.includes('/buy/')) {
		let m = url.match(/\/buy\/([\d-]*)/);
		if (m) {
			return m[1];
		}

		m = doc.documentElement.textContent.match(/\bitemUID\s*=\s*(['"])(.*?)\1/);
		if (m && m[2]) {
			return m[2];
		}
	}
	
	/** last option: check for a purchase link
	 */
	var purchaseLink = attr(doc, 'a.purchase[href*="/buy/"]', 'href');
	if (purchaseLink) {
		let m = purchaseLink.match(/\/buy\/([\d-]*)/);
		return m[1];
	}
	
	return false;
}


function cleanTitle(title) {
	// delete point at the end of a title,
	// except it looks like an abbreviation
	if (/\b\w\.$/.test(title)) {
		return title;
	}
	else {
		return title.replace(/\.$/, '');
	}
}