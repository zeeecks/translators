function detectWeb(doc, url) {
	if (url.includes('/ark:/')) {
		return "artwork";
	}
	else if (url.includes('/recherche') && getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a[href*="/ark:/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}


function scrape(doc, _url) {
	let item = new Zotero.Item('artwork');
	let json = JSON.parse(text(doc, 'script[type="application/ld+json"]'));
	
	item.title = json.name || 'Untitled';
	item.artworkMedium = json.material;
	item.callNumber = json.identifier;
	item.archive = "Louvre";
	item.abstractNote = json.description;
	item.url = json.url;
	
	if (json.creator) {
		for (let artist of json.creator) {
			// sometimes these aren't really artists ("School / Artistic centre"),
			// but it's a royal pain to strip those out and there's nothing to
			// clearly identify them
			
			let surnameMatch = artist.name.match(/^([^a-z\s.]{2,})\s*(.*)/);
			if (surnameMatch) {
				// if the artist's name starts with an uppercase surname
				// (like "GOGH Vincent van") then pull that out.
				
				item.creators.push({
					lastName: ZU.capitalizeTitle(surnameMatch[1], true),
					firstName: surnameMatch[2],
					creatorType: 'artist'
				});
			}
			else {
				item.creators.push(ZU.cleanAuthor(
					artist.name,
					'artist',
					artist.name.includes(', ')
				));
			}
		}
	}
	
	if (json.dateCreated) {
		let bceDateMatch = json.dateCreated.match(/([0-9]+) av\./);
		if (bceDateMatch) {
			// this generates a date in EDTF format, which works like ISO 8601:
			// https://en.wikipedia.org/wiki/ISO_8601#Years
			// so we need to add one; 200 BCE is represented as -0199
			let year = parseInt(bceDateMatch[1]);
			if (!isNaN(year)) {
				item.date = '-' + (year - 1).toString().padStart(4, '0');
			}
		}
		else {
			item.date = ZU.strToISO(json.dateCreated);
		}
	}
	
	if (json.width && json.height && json.width.length && json.height.length) {
		item.artworkSize = `${json.width[0].name} x ${json.height[0].name}`;
	}
	
	if (json.image) {
		item.attachments.push({
			title: 'Image',
			url: json.image,
			mimeType: 'image/jpeg'
		});
	}
	
	item.complete();
}