function detectWeb(doc, url) {
	if (doc.querySelector('meta[name="citation_title"]')) {
		if (doc.querySelector('meta[name="citation_conference_title"]')) {
			return "conferencePaper";
		}
		else {
			return "journalArticle";
		}
	}
	else if (url.endsWith('.pdf')) {
		// not as good of a heuristic as when we can look at the <meta> tags,
		// but it'll do
		return url.includes('//proceedings.mlr.press')
			? "conferencePaper"
			: "journalArticle";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('dl');
	if (!rows.length) rows = doc.querySelectorAll('.paper');
	for (let row of rows) {
		let href = attr(row, 'a[href$=".html"]', 'href');
		let title = ZU.trimInternal(text(row, 'dt, .title'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else if (url.endsWith('.pdf')) {
		ZU.processDocuments(url.replace(/v(?:olume)?([^/]+\/[^/]+)\/.*/, 'v$1'), scrape);
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		if (item.itemType == 'conferencePaper') {
			item.proceedingsTitle = item.proceedingsTitle || item.publicationTitle || '';
			delete item.publicationTitle;
			
			let maybeContainerTitle = text(doc, '#info > i');
			if (maybeContainerTitle.includes('Proceedings of ')
				&& !item.proceedingsTitle.includes('Proceedings of ')) {
				item.proceedingsTitle = maybeContainerTitle;
			}
		}
		
		item.abstractNote = text(doc, '#abstract');
		if (!item.abstractNote) {
			// it would be nice to use nextSibling here to fetch the text node
			// next to the "Abstract" heading, but that doesn't work in
			// processDocuments.
			let content = innerText(doc, '#content');
			item.abstractNote = content
				.replace(/^[\s\S]*Abstract/, '')
				.replace(/\[abs][\s\S]*$/, '');
		}
		
		item.date = ZU.strToISO(item.date);
		
		item.attachments = item.attachments.filter(a => a.title != 'Snapshot');
		
		for (let link of doc.querySelectorAll('a')) {
			let text = link.textContent.trim();
			if (text == 'code') {
				item.attachments.push({
					title: 'Source Code',
					url: link.href,
					mimeType: 'text/html'
				});
			}
			else if (text == 'Supplementary PDF') {
				item.attachments.push({
					title: 'Supplementary PDF',
					url: link.href,
					mimeType: 'application/pdf'
				});
			}
		}
		
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}