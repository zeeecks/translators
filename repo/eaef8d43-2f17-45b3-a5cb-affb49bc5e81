// see also https://github.com/UB-Mannheim/zotkat/blob/master/Wikidata%20QuickStatements.js
var typeMapping = {
	Q838948: "artwork",
	Q30070318: "audioRecording",
	Q686822: "bill",
	Q17928402: "blogPost",
	Q571: "book",
	Q3331189: "book", // Edition
	Q47461344: "book", // written work
	Q1980247: "bookSection",
	Q2334719: "case",
	Q40056: "computerProgram",
	Q23927052: "conferencePaper",
	Q30070414: "dictionaryEntry",
	Q49848: "document",
	Q30070439: "email",
	Q13433827: "encyclopediaArticle",
	Q17329259: "encyclopediaArticle", // merged into Q13433827
	Q11424: "film",
	Q7216866: "forumPost",
	Q30070550: "hearing",
	Q30070565: "instantMessage",
	Q178651: "interview",
	Q13442814: "journalArticle",
	Q133492: "letter",
	Q30070590: "magazineArticle",
	Q87167: "manuscript",
	Q4006: "map",
	Q5707594: "newspaperArticle",
	Q253623: "patent",
	Q24634210: "podcast",
	Q604733: "presentation",
	Q1555508: "radioBroadcast",
	Q10870555: "report",
	Q820655: "statute",
	Q1266946: "thesis",
	Q15416: "tvBroadcast",
	Q30070675: "videoRecording",
	Q36774: "webpage",
	Q1172284: "document" // dataset
};

// see also https://www.wikidata.org/wiki/Template:Bibliographical_properties
var mapping = {
	'wdt:P1476': 'title',
	'wdt:P1680': 'subtitle',
	'wdt:P123': 'publisher',
	'wdt:P577': 'date',
	'wdt:P356': 'DOI',
	'wdt:P407': 'language',
	'wdt:P1433': 'publicationTitle',
	'wdt:P921': 'tagString',
	'wdt:P50': 'creator',
	'wdt:P2093': 'creator',
	'wdt:P98': 'creator',
	'wdt:P655': 'creator',
	'wdt:P110': 'creator',
	'wdt:P57': 'creator',
	'wdt:P58': 'creator',
	'wdt:P161': 'creator',
	'wdt:P162': 'creator',
	'wdt:P953': 'url',
	'wdt:P478': 'volume',
	'wdt:P433': 'issue',
	'wdt:P304': 'pages',
	'wdt:P179': 'series',
	'wdt:P212':	'ISBN',
	'wdt:P957': 'ISBN',
	'wdt:P236': 'ISSN',
	'wdt:P136': 'genre',
	'wdt:P275': 'rights',
	'wdt:P2047': 'runningTime',
	'wdt:P750': 'distributor',
	'wdt:P698': 'PMID',
	'wdt:P932': 'PMCID'
};

// creators with no special role here are treated as contributor
var creatorMapping = {
	'wdt:P50': 'author',
	'wdt:P2093': 'author',
	'wdt:P98': 'editor',
	'wdt:P655': 'translator',
	'wdt:P110': 'illustrator',
	'wdt:P57': 'director',
	'wdt:P58': 'scriptwriter',
	'wdt:P162': 'producer'
};


var namespaces = {
	rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
	xsd: "http://www.w3.org/2001/XMLSchema#",
	rdfs: "http://www.w3.org/2000/01/rdf-schema#",
	owl: "http://www.w3.org/2002/07/owl#",
	wikibase: "http://wikiba.se/ontology-beta#",
	wdata: "https://www.wikidata.org/wiki/Special:EntityData/",
	wd: "http://www.wikidata.org/entity/",
	wds: "http://www.wikidata.org/entity/statement/",
	wdref: "http://www.wikidata.org/reference/",
	wdv: "http://www.wikidata.org/value/",
	wdt: "http://www.wikidata.org/prop/direct/",
	p: "http://www.wikidata.org/prop/",
	ps: "http://www.wikidata.org/prop/statement/",
	psv: "http://www.wikidata.org/prop/statement/value/",
	psn: "http://www.wikidata.org/prop/statement/value-normalized/",
	pq: "http://www.wikidata.org/prop/qualifier/",
	pqv: "http://www.wikidata.org/prop/qualifier/value/",
	pqn: "http://www.wikidata.org/prop/qualifier/value-normalized/",
	pr: "http://www.wikidata.org/prop/reference/",
	prv: "http://www.wikidata.org/prop/reference/value/",
	prn: "http://www.wikidata.org/prop/reference/value-normalized/",
	wdno: "http://www.wikidata.org/prop/novalue/",
	skos: "http://www.w3.org/2004/02/skos/core#",
	schema: "http://schema.org/",
	cc: "http://creativecommons.org/ns#",
	geo: "http://www.opengis.net/ont/geosparql#",
	prov: "http://www.w3.org/ns/prov#",
	// usually the defintion of the xml namespace is not needed, but
	// here we have to explicitely define it before using ZU.xpath
	xml: "http://www.w3.org/XML/1998/namespace"
};


function detectWeb(doc) {
	var p31statement = doc.getElementById("P31");
	if (p31statement) {
		var p31values = ZU.xpath(p31statement, './/div[contains(@class, "wikibase-statementlistview")]//div[contains(@class, "wikibase-snakview-value")]/a/@title');
		for (var i = 0; i < p31values.length; i++) {
			if (p31values[i] && typeMapping[p31values[i].textContent]) {
				return typeMapping[p31values[i].textContent];
			}
		}
	}
	return false;
}


function doWeb(doc, url) {
	scrape(doc, url);
}


function scrape(doc, url) {
	var type = detectWeb(doc, url);
	url = url.replace(/#.*/, '');
	var qposition = url.indexOf('Q');
	var qnumber = url.substr(qposition);
	var xmlUrl = ZU.xpathText(doc, '//link[@rel="alternate" and @type="application/rdf+xml"]/@href');
	ZU.doGet(xmlUrl, function (data) {
		var parser = new DOMParser();
		var xml = parser.parseFromString(data, "application/xml");
		
		var item = new Zotero.Item(type);
		item.extra = 'QID: ' + qnumber;
		var nodes = ZU.xpath(xml, '//rdf:Description', namespaces);
		var creatorsArray = [];
		for (var i = 0; i < nodes.length; i++) {
			var rdfabout = nodes[i].getAttribute("rdf:about");
			if (rdfabout) {
				var id = rdfabout.substr(rdfabout.length - qnumber.length);
				if (id == qnumber) {
					for (var prop in nodes[i].childNodes) {
						var propstatement = nodes[i].childNodes[prop];
						var tagname = propstatement.tagName;
						if (tagname && mapping[tagname]) {
							var zprop = mapping[tagname];
							var value = propstatement.textContent;
							var resource = propstatement.getAttribute("rdf:resource");
							if (!value && resource) {
								// Z.debug("Internal look up resource: " + resource);
								value = ZU.xpathText(xml, '//rdf:Description[@rdf:about="' + resource + '"]/rdfs:label[contains(@xml:lang, "en")][1]', namespaces)
									|| ZU.xpathText(xml, '//rdf:Description[@rdf:about="' + resource + '"]/rdfs:label[1]', namespaces);
									
								// Z.debug(value);
							}
							if (zprop == "creator") {
								var seriesOrdinal = ZU.xpathText(xml, '//rdf:Description[ps:P50[@rdf:resource="' + resource + '"]]/pq:P1545[1]', namespaces)
									|| ZU.xpathText(xml, '//rdf:Description[ps:P2093[text()="' + value + '"]]/pq:P1545[1]', namespaces);
								var func = creatorMapping[tagname] || 'contributor';
								creatorsArray.push([value, func, seriesOrdinal]);
							}
							else if (zprop == "tagString") {
								for (let tag of value.split(', ')) {
									item.tags.push(tag);
								}
							}
							else if (["PMID", "PMCID"].includes(zprop)) {
								Z.debug(`Property added to extra: ${zprop}`);
								if (zprop == "PMCID") {
									value = `PMC${value.trim()}`;
								}
								item.extra += `\n${zprop}: ${value}`;
							}
							else if (item[zprop]) {
								item[zprop] += ', ' + value;
							}
							else {
								item[zprop] = value;
							}
						}
						else if (tagname == 'wdt:P31') {
							let resource = propstatement.getAttribute('rdf:resource');
							if (resource.endsWith('/Q1172284')) {
								item.extra += '\nType: dataset';
							}
						}
					}
				}
			}
		}
		if (item.title && item.subtitle) {
			item.title += ': ' + item.subtitle;
			delete item.subtitle;
		}
		creatorsArray.sort(function (a, b) {
			return a[2] - b[2];
		});
		for (let aut of creatorsArray) {
			item.creators.push(ZU.cleanAuthor(aut[0], aut[1]));
		}
		// in Zotero we cannot allow multiple DOIs
		if (item.DOI && item.DOI.includes(', ')) {
			item.DOI = ZU.xpathText(xml, '(//rdf:Description[wikibase:rank[contains(@rdf:resource, "#PreferredRank")]]/ps:P356)[1]', namespaces)
				|| ZU.xpathText(xml, '(//rdf:Description[wikibase:rank[contains(@rdf:resource, "#NormalRank")]]/ps:P356)[1]', namespaces)
				|| ZU.xpathText(xml, '(//rdf:Description[wikibase:rank[contains(@rdf:resource, "#DeprecatedRank")]]/ps:P356)[1]', namespaces);
		}

		item.complete();
	});
}