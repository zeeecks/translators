const slugRe = /\/(?:rfc|pdf|id|doc|info)(?:\/html)?\/([^/.]+)/;

function detectWeb(doc, url) {
	if (getSearchResults(doc, true)) {
		return "multiple";
	}
	else if (slugRe.test(url)) {
		return "report";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('td.doc');
	for (let row of rows) {
		let href = attr(row, 'a', 'href');
		let title = ZU.trimInternal(text(row, 'b'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		let slug = url.match(slugRe);
		if (slug) {
			slug = slug[1];
			let dataTrackerURL = `https://datatracker.ietf.org/doc/${slug}`;
			if (dataTrackerURL != url && dataTrackerURL != url + '/') {
				Z.debug(`Not on datatracker page; fetching ${dataTrackerURL}`);
				ZU.processDocuments(dataTrackerURL,
					(doc, url) => scrape(doc, url, dataTrackerURL));
				return;
			}
		}
		scrape(doc, url);
	}
}

function scrape(doc, url, originalURL) {
	let bibURL = attr(doc, '.meta-info a[href*="/bibtex"], .meta a[href*="/bibtex"]',
		'href');
	if (!bibURL) {
		// this is probably a draft with a weird versioned URL that doesn't
		// resolve right. so we'll reformat the version and try again.
		let strippedOriginalURL = originalURL.replace(/-?(\d+)$/, '/$1');
		if (strippedOriginalURL != originalURL) {
			Z.debug(`Versioned URL resolved incorrectly; trying ${strippedOriginalURL}`);
			ZU.processDocuments(strippedOriginalURL,
				(doc, url) => scrape(doc, url, strippedOriginalURL));
			return;
		}
	}
	
	if (bibURL.startsWith('/')) {
		// relative URL resolution doesn't currently work right when inside a
		// cross-domain processDocuments callback, so we'll do it manually
		bibURL = 'https://datatracker.ietf.org' + bibURL;
	}
	Z.debug(`Fetching BibTeX from ${bibURL}`);
	ZU.doGet(bibURL, function (respText) {
		// make sure the BibTeX translator understands that it's a report...
		// weird stuff with the reportNumber happens otherwise.
		respText = respText.replace(/^\s*@[^{]+/m, '@report');
		
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
		translator.setString(respText);
		translator.setHandler("itemDone", function (obj, item) {
			item.institution = 'Internet Engineering Task Force';
			item.reportType = item.series;
			if (item.type || item.reportType) {
				item.reportType = (item.type || item.reportType)
					.replace(/-/g, ' ');
				delete item.type; // not sure what that's about
				
				if (item.reportType == 'Request for Comments'
					&& item.reportNumber
					&& !item.reportNumber.includes('RFC')) {
					// by convention
					item.reportNumber = `RFC ${item.reportNumber}`;
				}
			}
			delete item.series;
			delete item.publisher;
			delete item.backupPublisher;
			delete item.extra;
			
			item.url = url.replace(/[?#].*/, '');

			let pdfURL = attr(doc, '.meta a[href$=".pdf"], .meta a[href*="/doc/pdf"]', 'href');
			if (pdfURL) {
				item.attachments.push({
					title: 'Full Text PDF',
					mimeType: 'application/pdf',
					url: pdfURL
				});
			}

			for (let creator of item.creators) {
				if (creator.firstName) {
					creator.firstName = creator.firstName.replace(/Dr\.?\s*/i, '');
				}
			}

			item.complete();
		});
		translator.translate();
	});
}