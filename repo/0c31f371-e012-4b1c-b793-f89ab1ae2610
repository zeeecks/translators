function detectWeb(doc, url) {
	if (url.includes('/journal/articleDetail')) {
		return "journalArticle";
	} else if ((url.includes('/search/') || url.includes('/journal/articleList/')) && getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('h5 > a[href*="/journal/articleDetail"]');
	for (let row of rows) {
		var href = row.href;
		var title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return;
			}
			ZU.processDocuments(Object.keys(items), scrape);
		});
	} else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setHandler('itemDone', function (obj, item) {
		let nodeId = encodeURIComponent(url.match(/[?&]nodeId=([^&#]+)/)[1]);
		
		let downloadDataURL = '/download/downloadData';
		let downloadDataBody = `nodeId=${nodeId}&systemCode=Article&depth=Article&shape=download`;

		ZU.doPost(downloadDataURL, downloadDataBody, function (respText) {
			if (!respText || respText[0] != '{') {
				item.complete();
				return;
			}
			
			let json = JSON.parse(respText);
			if (!json.link) {
				item.complete();
				return;
			}
			
			item.attachments.push({
				url: json.link,
				title: "Full Text PDF",
				mimeType: "application/pdf"
			});
			item.complete();
		});
	});

	translator.getTranslatorObject(function(trans) {
		trans.itemType = "journalArticle";
		trans.doWeb(doc, url);
	});
}