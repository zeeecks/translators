const preprintType = ZU.fieldIsValidForType('title', 'preprint')
	? 'preprint'
	: 'report';

function detectWeb(doc, url) {
	if (url.includes("/_search") && getSearchResults(doc, true)) {
		return "multiple";
	}
	return preprintType;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	// exclude author links
	var rows = doc.querySelectorAll('td a:not([href*="?_s="])');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(
			row.textContent.replace(/\s+\[semanticsArchive\]$/, "")
		);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	if (url.match(/semanticsArchive/)) {
		scrapeSA(doc, url);
		return;
	}
	
	var newItem = new Zotero.Item(preprintType);
	if (preprintType == "report") {
		newItem.extra = "type: article\n";
	}

	// Collect information.
	var idBlock = doc.querySelector("center");
	var title = text(idBlock, "a[href*='.pdf']");
	var authors = idBlock.querySelectorAll("a[href*='_k=']");
	// These are unpleasant but they're the best we have.
	var date = idBlock.lastChild.textContent;
	var abstract = idBlock.nextElementSibling.nextSibling.textContent;

	var tableRows = doc.querySelectorAll("tbody tr");
	for (let row of tableRows) {
		let [left, right] = row.querySelectorAll("td");
		if (!left || !right) continue;
		let fieldName = left.innerText.toLowerCase();
		if (fieldName.includes("format")) {
			let pdfUrl = right.querySelector("a[href*='.pdf']").href;
			newItem.attachments.push({ url: pdfUrl, title: "LingBuzz Full Text PDF", mimeType: "application/pdf" });
		}
		else if (fieldName.includes("keywords")) {
			newItem.tags.push(...right.innerText.split(/[;,] /));
		}
		else if (fieldName.includes("published in")) {
			newItem.extra = (newItem.extra || '') + 'LingBuzz Published In: ' + right.innerText + '\n';
		}
	}

	newItem.title = title;
	for (let authorLink of authors) {
		newItem.creators.push(
			Zotero.Utilities.cleanAuthor(authorLink.innerText, "author"));
	}
	newItem.abstractNote = abstract;
	newItem.date = ZU.strToISO(date);
	newItem.url = url;
	newItem.attachments.push({ document: doc, title: "Snapshot" });
	newItem.publisher = "LingBuzz";

	newItem.complete();
}

function scrapeSA(doc, url) {
	var newItem = new Zotero.Item(preprintType);
	if (preprintType == "report") {
		newItem.extra = "type: article\n";
	}

	// Collect information.
	var idBlock = doc.querySelector("center");
	// This is even worse than the usual LingBuzz pages.
	var title = text(idBlock, "a:first-child");
	var authors = idBlock.querySelectorAll("a:not(:first-child)");
	// These are unpleasant but they're the best we have.
	var date = idBlock.lastChild.textContent;

	let pdfUrl = idBlock.querySelector("a:first-child").href;
	newItem.attachments.push({ url: pdfUrl,
							   title: "LingBuzz (SemanticsArchive) Full Text PDF",
							   mimeType: "application/pdf" });

	var tableRows = doc.querySelectorAll("tbody tr");
	for (let row of tableRows) {
		let [left, right] = row.querySelectorAll("td");
		if (!left || !right) continue;
		let fieldName = left.innerText.toLowerCase();
		if (fieldName.includes("keywords")) {
			newItem.tags.push(...right.innerText.split(/[;,] /));
		}
	}

	newItem.title = title;
	for (let authorLink of authors) {
		newItem.creators.push(
			Zotero.Utilities.cleanAuthor(authorLink.innerText, "author"));
	}
	newItem.date = ZU.strToISO(date);
	newItem.url = url;
	newItem.attachments.push({ document: doc, title: "Snapshot" });
	newItem.publisher = "LingBuzz (SemanticsArchive)";

	newItem.complete();
}