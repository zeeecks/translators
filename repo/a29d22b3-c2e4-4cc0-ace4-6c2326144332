function detectWeb(doc, url) {
	if (url.indexOf('cabdirect/abstract/')>-1 || url.indexOf('cabdirect/FullTextPDF/')>-1) {
		//this isn't always right, but getting the item type from the page involves so much guessing as to be meaningless
		return "journalArticle";
	} else if (url.indexOf("cabdirect/search") != -1 && getSearchResults(doc, true)) {
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//div[@class="list-content"]/h2/a[contains(@href, "/abstract/")]');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		//Code to get from PDF view to abstract view
		if (url.search(/\.pdf$/) != -1) {
			//get from the PDF to the item display;
			var itemid = url.match(/\/([^\/]+)\.pdf/);
			var itemurl = "/cabdirect/abstract/" + itemid[1];
			//Z.debug(itemurl)
			ZU.processDocuments(itemurl, scrape);
		}

		else scrape(doc, url);
	}
}

function scrape(doc, url) {
	var pdfurl = ZU.xpathText(doc, '//p[@class="btnabstract"]/a[contains(@href, ".pdf")]/@href');
	var abstract = ZU.xpathText(doc, '//div[@class="abstract"]');
	var editors = ZU.xpath(doc, '//p[contains(@id, "ulEditors")]/a');
	var itemid =  url.match(/\/([^\/]+)$/);
	//Z.debug (itemid)

	var post = "methodData=  %7B%22method%22%3A%22downloadRecords%22%2C%22items%22%3A%5B%7B%22type%22%3A%22AbstractMarkLogic%22%2C%22itemUrls%22%3A%5B%22%2Fcabdirect%2Fabstract%2F" +
					itemid[1] + "%22%5D%7D%5D%2C%22recordSource%22%3A%22SelectedRecords%22%2C%22pageSource%22%3A%22unknown%22%2C%22numberRange%22%3A%22%22%2C%22pageUrl%22%3A%22https%3A%2F%2Fwww.cabdirect.org%2Fcabdirect%2Fabstract%2F" +
					itemid[1] + "%22%7D&userPrefs=%7B%22format%22%3A%22RIS%22%2C%22downloadTarget%22%3A%22DownloadFile%22%2C%22portions%22%3A%22CitationAndAbstract%22%2C%22destination%22%3A%22EmailBodyText%22%2C%22exportEmail%22%3A%22%22%2C%22SavedRecordsPageSize%22%3A50%7D";
	var posturl = "/cabdirect/utility/cd4mycabiajaxhandler/";
		ZU.doPost(posturl, post, function (text) {
		//Z.debug(text)
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
		translator.setString(text);
		translator.setHandler("itemDone", function(obj, item) {
			if (pdfurl) {
				item.attachments.push({
					url: pdfurl.href,
					title: "Full Text PDF",
					mimeType: "application/pdf"
				});
			}
			if (editors.length) {
				for (var i = 0; i<editors.length; i++ ) {
					item.creators.push(ZU.cleanAuthor(editors[i].textContent, "editor", true));
				}
			}
			if (item.notes.length) {
				//combine all notes into one
				var allNotes = [];
				for (var i = 0; i<item.notes.length; i++) {
					allNotes.push(item.notes[i]["note"]);
				}
				item.notes = [{"note": allNotes.join("")}];
			}
			if (item.itemType == "book" || item.itemType == "bookSection") {
				if (item.issue) {
					item.edition = item.issue;
					item.issue = "";
				}
			}
			item.url = url;
			//we want CAB in the library catalog field, not in archive
			item.archive = "";
			item.attachments.push({
				title: "Snapshot",
				document: doc
			});
			item.complete();
		});
		translator.translate();
		});

}