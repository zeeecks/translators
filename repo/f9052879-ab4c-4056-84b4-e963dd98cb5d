// MARC retrieval code: run the MARC import translator, then perform a
// few adjustments to the output by looking things up in the MARC
// record

// scrapeMARC function, overall design based on Finna translator
const scrapeMARC = (doc, url) => {
	// look up all hits for a MARC field in a MARC record
	const lookupValues = (key, table) => {
		// starting position of the content of a record
		const basePos = table => parseInt(table.substring(12, 17));
		// directory substring of a MARC record
		const rawDirectory = table => table.substring(24, basePos(table));
		// the MARC directory as an association list
		const directory = (table) => {
			const raw = rawDirectory(table);
			const twelves = raw.match(/.{12}/g);
			const processEntry = (str) => {
				const field = str.substring(0, 3);
				const valueLength = parseInt(str.substring(3, 7));
				const valuePos = parseInt(str.substring(7, 12));
				return [field, valueLength, valuePos];
			};
			return twelves.map(processEntry);
		};
		// for any MARC field, return the length and starting position of
		// the value
		const lookupInDirectory = (key, threes) => {
			const assocs = threes.filter(three => three[0] == key);
			return assocs.map(x => x.slice(1));
		};
		// the data portion of a MARC record
		const dataPortion = table.substring(basePos(table));
		// the information needed to retrieve all values for a given field
		const fields = lookupInDirectory(key, directory(table));
		// retrieve the value for a single length and position
		const lookupValue = ([l, s]) => dataPortion.substring(s, l + s - 1).trim();
		return fields.map(lookupValue);
	};

	// look up the subfields under all the values associated with a
	// given field
	const lookupSubfields = (key, subfield, table) => {
		// look up subfield values for each field, length, and start index
		const subfields = subfield => (value) => {
			const startswith = chr => str => str[0] === chr;
			const values = value.split('\x1F');
			const correctValues = values.filter(startswith(subfield));
			return correctValues.map(v => v.substring(1));
		};
		// all the values associated with the input MARC field
		const values = lookupValues(key, table);
		// flatten a list of lists
		const flatten = arr => arr.reduce((acc, elm) => acc.concat(elm), []);
		// return a simple list of all field/subfield values
		return flatten(values.map(subfields(subfield)));
	};

	// predicate saying whether input field is present in a MARC record
	const fieldExists = (key, table) => {
		const values = lookupValues(key, table);
		return values.length !== 0;
	};

	
	// custom UChicago tweaks to the return of the Zotero MARC translator
	const customizeMARC = (doc, item, marc) => {
		// put catalog URL in the entry
		const addUrl = item => item.url = doc.location.href;

		// replace general call number with UChicago-internal call number
		const updateCN = (item) => {
			const callNumbers = lookupSubfields('928', 'a', marc);
			if (callNumbers.length === 1) {
				item.callNumber = callNumbers[0];
			}
		};

		// if there's a 502 field, it should be a thesis
		const isDissertation = marc => fieldExists('502', marc);

		// correct errors in identifying dissertations, maps,
		// manuscripts, and films
		const fixItemType = (item) => {
			// if the record type is 'p', it's a manuscript
			const isManuscript = marc => marc.substring(6, 7) == 'p';
			// if the item type is film, it's a film
			const isFilm = item => item.itemType === 'film';
			// if the record type is 'e', it's a map
			const isMap = marc => marc.substring(6, 7) == 'e';

			if (isDissertation(marc)) {
				// a dissertation is a 'thesis'
				item.itemType = "thesis";
			}
			else if (isManuscript(marc)) {
				// a manuscript is a 'manuscript';
				item.itemType = "manuscript";
			}
			else if (isFilm(item)) {
				// a film is a 'videoRecording' since we don't have
				// any film prints
				item.itemType = "videoRecording";
			}
			else if (isMap(marc)) {
				// a map is a 'map';
				item.itemType = "map";
			}
		};

		// relocate 264|b of a dissertation to the 'archive'
		// Zotero field
		const archivePublisher = (item) => {
			const publisher = lookupSubfields('264', 'b', marc);
			if (isDissertation(marc) && publisher.length === 1) {
				item.archive = publisher[0];
			}
		};

		// make 710|a field into the publisher of a dissertation
		const makeUniversityPublisher = (item) => {
			// does 710|e say 'degree granting institution.'?
			const degreeGranting = lookupSubfields('710', 'e', marc);
			let isDG = false;
			if (degreeGranting.length === 1) {
				isDG = degreeGranting[0] == 'degree granting institution.';
			}
			// is there a 710|a MARC field?
			const university = lookupSubfields('710', 'a', marc);
			// if both conditions hold, 710|a becomes the publisher
			if (isDissertation(marc) && isDG && university.length === 1) {
				// strip possible trailing period from the MARC field
				item.publisher = university[0].replace(/([a-z])\.\s*$/, '$1');
			}
		};

		// perform the fixes
		addUrl(item);
		fixItemType(item);
		updateCN(item);
		archivePublisher(item);
		makeUniversityPublisher(item);
	};
	
	// this part is based on the Finna translator code
	let cleanURL = url.replace(/[#?].*$/, '').replace(/\/$/, '');
	let marcURL = cleanURL + '/Export?style=MARC';
	
	// use MARC import translator to ingest binary MARC records
	ZU.doGet(marcURL, function (marcData) {
		var success = false;
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("a6ee60df-1ddc-4aae-bb25-45e0537be973");
		translator.setString(marcData);
		translator.setHandler('itemDone', function (_, item) {
			if (item.place) {
				item.place = item.place.replace(/\[[^[]+\]/, '');
			}
		
			if (item.publisher) {
				item.publisher = item.publisher.replace(/&amp;/g, '&');
			}
			success = true;

			// apply the above UChicago customizations
			customizeMARC(doc, item, marcData);
			item.complete();
		});

		translator.setHandler('done', () => {});
		translator.translate();
	});
};

const getSearchResults = (doc) => {
	// get every search result DOM element
	const rowNodes = doc.querySelectorAll('li[id^=result]');
	// make the node list into an array
	const a = Array.from(rowNodes);
	let obj = {};
	// extract information from each li element for output
	const buildOutput = (r) => {
		const linkElement = r.querySelector('.title.getFull');
		const entryUrl = linkElement.href;
		if (!linkElement) return;
		const title = ZU.trimInternal(linkElement.textContent);
		if (entryUrl && title) {
			obj[entryUrl] = title;
		}
	};
	a.map(buildOutput);
	return obj;
};

const detectWeb = (doc, url) => {
	// VuFind URL patterns starting with 'Record' are for single items
	if (url.includes('vufind/Record')) {
		if (doc.querySelector('.format.video')) {
			return 'videoRecording';
		}
		else if (doc.querySelector('.format.dissertations')) {
			return 'thesis';
		}
		else if (doc.querySelector('.format.archivesmanuscripts')) {
			return 'manuscript';
		}
		else if (doc.querySelector('.format.audio')) {
			return 'audioRecording';
		}
		else if (doc.querySelector('.format.map')) {
			return 'map';
		}
		else {
			return 'book';
		}
		// VuFind URL patterns starting with 'Search' are for search results
	}
	else if (url.includes('vufind/Search/Results')) {
		return 'multiple';
		// the translator should do nothing on every other URL pattern
	}
	else {
		return false;
	}
};

const doWeb = (doc, url) => {
	if (detectWeb(doc, url) == 'multiple') {
		// ingest multiple MARC records
		Zotero.selectItems(getSearchResults(doc), (items) => {
			if (items) {
				let itemURLs = Object.keys(items);
				itemURLs.map(url => scrapeMARC(doc, url));
			}
		});
	}
	else {
		// ingest single MARC record
		scrapeMARC(doc, url);
	}
};