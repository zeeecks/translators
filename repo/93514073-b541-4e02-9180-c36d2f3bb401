/* CrossRef uses unixref; documentation at https://data.crossref.org/reports/help/schema_doc/unixref1.1/unixref1.1.html */


/** ********************
 * Utilitiy Functions *
 **********************/

function innerXML(n) {
	var escapedXMLcharacters = {
		'&amp;': '&',
		'&quot;': '"',
		'&lt;': '<',
		'&gt;': '>'
	};
	return n.innerHTML // outer XML
		.replace(/\n/g, "")
		.replace(/(&quot;|&lt;|&gt;|&amp;)/g,
			function (str, item) {
				return escapedXMLcharacters[item];
			}
		);
}

var markupRE = /<(\/?)(\w+)[^<>]*>/gi;
var supportedMarkup = ['i', 'b', 'sub', 'sup', 'span', 'sc'];
var transformMarkup = {
	scp: {
		open: '<span style="font-variant:small-caps;">',
		close: '</span>'
	}
};
function removeUnsupportedMarkup(text) {
	return text.replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g, '$1') // Remove CDATA markup
		.replace(markupRE, function (m, close, name) {
			if (supportedMarkup.includes(name.toLowerCase())) {
				return m;
			}

			var newMarkup = transformMarkup[name.toLowerCase()];
			if (newMarkup) {
				return close ? newMarkup.close : newMarkup.open;
			}

			return '';
		});
}


function fixAuthorCapitalization(string) {
	// Try to use capitalization function from Zotero Utilities,
	// because the current one doesn't support unicode names.
	// Can't fix this either because ZU.XRegExp.replace is
	// malfunctioning when calling from translators.
	if (ZU.capitalizeName) return ZU.capitalizeName(string);
	if (typeof string === "string" && string.toUpperCase() === string) {
		string = string.toLowerCase().replace(/\b[a-z]/g, function (m) {
			return m[0].toUpperCase();
		});
	}
	return string;
}

function parseCreators(node, item, typeOverrideMap) {
	var contributors = ZU.xpath(node, 'contributors/organization | contributors/person_name');
	if (!contributors.length) {
		contributors = ZU.xpath(node, 'organization | person_name');
	}
	for (var contributor of contributors) {
		var creatorXML = contributor;
		var creator = {};

		var role = creatorXML.getAttribute("contributor_role");
		if (typeOverrideMap && typeOverrideMap[role] !== undefined) {
			creator.creatorType = typeOverrideMap[role];
		}
		else if (role === "author" || role === "editor" || role === "translator") {
			creator.creatorType = role;
		}
		else {
			creator.creatorType = "contributor";
		}

		if (!creator.creatorType) continue;

		if (creatorXML.nodeName === "organization") {
			creator.fieldMode = 1;
			creator.lastName = creatorXML.textContent;
		}
		else if (creatorXML.nodeName === "person_name") {
			creator.firstName = fixAuthorCapitalization(ZU.xpathText(creatorXML, 'given_name'));
			creator.lastName = fixAuthorCapitalization(ZU.xpathText(creatorXML, 'surname'));
			if (!creator.firstName) creator.fieldMode = 1;
		}
		item.creators.push(creator);
	}
}

function parseDate(pubDateNode) {
	if (pubDateNode.length) {
		var year = ZU.xpathText(pubDateNode[0], 'year');
		var month = ZU.xpathText(pubDateNode[0], 'month');
		var day = ZU.xpathText(pubDateNode[0], 'day');
		
		if (year) {
			if (month) {
				if (day) {
					return year + "-" + month + "-" + day;
				}
				else {
					return month + "/" + year;
				}
			}
			else {
				return year;
			}
		}
		else return null;
	}
	else return null;
}


function detectImport() {
	var line;
	var i = 0;
	while ((line = Zotero.read()) !== false) {
		if (line !== "") {
			if (line.includes("<crossref>")) {
				return true;
			}
			else if (i++ > 7) {
				return false;
			}
		}
	}
	return false;
}


function doImport() {
	// XPath does not give us the ability to use the same XPaths regardless of whether or not
	// there is a namespace, so we add an element to make sure that there will always be a
	// namespace.

	var doc = Zotero.getXML();
	
	var doiRecord = ZU.xpath(doc, "//doi_records/doi_record");
	//	Z.debug(doiRecord.length)
	// ensure this isn't an error
	var errorString = ZU.xpathText(doiRecord, 'crossref/error');
	if (errorString !== null) {
		throw errorString;
	}

	var itemXML, item, refXML, metadataXML, seriesXML;
	if ((itemXML = ZU.xpath(doiRecord, 'crossref/journal')).length) {
		item = new Zotero.Item("journalArticle");
		refXML = ZU.xpath(itemXML, 'journal_article');
		metadataXML = ZU.xpath(itemXML, 'journal_metadata');

		item.publicationTitle = ZU.xpathText(metadataXML, 'full_title[1]');
		item.journalAbbreviation = ZU.xpathText(metadataXML, 'abbrev_title[1]');
		item.volume = ZU.xpathText(itemXML, 'journal_issue/journal_volume/volume');
		item.issue = ZU.xpathText(itemXML, 'journal_issue/journal_volume/issue');
		// Sometimes the <issue> tag is not nested inside the volume tag; see 10.1007/BF00938486
		if (!item.issue) item.issue = ZU.xpathText(itemXML, 'journal_issue/issue');
	}
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/report-paper')).length) {
		// Report Paper
		// Example: doi: 10.4271/2010-01-0907
		
		item = new Zotero.Item("report");
		refXML = ZU.xpath(itemXML, 'report-paper_metadata');
		if (refXML.length === 0) {
			// Example doi: 10.1787/5jzb6vwk338x-en
		
			refXML = ZU.xpath(itemXML, 'report-paper_series_metadata');
			seriesXML = ZU.xpath(refXML, 'series_metadata');
		}
		metadataXML = refXML;

		item.reportNumber = ZU.xpathText(refXML, 'publisher_item/item_number');
		if (!item.reportNumber) item.reportNumber = ZU.xpathText(refXML, 'volume');
		item.institution = ZU.xpathText(refXML, 'publisher/publisher_name');
		item.place = ZU.xpathText(refXML, 'publisher/publisher_place');
	}
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/book')).length) {
		// Book chapter
		// Example: doi: 10.1017/CCOL0521858429.016
		
		// Reference book entry
		// Example: doi: 10.1002/14651858.CD002966.pub3
		
		// Entire edite book. This should _not_ be imported as bookSection
		// Example: doi: 10.4135/9781446200957
		
		var bookType = itemXML[0].hasAttribute("book_type") ? itemXML[0].getAttribute("book_type") : null;
		var componentType = ZU.xpathText(itemXML[0], 'content_item/@component_type');
		// is this an entry in a reference book?
		var isReference = (bookType == "reference"
				&& ["chapter", "reference_entry", "other"].includes(componentType))
			|| (bookType == "other"
				&& ["chapter", "reference_entry"].includes(componentType));

		// for items that are entry in reference books OR edited book types that have some type of a chapter entry.
		if ((bookType === "edited_book" && componentType) || isReference) {
			item = new Zotero.Item("bookSection");
			refXML = ZU.xpath(itemXML, 'content_item');

			if (isReference) {
				metadataXML = ZU.xpath(itemXML, 'book_metadata');
				if (!metadataXML.length) metadataXML = ZU.xpath(itemXML, 'book_series_metadata');
				// TODO: Check book_set_metadata here too, as we do below?

				item.bookTitle = ZU.xpathText(metadataXML, 'titles[1]/title[1]');
				item.seriesTitle = ZU.xpathText(metadataXML, 'series_metadata/titles[1]/title[1]');

				var metadataSeriesXML = ZU.xpath(metadataXML, 'series_metadata');
				if (metadataSeriesXML.length) parseCreators(metadataSeriesXML, item, { editor: "seriesEditor" });
			}
			else {
				metadataXML = ZU.xpath(itemXML, 'book_series_metadata');
				if (!metadataXML.length) metadataXML = ZU.xpath(itemXML, 'book_metadata');
				item.bookTitle = ZU.xpathText(metadataXML, 'series_metadata/titles[1]/title[1]');
				if (!item.bookTitle) item.bookTitle = ZU.xpathText(metadataXML, 'titles[1]/title[1]');
			}

			// Handle book authors
			parseCreators(metadataXML, item, { author: "bookAuthor" });
		// Book
		}
		else {
			item = new Zotero.Item("book");
			refXML = ZU.xpath(itemXML, 'book_metadata');
			// Sometimes book data is in book_series_metadata
			// doi: 10.1007/978-1-4419-9164-5
			
			// And sometimes in book_set_metadata
			// doi: 10.7551/mitpress/9780262533287.003.0006
			
			if (!refXML.length) refXML = ZU.xpath(itemXML, 'book_series_metadata');
			if (!refXML.length) refXML = ZU.xpath(itemXML, 'book_set_metadata');
			metadataXML = refXML;
			seriesXML = ZU.xpath(refXML, 'series_metadata');
		}

		item.place = ZU.xpathText(metadataXML, 'publisher/publisher_place');
	}
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/standard')).length) {
		item = new Zotero.Item("report");
		refXML = ZU.xpath(itemXML, 'standard_metadata');
		metadataXML = ZU.xpath(itemXML, 'standard_metadata');
	}
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/conference')).length) {
		item = new Zotero.Item("conferencePaper");
		refXML = ZU.xpath(itemXML, 'conference_paper');
		metadataXML = ZU.xpath(itemXML, 'proceedings_metadata');
		seriesXML = ZU.xpath(metadataXML, 'proceedings_metadata');

		item.publicationTitle = ZU.xpathText(metadataXML, 'proceedings_title');
		item.place = ZU.xpathText(itemXML, 'event_metadata/conference_location');
		item.conferenceName = ZU.xpathText(itemXML, 'event_metadata/conference_name');
	}

	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/database')).length) {
		item = new Zotero.Item("report"); // should be dataset
		refXML = ZU.xpath(itemXML, 'dataset');
		item.extra = "Type: dataset";
		metadataXML = ZU.xpath(itemXML, 'database_metadata');
		
		var pubDate = ZU.xpath(refXML, 'database_date/publication_date');
		if (!pubDate.length) pubDate = ZU.xpath(metadataXML, 'database_date/publication_date');
		item.date = parseDate(pubDate);
		
		if (!ZU.xpathText(refXML, 'contributors')) {
			parseCreators(metadataXML, item);
		}
		if (!ZU.xpathText(metadataXML, 'publisher')) {
			item.institution = ZU.xpathText(metadataXML, 'institution/institution_name');
		}
	}
	
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/dissertation')).length) {
		item = new Zotero.Item("thesis");
		item.date = parseDate(ZU.xpath(itemXML, "approval_date[1]"));
		item.university = ZU.xpathText(itemXML, "institution/institution_name");
		item.place = ZU.xpathText(itemXML, "institution/institution_place");
		var type = ZU.xpathText(itemXML, "degree");
		if (type) item.thesisType = type.replace(/\(.+\)/, "");
	}
	
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/posted_content')).length) {
		item = new Zotero.Item("report"); // should be preprint
		item.type = ZU.xpathText(itemXML, "./@type");
		item.institution = ZU.xpathText(itemXML, "group_title");
		item.date = parseDate(ZU.xpath(itemXML, "posted_date"));
	}
	
	else if ((itemXML = ZU.xpath(doiRecord, 'crossref/peer_review')).length) {
		item = new Zotero.Item("manuscript"); // is this the best category
		item.date = parseDate(ZU.xpath(itemXML, "reviewed_date"));
		if (ZU.xpath(itemXML, "/contributors/anonymous")) {
			item.creators.push({ lastName: "Anonymous Reviewer", fieldMode: 1, creatorType: "author" });
		}
		item.type = "peer review";
		var reviewOf = ZU.xpathText(itemXML, "//related_item/inter_work_relation");
		if (reviewOf) {
			var identifierType = ZU.xpathText(itemXML, "//related_item/inter_work_relation/@identifier-type");
			var identifier;
			if (identifierType == "doi") {
				identifier = "<a href=\"https://doi.org/" + reviewOf + "\">https://doi.org/" + reviewOf + "</a>";
			}
			else if (identifierType == "url") {
				identifier = "<a href=\"" + reviewOf + "\">" + reviewOf + "</a>";
			}
			else {
				identifier = reviewOf;
			}
			var noteText = "Review of " + identifier;
			// Z.debug(noteText);
			item.notes.push(noteText);
		}
	}
	
	else {
		item = new Zotero.Item("document");
	}


	if (!refXML || !refXML.length) {
		refXML = itemXML;
	}

	if (!metadataXML || !metadataXML.length) {
		metadataXML = refXML;
	}

	item.abstractNote = ZU.xpathText(refXML, 'description|abstract');
	item.language = ZU.xpathText(metadataXML, './@language');
	item.ISBN = ZU.xpathText(metadataXML, 'isbn');
	item.ISSN = ZU.xpathText(metadataXML, 'issn');
	item.publisher = ZU.xpathText(metadataXML, 'publisher/publisher_name');

	item.edition = ZU.xpathText(metadataXML, 'edition_number');
	if (!item.volume) item.volume = ZU.xpathText(metadataXML, 'volume');
	

	parseCreators(refXML, item, (item.itemType == 'bookSection' ? { editor: null } : "author"));

	if (seriesXML && seriesXML.length) {
		parseCreators(seriesXML, item, { editor: "seriesEditor" });
		item.series = ZU.xpathText(seriesXML, 'titles[1]/title[1]');
		item.seriesNumber = ZU.xpathText(seriesXML, 'series_number');
		item.reportType = ZU.xpathText(seriesXML, 'titles[1]/title[1]');
	}
	// prefer article to journal metadata and print to other dates
	var pubDateNode = ZU.xpath(refXML, 'publication_date[@media_type="print"]');
	if (!pubDateNode.length) pubDateNode = ZU.xpath(refXML, 'publication_date');
	if (!pubDateNode.length) pubDateNode = ZU.xpath(metadataXML, 'publication_date[@media_type="print"]');
	if (!pubDateNode.length) pubDateNode = ZU.xpath(metadataXML, 'publication_date');

	
	if (pubDateNode.length) {
		item.date = parseDate(pubDateNode);
	}

	var pages = ZU.xpath(refXML, 'pages[1]');
	if (pages.length) {
		item.pages = ZU.xpathText(pages, 'first_page[1]');
		var lastPage = ZU.xpathText(pages, 'last_page[1]');
		if (lastPage) item.pages += "-" + lastPage;
	}
	else {
		// use article Number instead
		item.pages = ZU.xpathText(refXML, 'publisher_item/item_number');
	}

	item.DOI = ZU.xpathText(refXML, 'doi_data/doi');
	// add DOI to extra for unsupprted items
	if (item.DOI && !ZU.fieldIsValidForType("DOI", item.itemType)) {
		if (item.extra) {
			item.extra += "\nDOI: " + item.DOI;
		}
		else {
			item.extra = "DOI: " + item.DOI;
		}
	}
	item.url = ZU.xpathText(refXML, 'doi_data/resource');
	var title = ZU.xpath(refXML, 'titles[1]/title[1]')[0];
	if (!title && metadataXML) {
		title = ZU.xpath(metadataXML, 'titles[1]/title[1]')[0];
	}
	if (title) {
		item.title = ZU.trimInternal(
			removeUnsupportedMarkup(innerXML(title))
		);
		var subtitle = ZU.xpath(refXML, 'titles[1]/subtitle[1]')[0];
		if (subtitle) {
			item.title += ': ' + ZU.trimInternal(
				removeUnsupportedMarkup(innerXML(subtitle))
			);
		}
	}
	if (!item.title || item.title == "") {
		item.title = "[No title found]";
	}
	// Zotero.debug(JSON.stringify(item, null, 4));

	// check if there are potential issues with character encoding and try to fix it
	// e.g. 10.1057/9780230391116.0016 (en dash in title is presented as <control><control>â)
	for (var field in item) {
		if (typeof item[field] != 'string') continue;
		// check for control characters that should never be in strings from CrossRef
		if (/[\u007F-\u009F]/.test(item[field])) {
			item[field] = decodeURIComponent(escape(item[field]));
		}
	}
	item.complete();
}