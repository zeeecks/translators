const preprintType = ZU.fieldIsValidForType('title', 'preprint')
	? 'preprint'
	: 'report';

function detectWeb(doc, url) {
	if (text(doc, 'h1#preprintTitle')) {
		return preprintType;
	}
	else if (url.includes("discover?") && getSearchResults(doc, true)) {
		return "multiple";
	}
	Z.monitorDOMChanges(doc.body);
	return false;
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	// The Preprint search on OSF includes other preprints such as PeerJ and RePec
	var supportedSites = /^https?:\/\/(osf\.io|psyarxiv\.com|arabixiv\.org|biohackrxiv\.org|eartharxiv\.org|ecoevorxiv\.org|ecsarxiv\.org|edarxiv\.org|engrxiv\.org|frenxiv\.org|indiarxiv\.org|mediarxiv\.org|paleorxiv\.org)/;
	var rows = doc.querySelectorAll('.search-result h4>a');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title || !supportedSites.test(href)) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.doGet(constructAPIURL(Object.keys(items)), osfAPIImport);
		});
	}
	else {
		scrape(doc, url);
	}
}


// takes and array of preprint URLs, extracts the ID and constructs an API call to OSF
function constructAPIURL(urls) {
	var ids = [];
	for (let url of urls) {
		let id;
		if (url.match(/\.(io|com|org)\/([a-z0-9]+)/)) {
			id = url.match(/\.(?:io|com|org)\/([a-z0-9]+)/)[1];
		}
		if (id) {
			ids.push("https://api.osf.io/v2/preprints/" + id + "/?embed=contributors&embed=provider");
		}
	}
	return ids;
}

function osfAPIImport(text) {
	// Z.debug(text);
	let json = JSON.parse(text);
	let attr = json.data.attributes;
	let embeds = json.data.embeds;
	var item = new Zotero.Item(preprintType);
	// currently we're just doing preprints, but putting this here in case we'll want to handle different OSF
	// item types in the future
	// let type = json.data.type
	item.title = attr.title;
	item.abstractNote = attr.description;
	item.date = attr.date_published;
	item.publisher = embeds.provider.data.attributes.name;
	item.DOI = json.data.links.preprint_doi && ZU.cleanDOI(json.data.links.preprint_doi);
	if (preprintType != 'preprint') {
		item.extra = "type: article";
	}
	item.url = json.data.links.html;
	for (let tag of attr.tags) {
		item.tags.push(tag);
	}

	for (let contributor of embeds.contributors.data) {
		let author = contributor.embeds.users.data.attributes;
		if (author.given_name && author.family_name) {
			// add middle names
			let givenNames = author.given_name + ' ' + author.middle_names;
			item.creators.push({ lastName: author.family_name, firstName: givenNames.trim(), creatorType: "author" });
		}
		else {
			item.creators.push({ lastName: author.full_name, creatorType: "author", fieldMode: 1 });
		}
	}
	if (json.data.relationships.primary_file) {
		let fileID = json.data.relationships.primary_file.links.related.href.replace("https://api.osf.io/v2/files/", "");
		item.attachments.push({ url: "https://osf.io/download/" + fileID, title: "OSF Preprint", mimeType: "application/pdf" });
	}

	item.complete();
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');

	translator.setHandler('itemDone', function (obj, item) {
		if (preprintType != 'preprint') {
			if (item.extra) {
				item.extra += "\ntype: article";
			}
			else {
				item.extra = "type: article";
			}
		}
		// remove Snapshot, which is useless for OSF preprints (plus we should always get a PDF)
		for (let i = item.attachments.length - 1; i >= 0; i--) {
			if (item.attachments[i].title == "Snapshot") {
				item.attachments.splice(i, 1);
			}
		}
		item.libraryCatalog = "OSF Preprints";
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = preprintType;
		trans.doWeb(doc, url);
	});
}