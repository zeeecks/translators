function detectWeb(doc, url) {
	if (/\bkey=(\d+)\b/.test(url)) {
		if (url.includes('/thesis/thesis-view.asp')) {
			return "journalArticle";
		} else if (url.includes('/public2-article.asp')) {
			// these are reports and working paper series but with publicaton name,
			// volume, issue numbers; thus handled as journal articles as well
			return "journalArticle";
		} else if (url.includes('/public3-article.asp')) {
			return "report";
		}
	}
	if (getSearchResults(doc, true)) {
		return "multiple";
	}
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//div[contains(@class, "thesis-info")]/h5/a');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		// exclude no real links
		if (href=="#") continue;
		// exclude links to overview of journal
		if (href.includes("/journal/journal-view")) continue;
		// make sure we have a key to make the risURL
		if (!(/\bkey=(\d+)\b/.test(href))) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}


function scrape(doc, url) {
	var key = url.match(/\bkey=(\d+)\b/)[1];
	var risURL = "/p-common/export_endnote.asp";
	var postData = "atcl_data=" + key + "&export_gubun=EndNote";
	ZU.doPost(risURL, postData, function(text) {
		// Z.debug(text);
		var translator = Zotero.loadTranslator("import");
		translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
		translator.setString(text);
		translator.setHandler("itemDone", function(obj, item) {
			if (url.includes('/public/public3-article')) {
				item.itemType = "report";
			}
			var latin = item.title.match(/[\u{0000}-\u{00FF}]/ug);
			if (latin.length > item.title.length/2 && item.title.toUpperCase() == item.title) {
				item.title = ZU.capitalizeTitle(item.title, true);
			}
			//remove space before colon in title
			item.title = item.title.replace(/\s+:/, ":");
			// sometimes the author tags in RIS are empty and therefore we
			// try to scrape author names also directly
			if (item.creators.length == 0) {
				item.creators = scrapeAuthorsDirectly(doc, url);
			} else {
				// romanized Korean names with first and last name are splitted
				// wrongly into two AU tags in RIS and therefore we scrape
				// author names directly here
				let firstName = item.creators[0].lastName;
				let latinCharacters = firstName.match(/[\u{0000}-\u{00FF}]/ug);
				if (!item.creators[0].firstName && latinCharacters && latinCharacters.length == firstName.length) {
					item.creators = scrapeAuthorsDirectly(doc, url);
				}
			}
			if (item.issue && item.issue == "0") {
				delete item.issue;
			}
			item.language = "ko-KR";
			item.complete();
		});
		translator.translate();
	});
}


function scrapeAuthorsDirectly(doc, url) {
	var creators = [];
	var writers = ZU.xpathText(doc, '//div[@class="writers"]');
	if (writers) {
		var creatorsList = writers.split(',');
		for (var i=0; i<creatorsList.length; i++) {
			let author = creatorsList[i].replace(/^\s*\(\s*/, '').replace(/\s*\)\s*$/, '');
			if (author.includes(' ')) {
				creators.push(ZU.cleanAuthor(author, "author"));
			} else {
				creators.push({
					lastName: author,
					fieldMode: true,
					creatorType: "author"
				});
			}
		}
	} else {
		var authors = ZU.xpathText(doc, '//li[label[text()="저자"]]');
		// e.g. authors = 저자 : Kim, Yoon Tae,  Park, Hyun Suk
		// e.g. authors = 저자 : 이동호,  이재서,  윤숙자,  강병철
		if (authors && authors.includes(':')) {
			var authorsValue = authors.split(':')[1];
			if (authorsValue.includes(',  ')) {
				// two spaces after comma are important here
				var authorsList = authorsValue.split(',  ');
			} else {
				var authorsList = authorsValue.split(',');
 			}
			for (let i=0; i<authorsList.length; i++)  {
				let author = authorsList[i].trim();
				if (author.includes(',')) {
					creators.push(ZU.cleanAuthor(author, "author", true));
				} else {
					creators.push({
						lastName: author,
						fieldMode: true,
						creatorType: "author"
					});
				}
 			}
		}
	}
	return creators;
}