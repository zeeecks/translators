var mappingTypes = {
	'Aufsatz in Zeitschrift' : 'journalArticle',
	'Journal article' : 'journalArticle',
	'Aufsatz in Sammelband' : 'bookSection',
	'Book article' : 'bookSection',
	'Monographie' : 'book',
	'Monograph' : 'book',
	'Sammelband' : 'book',
	'Anthology' : 'book',
	//'Serie' : '',
	//'Series' : '',
	//'Zeitschrift' : '',
	//'Journal' : '',
};

var mapping = {
	'Verfasser' : 'author',
	'Author' : 'author',
	'Beteiligte Pers.' : 'editor',
	'Involved pers.' : 'editor',
	'Körperschaften' : 'organization',
	'Corporation' : 'organization',
	'Titel' : 'title',
	'Title' : 'title',
	//'Original-Titel' : '',
	//'Original title' : '',
	'Sprache' : 'language',
	'Written in' : 'language',
	'Language' : 'language',
	'Erschienen in' : 'publicationTitle',
	'Source' : 'publicationTitle',
	'Jahrgang' : 'volume',
	'Volume' : 'volume', //but only for journalArticle
	'Jahr' : 'date',
	'Year' : 'date',
	'Heft' : 'issue',
	'Issue' : 'issue',
	'Seitenangabe' : 'pages',
	'Page' : 'pages',
	'Serie' : 'series',
	'Series' : 'series',
	'ISBN' : 'ISBN',
	'ISSN' : 'ISSN',
	'Auflage' : 'edition',
	'Edition' : 'edition',
	'Umfang' : 'numPages',
	'Extent' : 'numPages',
	'Ort : Verlag' : 'publisher',
	'Place : Publ.' : 'publisher',
	'Hochschulschrift' : 'note',
	'Academic paper' : 'note',
	'Anmerkung' : 'note',
	'Notes' : 'note',
	'Zusatztitel' : 'subtitle',
	'subtitle' : 'subtitle',
	'Teilband' : 'title',
	//'Volume' : 'title', //but only for books (will be corrected in the cleanup section if necessary)
	'Gesamtwerk' : 'note',
	'Part of' : 'note',
};

function detectWeb(doc, url) {
	if (url.toLowerCase().indexOf('/titelaufnahme.xml?') != -1 ) {//single item
		var type = doc.getElementsByClassName('karteilegende')[0];
		if (type && mappingTypes[type.textContent]) {
			return mappingTypes[type.textContent];
		} else {
			Z.debug('not recognized: ' + type);
		}
	} else if (getSearchResults(doc, true)) {
		return "multiple";
	}
}

//for testing in detectWeb use true for checkOnly
//for the items in doWeb use false for checkOnly
//then the items will be an object containing the href/title pairs
function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = ZU.xpath(doc, '//table[@class="fliesstext"]//td/a[@class="noDeco"]');
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = new Array();
			for (var i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
		});
	} else {
		scrape(doc, url);
	}
}

//extracts the first number of a string
//e.g. string = "387 S., 1 CD-ROM (12 cm)"
// --> return "387"
function extractFirstNumber(string) {
	return string.replace(/^\D*(\d+).*$/,'$1');
}

function scrape(doc, url) {
	var item = new Zotero.Item(detectWeb(doc, url));
	
	var key;
	var keyValuePairs = [];
	var karteilegende = doc.getElementsByClassName('karteilegende');
	for (var j=1; j<karteilegende.length; j++) {
		if (!karteilegende[j].textContent && (key == 'Titel' || key == 'Title') ) {
			key = "Zusatztitel";
		} else {
			key = karteilegende[j].textContent;
		}
		var sibling = karteilegende[j].parentNode.getElementsByTagName('td');
		
		if (sibling.length > 2) {//filter out the empty values
			var value = sibling[2].textContent;
			if (value == 'Hinweise zum Inhalt' || value == 'Selections from contents') {
				var link = sibling[2].getElementsByTagName('a')[0];
				if (link) {
					item.attachments.push({
						title : value,
						url : link.href,
						snapshot : false
					});
				}
			} else {
				if (keyValuePairs[key]) {
					keyValuePairs[key] += ' : ' + value;
				} else {
					keyValuePairs[key] = value;
				}
			}

		}
	}
	
	//creators
	var creatorTypes = ['Verfasser', 'Beteiligte Pers.', 'Author', 'Involved pers.'];
	for (var k=0; k<creatorTypes.length; k++) {
		if (keyValuePairs[creatorTypes[k]]) {
			var creatorsList = keyValuePairs[creatorTypes[k]].split(';');
			for (var j=0; j<creatorsList.length; j++) {
				item.creators.push ( ZU.cleanAuthor(creatorsList[j], mapping[creatorTypes[k]], true) );
			}
			delete keyValuePairs[creatorTypes[k]];
		}
	}
	//corporations (Körperschaften)
	if (keyValuePairs['Körperschaften']) {//
		var creatorsList = keyValuePairs['Körperschaften'].split(';');
		for (var j=0; j<creatorsList.length; j++) {
			item.creators.push ( { lastName : creatorsList[j], creatorType : 'contributor', fieldMode : 1 } );
		}
		delete keyValuePairs['Körperschaften'];
	}
	if (keyValuePairs['Corporation']) {//
		var creatorsList = keyValuePairs['Corporation'].split(';');
		for (var j=0; j<creatorsList.length; j++) {
			item.creators.push ( { lastName : creatorsList[j], creatorType : 'contributor', fieldMode : 1 } );
		}
		delete keyValuePairs['Corporation'];
	}
	//notes
	var note = '';
	for (key in mapping) {
		if (mapping[key] == 'note' && keyValuePairs[key]) {
			note += key + ' = ' + keyValuePairs[key] + '\n';
			delete keyValuePairs[key];
		}
	}
	if (note) {
		item.notes.push( {note: note});
	}
	//standard mapping for single fields
	for (key in keyValuePairs) {
		item[mapping[key]] = keyValuePairs[key];
	}
	
	//cleanup
	if (item.volume && !item.title) {//for individual books with different volumes
		item.title = item.volume;
		delete item.volume;
	}
	if (item.subtitle) {
		item.title += ': ' + item.subtitle;
		delete item.subtitle;
	}
	if (item.date && item.date.indexOf('/') != -1) {//e.g. item.date = "1/10/1992" dd?/mm?/yyyy
		var dateParts = item.date.split('/');
		if (dateParts.length == 3) {
			dateParts[1] = ZU.lpad(dateParts[1], '0', 2);
			dateParts[0] = ZU.lpad(dateParts[0], '0', 2);
			item.date = dateParts[2] + '-' + dateParts[1] + '-' + dateParts[0];
		}
	}
	if (item.numPages) {//e.g. item.numPages = "300 S." or " XXXVII, 551 S."
		item.numPages = extractFirstNumber(item.numPages);
	}
	if (item.issue) {//e.g. item.numPages = "Nr.229"
		item.issue = extractFirstNumber(item.issue);
	}
	if (item.publisher && item.publisher.indexOf(':') != -1) {//e.g item.publisher = "Tübingen: Narr"
		var splitPosition = item.publisher.indexOf(':');
		item.place = item.publisher.substr(0,splitPosition);
		item.publisher = item.publisher.substr(splitPosition+1);
	}
	if (item.series && item.series.indexOf(';') != -1) {
		var splitPosition = item.series.indexOf(';');
		item.seriesNumber = item.series.substr(splitPosition+1);
		item.series = item.series.substr(0,splitPosition);
	}
	if (url.indexOf('blldb-online') != -1) {
		item.libraryCatalog = 'BLLDB (semantics Visual Library)';
	}
	if (url.indexOf('bdsl-online') != -1) {
		item.libraryCatalog = 'BDSL (semantics Visual Library)';
	}
	
	item.attachments.push({
		title : 'Snapshot',
		document : doc
	});
	
	item.complete();
}

//The tests cannot be automated, because the vid is only working for the current session
//and there seems to be no permanent link to the entries.
//Manual update with Scafold is possible:
//1. Open the webpage in your web browser and follow the redirect
//2. Copy the new vid value
//3. Replace the vid value in the url in the test case(s)
//4. Save, close Scaffold and open it again
//5. Run test case