function getLinkedData(doc) {
	const linkedData = [...doc.querySelectorAll('script[type="application/ld+json"]')]
		.map(x => JSON.parse(x.innerText))
		.find(x => ("@type" in x && !(["BreadcrumbList"].includes(x["@type"]))));
	return linkedData;
}

function detectWeb(doc) {
	const linkedData = getLinkedData(doc);
	const pageType = linkedData ? linkedData["@type"] : null;
	switch (pageType) {
		case "Article":
		case "Product":
			return "magazineArticle";
		case "NewsArticle":
			return "newspaperArticle";
		case "WebPage":
		default:
			if (getSearchResults(doc, true)) {
				return "multiple";
			}
			break;
	}

	return false;
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48'); // embedded metadata
	translator.setDocument(doc);

	translator.setHandler('itemDone', function (obj, item) {
		const linkedData = getLinkedData(doc);
		if (linkedData && linkedData.publisher.name) item.publicationTitle = linkedData.publisher.name;

		for (const tag of doc.querySelectorAll('*#articleTag .tag a')) {
			item.tags.push(tag.textContent);
		}

		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = detectWeb(doc, url);
		trans.doWeb(doc, url);
	});
}


function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('a.article-link');
	for (const row of rows) {
		const href = row.href;
		const title = ZU.trimInternal(text(row, '.article-name'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), (items) => {
			if (!items) {
				return true;
			}
			const articles = [];
			for (const i in items) {
				articles.push(i);
			}
			ZU.processDocuments(articles, scrape);
			return true;
		});
	}
	else {
		scrape(doc, url);
	}
}