function detectWeb(doc, url) {
	if (getSearchResults(doc, true)) {
		return "multiple";
	}
	else if (url.includes('/paper/') && /-Paper\.pdf$|-Abstract\.html$/.test(url)) {
		return "conferencePaper";
	}
	return false;
}

function scrape(doc, url) {
	// Unfortunately, the abstract isn't semantically marked at all; this is the best we can do
	let abstract = ZU.xpathText(doc, '//h4[text()="Abstract"]/following-sibling::p[2]');
	let pdfURL = attr(doc, 'a[href$="-Paper.pdf"]', 'href');
	let bibURL = attr(doc, 'a[href$="-Bibtex.bib"], a[href$="/bibtex"]', 'href');
	if (bibURL) {
		ZU.doGet(bibURL, function (text) {
			let translator = Zotero.loadTranslator("import");
			// BibTeX
			translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
			translator.setString(text);
			translator.setHandler("itemDone", function (obj, item) {
				// NeurIPS puts journal/proceedings editors in the BibTeX,
				// but we don't really want them.
				item.creators = item.creators.filter(c => c.creatorType != 'editor');
				
				item.url = url;
				item.abstractNote = abstract;
				item.attachments.push({
					url: pdfURL,
					title: "Full Text PDF",
					mimeType: "application/pdf"
				});
				
				item.complete();
			});
			translator.translate();
		});
	}
	else {
		// fall back to EM for newer items (pre-conference, typically)
		let translator = Zotero.loadTranslator('web');
		// Embedded Metadata
		translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
		translator.setDocument(doc);
		
		translator.setHandler('itemDone', (_obj, item) => {
			item.publisher = "Curran Associates, Inc.";
			item.abstractNote = abstract;
			item.attachments = item.attachments.filter(a => a.title != 'Snapshot');
			item.complete();
		});

		translator.getTranslatorObject(function (trans) {
			trans.itemType = "conferencePaper";
			trans.doWeb(doc, url);
		});
	}
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		let items = getSearchResults(doc, false);
		Zotero.selectItems(items, function (items) {
			if (!items) {
				return;
			}
			ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else if (url.endsWith('-Paper.pdf')) {
		let abstractURL = url
			.replace('/file/', '/hash/')
			.replace('-Paper.pdf', '-Abstract.html');
		ZU.processDocuments(abstractURL, scrape);
	}
	else {
		scrape(doc, url);
	}
}

function getSearchResults(doc, checkOnly) {
	let items = {};
	let found = false;
	let rows = doc.querySelectorAll('li a[href*="/paper/"]');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}