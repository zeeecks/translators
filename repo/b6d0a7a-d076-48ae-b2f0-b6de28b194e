function detectWeb(doc, url) {
	if (!doc.body.textContent.trim()) return false;

	if ((url.includes("_ob=DownloadURL"))
		|| doc.title == "ScienceDirect Login"
		|| doc.title == "ScienceDirect - Dummy"
		|| (url.includes("/science/advertisement/"))) {
		return false;
	}

	if ((url.includes("pdf")
			&& !url.includes("_ob=ArticleURL")
			&& !url.includes("/article/"))
		|| url.search(/\/(?:journal|bookseries|book|handbook)\//) !== -1) {
		if (getArticleList(doc).length > 0) {
			return "multiple";
		}
		else {
			return false;
		}
	}

	if (url.search(/\/search[?/]/) != -1) {
		if (getArticleList(doc).length > 0) {
			return "multiple";
		}
		else if (doc.querySelector('.LoadingOverlay.show')) {
			// monitor and update the toolbar icon when results have loaded
			Z.monitorDOMChanges(doc.querySelector('.results-container'));
			return false;
		}
	}
	if (!url.includes("pdf")) {
		// Book sections have the ISBN in the URL
		if (url.includes("/B978")) {
			return "bookSection";
		}
		else if (getISBN(doc)) {
			if (getArticleList(doc).length) {
				return "multiple";
			}
			else {
				return "book";
			}
		}
		else {
			return "journalArticle";
		}
	}
	return false;
}

function getPDFLink(doc, onDone) {
	// No PDF access ("Get Full Text Elsewhere" or "Check for this article elsewhere")
	if (doc.querySelector('.accessContent') || doc.querySelector('.access-options-link-text') || doc.querySelector('#check-access-popover')) {
		Zotero.debug("PDF is not available");
		onDone();
		return;
	}
	
	// Some pages still have the PDF link available
	var pdfURL = attr(doc, '#pdfLink', 'href');
	if (!pdfURL) pdfURL = attr(doc, '[name="citation_pdf_url"]', 'content');
	if (pdfURL && pdfURL != '#') {
		Z.debug('Found intermediate URL in head: ' + pdfURL);
		parseIntermediatePDFPage(pdfURL, onDone);
		return;
	}
	
	// If intermediate page URL is available, use that directly
	var intermediateURL = attr(doc, '.PdfEmbed > object', 'data');
	if (intermediateURL) {
		Zotero.debug("Found embedded PDF URL: " + intermediateURL);
		if (/[?&]isDTMRedir=(Y|true)/i.test(intermediateURL)) {
			onDone(intermediateURL);
		}
		else {
			parseIntermediatePDFPage(intermediateURL, onDone);
		}
		return;
	}
	
	// Simulate a click on the "Download PDF" button to open the menu containing the link with the URL
	// for the intermediate page, which doesn't seem to be available in the DOM after the page load.
	// This is an awful hack, and we should look out for a better way to get the URL, but it beats
	// refetching the original source. Works and should be imperceptible to users
	// when run from the browser, does not work from non-browser translation
	// environments (e.g. Find Available PDFs in the client). In those cases we
	// fall back to approach #3: embedded JSON metadata.
	var pdfLink = doc.querySelector('#pdfLink');
	if (pdfLink) {
		// Just in case
		try {
			pdfLink.click();
			intermediateURL = attr(doc, '.PdfDropDownMenu a', 'href');
			doc.body.click();
		}
		catch (e) {
			Zotero.debug(e, 2);
		}
		if (intermediateURL) {
			// Zotero.debug("Intermediate PDF URL from drop-down: " + intermediateURL);
			parseIntermediatePDFPage(intermediateURL, onDone);
			return;
		}
	}
	
	// On some institutional networks with access to ScienceDirect, the site
	// serves JSON metadata probably used to preload dynamic content without a
	// separate network request. If we find it, we can take advantage of it to
	// grab the PDF url's parts directly, constructing it in the same way that
	// the site's frontend JavaScript would.
	var json = text(doc, 'script[type="application/json"]');
	if (json) {
		try {
			json = JSON.parse(json);
			Zotero.debug("Trying to construct PDF URL from JSON data");
			
			let urlMetadata = json.article.pdfDownload.urlMetadata;
			
			let path = urlMetadata.path;
			let pdfExtension = urlMetadata.pdfExtension;
			let pii = urlMetadata.pii;
			let md5 = urlMetadata.queryParams.md5;
			let pid = urlMetadata.queryParams.pid;
			if (path && pdfExtension && pii && md5 && pid){
				pdfURL = `/${path}/${pii}${pdfExtension}?md5=${md5}&pid=${pid}&isDTMRedir=Y`;
				Zotero.debug("Created PDF URL from JSON data: " + pdfURL);
				onDone(pdfURL);
				return;
			}
			else {
				Zotero.debug("Missing elements in JSON data required for URL creation");
			}
		}
		catch (e) {
			Zotero.debug(e, 2);
		}
	}

	// In most cases, appending the suffix seen below to the page's canonical URL
	// should get us directly to the PDF; it'll yield a URL similar to the one
	// created by the JSON but without the md5 and pid parameters. It should be
	// enough to get us through even without those parameters.
	pdfURL = attr(doc, 'link[rel="canonical"]', 'href');
	if (pdfURL) {
		pdfURL = pdfURL + '/pdfft?isDTMRedir=true&download=true';
		Zotero.debug("Trying to construct PDF URL from canonical link: " + pdfURL);
		onDone(pdfURL);
		return;
	}
	
	// If none of that worked for some reason, get the URL from the initial HTML,
	// where it is present, by fetching the page source again. Hopefully this is
	// never actually used.
	var url = doc.location.href;
	Zotero.debug("Refetching HTML for PDF link");
	ZU.processDocuments(url, function (reloadedDoc) {
		var intermediateURL = attr(reloadedDoc, '.pdf-download-btn-link', 'href');
		// Zotero.debug("Intermediate PDF URL: " + intermediateURL);
		if (intermediateURL) {
			parseIntermediatePDFPage(intermediateURL, onDone);
			return;
		}
		onDone();
	});
}


function parseIntermediatePDFPage(url, onDone) {
	// Get the PDF URL from the meta refresh on the intermediate page
	Z.debug('Parsing intermediate page to find redirect: ' + url);
	ZU.doGet(url, function (html) {
		var dp = new DOMParser();
		var doc = dp.parseFromString(html, 'text/html');
		var pdfURL = attr(doc, 'meta[HTTP-EQUIV="Refresh"]', 'CONTENT');
		var otherRedirect = attr(doc, '#redirect-message a', 'href');
		// Zotero.debug("Meta refresh URL: " + pdfURL);
		if (pdfURL) {
			// Strip '0;URL='
			var matches = pdfURL.match(/\d+;URL=(.+)/);
			pdfURL = matches ? matches[1] : null;
		}
		else if (otherRedirect) {
			pdfURL = otherRedirect;
		}
		else if (url.includes('.pdf')) {
			// Sometimes we are already on the PDF page here and therefore
			// can simply use the original url as pdfURL.
			pdfURL = url;
		}
		onDone(pdfURL);
	});
}


function getISBN(doc) {
	var isbn = ZU.xpathText(doc, '//td[@class="tablePubHead-Info"]//span[@class="txtSmall"]');
	if (!isbn) return false;

	isbn = isbn.match(/ISBN:\s*([-\d]+)/);
	if (!isbn) return false;

	return isbn[1].replace(/[-\s]/g, '');
}


function getAbstract(doc) {
	var p = ZU.xpath(doc, '//div[contains(@class, "abstract") and not(contains(@class, "abstractHighlights"))]/p');
	var paragraphs = [];
	for (var i = 0; i < p.length; i++) {
		paragraphs.push(ZU.trimInternal(p[i].textContent));
	}
	return paragraphs.join('\n');
}

// mimetype map for supplementary attachments
// intentionally excluding potentially large files like videos and zip files
var suppTypeMap = {
	pdf: 'application/pdf',
	//	'zip': 'application/zip',
	doc: 'application/msword',
	docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
	xls: 'application/vnd.ms-excel',
	xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
};

// attach supplementary information
function attachSupplementary(doc, item) {
	var links = ZU.xpath(doc, './/span[starts-with(@class, "MMCvLABEL_SRC")]');
	var link, title, url, type, snapshot;
	var attachAsLink = Z.getHiddenPref("supplementaryAsLink");
	for (var i = 0, n = links.length; i < n; i++) {
		link = links[i].firstElementChild;
		if (!link || link.nodeName.toUpperCase() !== 'A') continue;

		url = link.href;
		if (!url) continue;

		title = ZU.trimInternal(link.textContent);
		if (!title) title = 'Supplementary Data';

		type = suppTypeMap[url.substr(url.lastIndexOf('.') + 1).toLowerCase()];
		snapshot = !attachAsLink && type;

		var attachment = {
			title: title,
			url: url,
			mimeType: type,
			snapshot: !!snapshot
		};

		var replaced = false;
		if (snapshot && title.search(/Article plus Supplemental Information/i) != -1) {
			// replace full text PDF
			for (var j = 0, m = item.attachments.length; j < m; j++) {
				if (item.attachments[j].title == "ScienceDirect Full Text PDF") {
					attachment.title = "Article plus Supplemental Information";
					item.attachments[j] = attachment;
					replaced = true;
					break;
				}
			}
		}

		if (!replaced) {
			item.attachments.push(attachment);
		}
	}
}


function processRIS(doc, text) {
	// T2 doesn't appear to hold the short title anymore.
	// Sometimes has series title, so I'm mapping this to T3,
	// although we currently don't recognize that in RIS
	text = text.replace(/^T2\s/mg, 'T3 ');

	// Sometimes PY has some nonsensical value. Y2 contains the correct
	// date in that case.
	if (text.search(/^Y2\s+-\s+\d{4}\b/m) !== -1) {
		text = text.replace(/TY\s+-[\S\s]+?ER/g, function (m) {
			if (m.search(/^PY\s+-\s+\d{4}\b/m) === -1
				&& m.search(/^Y2\s+-\s+\d{4}\b/m) !== -1
			) {
				return m.replace(/^PY\s+-.*\r?\n/mg, '')
					.replace(/^Y2\s+-/mg, 'PY  -');
			}
			return m;
		});
	}

	// Certain authors sometimes have "role" prefixes or are in the wrong order
	// e.g. http://www.sciencedirect.com/science/article/pii/S0065260108602506
	text = text.replace(/^((?:A[U\d]|ED)\s+-\s+)(?:Editor-in-Chief:\s+)?(.+)/mg,
		function (m, pre, name) {
			if (!name.includes(',')) {
				name = name.trim().replace(/^(.+?)\s+(\S+)$/, '$2, $1');
			}

			return pre + name;
		}
	);
	// The RIS sometimes has spaces at the beginning of lines, which break things
	// as of 20170121 e.g. on http://www.sciencedirect.com/science/article/pii/B9780123706263000508 for A2
	// remove them
	text = text.replace(/\n\s+/g, "\n");
	// Z.debug(text)
	var translator = Zotero.loadTranslator("import");
	translator.setTranslator("32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7");
	translator.setString(text);
	translator.setHandler("itemDone", function (obj, item) {
		// issue sometimes is set to 0 for single issue volumes (?)
		if (item.issue === 0) delete item.issue;

		if (item.volume) item.volume = item.volume.replace(/^\s*volume\s*/i, '');

		for (var i = 0, n = item.creators.length; i < n; i++) {
			// add spaces after initials
			if (item.creators[i].firstName) {
				item.creators[i].firstName = item.creators[i].firstName
					.replace(/\.\s*(?=\S)/g, '. ')
					.replace(/\s/g, ' '); // NBSP, etc -> space
			}
			if (item.creators[i].lastName) {
				item.creators[i].lastName = item.creators[i].lastName
					.replace(/\s/g, ' ');
			}
			// fix all uppercase lastnames
			if (item.creators[i].lastName.toUpperCase() == item.creators[i].lastName) {
				item.creators[i].lastName = item.creators[i].lastName.charAt(0) + item.creators[i].lastName.slice(1).toLowerCase();
			}
		}

		// abstract is not included with the new export form. Scrape from page
		if (!item.abstractNote) {
			item.abstractNote = getAbstract(doc);
		}
		if (item.abstractNote) {
			item.abstractNote = item.abstractNote.replace(/^(Abstract|Summary)[\s:\n]*/, "");
		}
		item.attachments.push({
			title: "ScienceDirect Snapshot",
			document: doc
		});

		// attach supplementary data
		if (Z.getHiddenPref && Z.getHiddenPref("attachSupplementary")) {
			try { // don't fail if we can't attach supplementary data
				attachSupplementary(doc, item);
			}
			catch (e) {
				Z.debug("Error attaching supplementary information.");
				Z.debug(e);
			}
		}

		if (item.notes[0]) {
			item.abstractNote = item.notes[0].note;
			item.notes = [];
		}
		if (item.abstractNote) {
			item.abstractNote = item.abstractNote.replace(/^\s*(?:abstract|(publisher\s+)?summary)\s+/i, '');
		}

		if (item.DOI) {
			item.DOI = item.DOI.replace(/^doi:\s+/i, '');
		}
		if (item.ISBN && !ZU.cleanISBN(item.ISBN)) delete item.ISBN;
		if (item.ISSN && !ZU.cleanISSN(item.ISSN)) delete item.ISSN;
		
		item.language = item.language || attr(doc, 'article[role="main"]', 'lang');

		if (item.url && item.url.substr(0, 2) == "//") {
			item.url = "https:" + item.url;
		}

		getPDFLink(doc, function (pdfURL) {
			if (pdfURL) {
				item.attachments.push({
					title: 'ScienceDirect Full Text PDF',
					url: pdfURL,
					mimeType: 'application/pdf',
					proxy: false
				});
			}
			item.complete();
		});
	});
	translator.translate();
}


function getArticleList(doc) {
	let articlePaths = [
		'//table[@class="resultRow"]/tbody/tr/td[2]/a',
		'//table[@class="resultRow"]/tbody/tr/td[2]/h3/a',
		'//td[@class="nonSerialResultsList"]/h3/a',
		'//div[@id="bodyMainResults"]//li[contains(@class,"title")]//a',
		'//h2//a[contains(@class, "result-list-title-link")]',
		'//ol[contains(@class, "article-list") or contains(@class, "article-list-items")]//a[contains(@class, "article-content-title")]',
		'//li[contains(@class, "list-chapter")]//h2//a',
		'//h4[contains(@class, "chapter-title")]/a'
	];
	return ZU.xpath(doc, '('
		+ articlePaths.join('|')
		+ ')[not(contains(text(),"PDF (") or contains(text(), "Related Articles"))]'
	);
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		// search page
		var itemList = getArticleList(doc);
		var items = {};
		for (var i = 0, n = itemList.length; i < n; i++) {
			items[itemList[i].href] = itemList[i].textContent;
		}

		Zotero.selectItems(items, function (selectedItems) {
			if (!selectedItems) return;
			ZU.processDocuments(Object.keys(selectedItems), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function getFormInput(form) {
	var inputs = form.elements;
	var values = {};
	for (var i = 0; i < inputs.length; i++) {
		if (!inputs[i].name) continue;
		values[inputs[i].name] = inputs[i].value;
	}

	return values;
}

function formValuesToPostData(values) {
	var s = '';
	for (var v in values) {
		s += '&' + encodeURIComponent(v) + '=' + encodeURIComponent(values[v]);
	}

	if (!s) {
		Zotero.debug("No values provided for POST string");
		return false;
	}

	return s.substr(1);
}

function scrape(doc, url) {
	// On most page the export form uses the POST method
	var form = ZU.xpath(doc, '//form[@name="exportCite"]')[0];
	if (form) {
		Z.debug("Fetching RIS via POST form");
		var values = getFormInput(form);
		values['citation-type'] = 'RIS';
		values.format = 'cite-abs';
		ZU.doPost(form.action, formValuesToPostData(values), function (text) {
			processRIS(doc, text);
		});
		return;
	}


	// On newer pages, there is an GET formular which is only there if
	// the user click on the export button, but we know how the url
	// in the end will be built.
	form = ZU.xpath(doc, '//div[@id="export-citation"]//button')[0];
	if (form) {
		Z.debug("Fetching RIS via GET form (new)");
		var pii = ZU.xpathText(doc, '//meta[@name="citation_pii"]/@content');
		if (!pii) {
			Z.debug("not finding pii in metatag; attempting to parse URL");
			pii = url.match(/\/pii\/([^#?]+)/);
			if (pii) {
				pii = pii[1];
			}
			else {
				Z.debug("cannot find pii");
			}
		}
		if (pii) {
			let risUrl = '/sdfe/arp/cite?pii=' + pii + '&format=application%2Fx-research-info-systems&withabstract=true';
			Z.debug('Fetching RIS using PII: ' + risUrl);
			ZU.doGet(risUrl, function (text) {
				processRIS(doc, text);
			});
			return;
		}
	}


	// On some older article pages, there seems to be a different form
	// that uses GET
	form = doc.getElementById('export-form');
	if (form) {
		Z.debug("Fetching RIS via GET form (old)");
		let risUrl = form.action
			+ '?export-format=RIS&export-content=cite-abs';
		ZU.doGet(risUrl, function (text) {
			processRIS(doc, text);
		});
		return;
	}

	throw new Error("Could not scrape metadata via known methods");
}