function detectWeb(doc, url) {
	var bodyContent = doc.getElementById('body-content');
	if (bodyContent) {
		Z.monitorDOMChanges(bodyContent, {childList: true});
	}

	if (url.indexOf('/apps/details?id=') !== -1) {
		return "computerProgram";
	}

	if (url.indexOf('/store/apps') !== -1
			|| url.indexOf('&c=apps') !== -1) {
		return cardListFindCards(doc).length ? "multiple" : false;
	}
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) !== "multiple") {
		saveIndividual(doc, url);
		return;
	}

	var cells = cardListFindCards(doc);
	var items = new Object();
	for (var index = 0; index < cells.length; index++) {
		items[cells[index].href] = ZU.trimInternal(cells[index].textContent);
	}

	Z.selectItems(items, function(items) {
		if (!items) return true;
		
		var articles = new Array();
		for (var i in items) {
			articles.push(i);
		}

		ZU.processDocuments(articles, saveIndividual);
	});
}

function cardList(doc) {
	return ZU.xpath(doc, '//div[@class="card-list"]');
}

function cardListFindCards(doc) {
	return ZU.xpath(doc, '//div[contains(@class,"card-list")]//div[contains(@class, "card-content")]//a[@class="title"]');
}

function findProperty(doc, propertyKey) {
	return ZU.xpathText(doc, '//div[contains(@itemprop, "' + propertyKey + '")]');
}

function saveIndividual(doc, url) {
	var item = new Zotero.Item("computerProgram");
	
	item.title = ZU.xpathText(doc, '//h1[contains(@class, "document-title")]');
	
	var author = ZU.xpathText(doc, '//div[contains(@itemprop, "author")]//span[contains(@itemprop, "name")]');
	if (author) {
		item.creators.push(ZU.cleanAuthor(author, "author"));
	}

	item.url = url;
	
	var date = ZU.xpathText(doc, '//div[contains(@itemprop, "datePublished")]');
	if (date) {
		item.date = date.replace(/\s*-\s*/, '');
	}
	item.abstractNote = findProperty(doc, "description");
	
	var screenshots = ZU.xpath(doc, '//img[contains(@itemprop, "screenshot")]');
	for (var index = 0; index < screenshots.length; index++) {
		item.attachments.push({
			url: screenshots[index].src,
			title: "App Screenshot"
		})
	}

	// We exclude "Varies with device"
	var os = findProperty(doc, "operatingSystems").trim();
	item.system = /\d/.test(os) ? "Android " + os : "Android";
	
	var version = findProperty(doc, "softwareVersion");
	// We exlide "Varies with device"
	if (/\d/.test(version)) {
		item.version = version;
	}
	
	item.company = ZU.xpathText(doc, '//div[contains(@itemtype, "http://schema.org/Organization")]//span[contains(@itemprop, "name")]');
	
	item.complete();
}