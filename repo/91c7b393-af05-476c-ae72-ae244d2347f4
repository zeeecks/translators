function detectWeb(doc, url) {
	//The page can change from a search page to a single item page
	//without loading the whole content as a new website, but only
	//parts of the page is disabled by style="display: none". Moreover,
	//it is important that the subtree of search-page is loaded before
	//getSearchResults will succeed, and the subtree of author-page
	//has to be loaded before the detection of the websiteType.
	//Therfore, we need to monitor these DOM changes all the time. 
	Z.monitorDOMChanges(ZU.xpath(doc, '//article[contains(@class, "author-page")]')[0], {subtree: true, attributes: true, attributeFilter: ['style']});
	Z.monitorDOMChanges(ZU.xpath(doc, '//article[contains(@class, "search-page")]')[0], {subtree: true, attributes: true, attributeFilter: ['style']});
	
	//For searches the node of class `search-page` is active and for
	//everything else (details of one paper, journal page, author page,
	//institution page, topic page) the node of class `author-page`
	//is active. However, when switching from one to the other one of them
	//become only inactive with style="display: none".
	var visibility = ZU.xpathText(doc, '//article[contains(@class, "author-page")]/@style');
	if (visibility && visibility.indexOf("none")>-1) {
		if (getSearchResults(doc, url, true)) {
			return 'multiple';
		}
	} else {
		//The entity-detail DIV has all template code as SCRIPT childrens with some @id
		//and one other (active) child, which will determine the websiteType,
		//i.e. MA-PAPER-DETAIL,  MA-JOURNAL-DETAIL, MA-AUTHOR-DETAIL,
		//MA-AFFILIATION-DETAIL, or, MA-FOS-DETAIL
		var child = ZU.xpath(doc, '//div[contains(@class, "entity-detail")]/*[not(@id)]');
		if (child && child.length>0) {
			var websiteType = child[0].tagName;
			Z.debug(websiteType);
			if (websiteType == 'MA-PAPER-DETAIL') {
				var conf = ZU.xpathText(doc, '//article[contains(@class, "detail")]//section[contains(@class, "paper-venue")]//a[contains(@data-bind, "entityTypes.conference")]');
				if (conf) {
					return 'conferencePaper';
				}
				var jour = ZU.xpathText(doc, '//article[contains(@class, "detail")]//section[contains(@class, "paper-venue")]//a[contains(@data-bind, "entityTypes.journal")]');
				if (!jour) {
					return 'book';
				}
				return 'journalArticle';
			} else if (getSearchResults(doc, url, true)) {
				return 'multiple';
			}
		}

	}

	//The automatic testing does not work because of the monitoring.
	//Setting the correct type therefore here manually for three test cases:
	if (url == "https://academic.microsoft.com/#/detail/2084324324") {
		return 'journalArticle';
	}
	if (url == "https://academic.microsoft.com/#/detail/1479863711") {
		return 'book';
	}
	if (url == "https://academic.microsoft.com/#/detail/2093027094") {
		return 'conferencePaper';
	}
	//Tests for multiple:
	//  https://academic.microsoft.com/#/search?iq=%2540zotero%2540&q=zotero&filters=&from=0&sort=0
	//  https://academic.microsoft.com/#/detail/975761300
	//  https://academic.microsoft.com/#/detail/1337865506
	//But test also to navigate in the website by clicking on the links to
	//journal, author, affilation, subjects, or search something.
}


function getSearchResults(doc, url, checkOnly) {
	var items = {};
	var found = false;
	var rows;
	//The search results will sometimes stay invisible when switched to another
	//page, and therefore we have to differentiate the xpath accordingly.
	if (url.indexOf("#/search")>-1) {
		rows = ZU.xpath(doc, '//article[contains(@class, "search-page")]//paper-tile/article//section[contains(@class, "paper-title")]//a');
	} else {
		rows = ZU.xpath(doc, '//article[contains(@class, "author-page")]//paper-tile/article//section[contains(@class, "paper-title")]//a');
	}
	for (var i=0; i<rows.length; i++) {
		var href = rows[i].href;
		var title = ZU.trimInternal(rows[i].textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, url, false), function (items) {
			if (!items) {
				return true;
			}
			var articles = [];
			for (var i in items) {
				articles.push(i);
			}
			scrape(articles);
		});
	} else {
		scrape([url]);
	}
}


//Scrape a list of urls by extracting the pubID in each url, call the
//API to receive the data and create an item in Zotero out of this.
function scrape(urlList) {
	for (let index in urlList) {
		var url = urlList[index];
		var pubID = url.match(/\/detail\/(\d+)/)[1];
		
		var apiUrl = "https://academic.microsoft.com/api/browse/GetEntityDetails?entityId=" +
			pubID + "&correlationId=undefined";
		
		ZU.doGet(apiUrl, function(text) {
			//Z.debug(text)
			var data = JSON.parse(text);
			var type;
			if (data.entity.c) {
				type = "conferencePaper";
			} else if (data.entity.j) {
				type = "journalArticle";
			} else {
				type = "book";
			}
			var item = new Zotero.Item(type);
			item.itemID = pubID;
			item.title = data.entityTitle.replace(/\.$/, '');
			item.date = data.entity.d;//alternatively ZU.strToISO(data.date);
			if (data.abstract && data.abstract.replace(/\W/g, '').length>0) {
				//we don't want an abstract which contains only non-word characters
				item.abstractNote = data.abstract;
			}
			
			if (data.authors) {
				for (let i=0; i<data.authors.length; i++) {
					item.creators.push(ZU.cleanAuthor(data.authors[i].lt, "author"));
				}
			}

			if (data.entity.e) {
				item.publicationTitle = data.entity.e.vfn;
				item.journalAbbreviation = data.entity.e.vsn;
				item.volume = data.entity.e.v;
				item.issue = data.entity.e.i;
				item.pages = data.entity.e.fp;
				if (data.entity.e.lp) {
					item.pages += "â€“" + data.entity.e.lp;
				}
				item.DOI = data.entity.e.doi;
			}
			
			item.language = data.entity.l;
			
			if (data.fieldsOfStudy) {
				for (let i=0; i<data.fieldsOfStudy.length; i++) {
					item.tags.push(data.fieldsOfStudy[i].lt);
				}
			}
			
			//Save all links to the source in one HTML note.
			var sourcesNote = "<p>Data sources found by Microsoft Academic search engine:</p>";
			if (data.sources) {
				for (let i=0; i<data.sources.length; i++) {
					sourcesNote += '<a href="' +data.sources[i].u+ '">'+data.sources[i].u+'</a><br/>';
				}
			}
			item.notes.push({note: sourcesNote});
			
			item.attachments.push({
				url: "https://academic.microsoft.com/#/detail/"+data.entity.id,	
				snapshot: false
			});
			
			//add DOIs for books, but make this robust to addition of other item types
			if (item.DOI && !ZU.fieldIsValidForType("DOI", item.itemType)) {
				if (item.extra) {
					if (item.extra.search(/^DOI:/) == -1) {
						item.extra += '\nDOI: ' + item.DOI;
					}
				} else {
					item.extra = 'DOI: ' + item.DOI;
				}
			}
			/*
			delete data.references;
			delete data.sources;
			delete data.related;
			delete data.citations;
			Z.debug(data);
			*/
			
			item.complete();
		});
	}
}