function detectWeb(doc, url) {
	if (/\/s|pub\//.test(url)) return "multiple";
	if (url.includes("/browse/") && ZU.xpathText(doc, '//ol[@class="entryList"]/li/@id') !== null) return "multiple";
	if (url.includes("/rec/")) return "journalArticle";
	return false;
}
	

function doWeb(doc, url) {
	let isPhilArchive = /^https?:\/\/philarchive\.org\//.test(url);

	var ids = [];
	if (detectWeb(doc, url) == "multiple") {
		var items = {};
		var titles = ZU.xpath(doc, '//li/span[@class="citation"]//span[contains (@class, "articleTitle")]');
		var identifiers = ZU.xpath(doc, '//ol[@class="entryList"]/li/@id');
		for (var i in titles) {
			items[identifiers[i].textContent] = titles[i].textContent;
		}
		Zotero.selectItems(items, function (items) {
			if (!items) {
				return;
			}
			for (var i in items) {
				ids.push(i.replace(/^e/, ""));
			}
			scrape(ids, isPhilArchive);
		});
	}
	else {
		var identifier = url.match(/(\/rec\/)([A-Z-\d]+)/)[2];
		// Z.debug(identifier)
		scrape([identifier], isPhilArchive);
	}
}

function scrape(identifiers, isPhilArchive) {
	for (let id of identifiers) {
		let bibtexURL = "/export.html?__format=bib&eId=" + id + "&formatName=BibTeX";
		Zotero.Utilities.HTTP.doGet(bibtexURL, function (text) {
			// remove line breaks, then match match the bibtex.
			var bibtex = text.replace(/\n/g, "").match(/<pre class='export'>.+<\/pre>/)[0];
			var url = "/rec/" + id;
			var translator = Zotero.loadTranslator("import");
			translator.setTranslator("9cb70025-a888-4a29-a210-93ec52da40d4");
			translator.setString(bibtex);
			translator.setHandler("itemDone", function (obj, item) {
				if (isPhilArchive) {
					item.libraryCatalog = 'PhilArchive';
					item.url = `https://philarchive.org/rec/${id}`; // full-text
					item.attachments.push({
						title: 'Full Text PDF',
						mimeType: 'application/pdf',
						url: `/archive/${id}`
					});
				}
				
				item.attachments.push({ url, title: "Snapshot", mimeType: "text/html" });
				item.complete();
			});
			translator.translate();
		});
	}
}