const excludeRe = /\b(commentary|statement)\b/i;

function detectWeb(doc, _url) {
	if (doc.querySelector('.tbi-article')
		&& !excludeRe.test(attr(doc, 'meta[name="keywords"]', 'content'))) {
		// the site calls some articles "reports" and some "papers," but in
		// Zotero terms they're really all reports (freestanding short-form works)
		return "report";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.search-result');
	for (let row of rows) {
		if (excludeRe.test(text(row, '.type-date'))) continue;
		let href = attr(row, 'a', 'href');
		let title = ZU.trimInternal(text(row, 'a'));
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	var translator = Zotero.loadTranslator('web');
	// Embedded Metadata
	translator.setTranslator('951c027d-74ac-47d4-a107-9c3069ab7b48');
	translator.setDocument(doc);
	
	translator.setHandler('itemDone', function (obj, item) {
		item.abstractNote = text(doc, '.text-block p');
		// this won't stick around...
		item.date = ZU.strToISO(text('.tbi-article__hero-text__meta-type__date span'));
		item.institution = 'Tony Blair Institute for Global Change';
		
		item.creators = [];
		for (let author of doc.querySelectorAll('.article-info h6')) {
			let name = ZU.trimInternal(author.textContent);
			item.creators.push(ZU.cleanAuthor(name, 'author'));
		}
		
		item.attachments = [];
		item.attachments.push({
			title: 'Full Text PDF',
			mimeType: 'application/pdf',
			url: attr(doc, 'a[href$=".pdf"]', 'href')
		});
		
		item.tags = [];
		item.complete();
	});

	translator.getTranslatorObject(function (trans) {
		trans.itemType = "report";
		trans.doWeb(doc, url);
	});
}