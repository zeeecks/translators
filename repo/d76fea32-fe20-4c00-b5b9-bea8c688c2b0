function detectWeb(doc, url) {
	if (url.includes("action=bibdat")) {
		return "patent";
	}
	if (url.includes("action=treffer") && Object.keys(getSearchResults(doc)).length) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc) {
	var results = {};
	
	var rows = ZU.xpath(doc, '//div[@id="inhalt"]/form/table/tbody/tr');
	
	for (var i = 0, n = rows.length; i < n; i++) {
		var columns = ZU.xpath(rows[i], './td');
		
		var href = ZU.xpath(columns[0], './a')[0].href;
		var name = ZU.trimInternal(columns[0].textContent);
		name = name + " \"" + cleanTitle(columns[1]) + "\"";
		
		results[href] = name;
	}
	return results;
}


var labelMap = {
	AN: "applicationNumber",
	AB: "abstractNote",
};

function cleanTitle(value) {
	var titles = value.textContent.split(/\[[A-Z]{2}\]/);

	if (titles.length < 2) {
		return "";
	}
	var title = ZU.trimInternal(titles[1]);
	if (title == title.toUpperCase()) {
		title = ZU.capitalizeTitle(title, true);
	}
	return title;
}

function cleanName(name, inventors) {
	name = ZU.trimInternal(name);
	if (name == "") return "";
	
	var parts = name.split(",");

	parts = parts.map(
		function (part) {
			part = ZU.trimInternal(part);
			if (part.toUpperCase() == part) {
				part = ZU.capitalizeTitle(part, true);
			}
			return part;
		}
	);

	// Last is always country code, so only return first part if there are only two
	// if second part starts with a number it is a postal code and first part is
	// either a company name or a name without delimiter between last and given name
	if (parts.length <= 2 || parts[1].match(/^[0-9]/)) {
		if (inventors) {
			name = parts[0].split(/ /);
			return name.shift() + ", " + name.join(" ");
		}
		else {
			return parts[0];
		}
	}
	else {
		return parts[0] + ", " + parts[1];
	}
}

function scrape(doc, url) {
	var newItem = new Zotero.Item("patent");

	var ipcs = [];

	var rows = ZU.xpath(doc, '//table[@class="tab_detail"]/tbody/tr');
	
	for (var i = 0, n = rows.length; i < n; i++) {
		var columns = ZU.xpath(rows[i], './td');

		var label;
		var value;
		if (columns.length == 4) {
			label = columns[2].textContent;
			value = columns[3];
		}
		else if (columns.length == 3) {
			label = columns[1].textContent;
			value = columns[2];
		}
		if (!value) continue;
		
		// Z.debug("label: " + label);
		// Z.debug("value: " + value.textContent);
		
		switch (label) {
			case "TI":
				newItem.title = cleanTitle(value);
				break;
			case "IN":
				newItem.creators = [];
				var creators = value.textContent.split(";");
				for (let creator of creators) {
					creator = cleanName(creator, true);
					if (creator != "") {
						newItem.creators.push(ZU.cleanAuthor(creator, "inventor", true));
					}
				}
				break;
			case "PA":
				var assigneeNames = value.textContent.split(";").map(name => cleanName(name, false)).filter(name => name != "");
				newItem.assignee = assigneeNames.join("; ");
				break;
			case "ICM":
			case "ICS":
				var ipc = ZU.xpathText(value, './a').split(",");
				for (let name of ipc) {
					ipcs.push(ZU.trimInternal(name));
				}
				break;
			case "PUB":
				var date = value.textContent.replace(/\s+/g, '').split(".");
				newItem.date = date[2] + "-" + date[1] + "-" + date[0];
				break;
			case "AD":
				var filingDate = value.textContent.replace(/\s+/g, '').split(".");
				newItem.filingDate = filingDate[2] + "-" + filingDate[1] + "-" + filingDate[0];
				break;
			default:
				if (labelMap[label]) {
					newItem[labelMap[label]] = ZU.trimInternal(value.textContent);
				}
		}
	}

	var pn = url.match(/\bdocid=([^&#]*)/)[1];
	
	newItem.url = "http://depatisnet.dpma.de/DepatisNet/depatisnet?action=bibdat&docid=" + pn;
	
	newItem.patentNumber = pn.replace(/^([A-Z]{2})[0]*(.*)$/, "$1$2");

	// some entries (especially JP and RU patents) have no titles listed in DepatisNet
	// use the patentnumber instead for these entries
	if (!newItem.title) {
		newItem.title = newItem.patentNumber;
	}

	newItem.extra = "IPC: " + ipcs.join("; ");

	newItem.attachments.push({
		title: "DEPATISnet patent record",
		url: url,
		snapshot: false
	});
	
	var pages = ZU.xpathText(doc, '//div[@id="inhalt"]/h2');
	// e.g. "Dokument   DE000004446098C2   (Seiten: 8)"
	// but there is no PDF available when we have "Seiten: 0"
	if (pages && /(Seiten|Pages):\s*[1-9][0-9]*/.test(pages)) {
		var pdfurl = "https://depatisnet.dpma.de/DepatisNet/depatisnet/" + pn + "_all_pages.pdf?window=1&space=menu&content=download_doc_verify&action=download_doc&docid=" + pn;
		newItem.attachments.push({
			title: "Fulltext",
			url: pdfurl,
			mimeType: "application/pdf"
		});
	}

	newItem.complete();
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		var results = getSearchResults(doc);

		Z.selectItems(results,
			function (items) {
				if (!items) return;

				var urls = [];
				for (var j in items) {
					urls.push(j);
				}
				ZU.processDocuments(urls, scrape);
			}
		);
	}
	else {
		scrape(doc, url);
	}
}