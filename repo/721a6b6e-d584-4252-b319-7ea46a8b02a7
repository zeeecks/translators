function detectWeb(doc, url) {
	if (url.includes('/Record/') && doc.querySelector('#record')) {
		return "journalArticle";
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.result a.title');
	for (let row of rows) {
		let href = row.href;
		let title = ZU.trimInternal(row.textContent);
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}

function scrape(doc, url) {
	// the EndNote metadata is somehow better than the MARC
	// (or at least Zotero imports it better)
	let exportURL;
	
	let id = attr(doc, '#record_id', 'value');
	if (id) {
		// this should always work, so the fallback below is Just In Case
		exportURL = `https://search.mandumah.com/Record/${id}/Export?style=EndNote`;
	}
	if (!exportURL) {
		exportURL = attr(doc, '#exportMenu', 'li a[href*="style=EndNote"]');
	}

	let pdfURL = attr(doc, '.downloadPdfImg', 'href');

	ZU.doGet(exportURL, function (exportText) {
		// a janky regex to replace Arabic commas in author names with Latin commas
		exportText = exportText.replace(/^(\s*%[AEY].*)،/m, '$1,');
		
		let translator = Zotero.loadTranslator("import");
		// Refer/BibIX
		translator.setTranslator("881f60f2-0802-411a-9228-ce5f47b64c7d");
		translator.setString(exportText);
		translator.setHandler("itemDone", function (obj, item) {
			if (item.publicationTitle && item.itemType == 'book') {
				item.itemType = 'journalArticle';
			}
			
			// strip leading zeroes
			for (let prop of ['volume', 'issue', 'seriesNumber']) {
				if (!item[prop]) continue;
				item[prop] = item[prop].replace(/^\s*0+/, '');
			}
			
			if (item.url) {
				item.url = item.url.split(', ')[0];
			}
			else {
				item.url = url;
			}
			
			// a couple things are missing from the .enw export
			for (let tr of doc.querySelectorAll('table.citation tr')) {
				let key = ZU.trimInternal(text(tr, 'th'));
				let value = text(tr, 'td');
				
				if (key == 'ISSN:') {
					item.ISSN = ZU.cleanISSN(value);
				}
				else if (key == 'الصفحات:' || key == 'Pages:') {
					item.pages = value.replace(' - ', '-');
				}
				else if (key == 'مكان انعقاد المؤتمر:' || key == 'Conference Venue:') {
					item.itemType = 'conferencePaper';
					item.place = value;
					item.proceedingsTitle = item.publicationTitle;
					delete item.publicationTitle;
				}
			}
			
			if (pdfURL) {
				item.attachments.push({
					url: pdfURL,
					title: "Full Text PDF",
					mimeType: "application/pdf"
				});
			}
			
			item.complete();
		});
		translator.translate();
	});
}