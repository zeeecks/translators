function detectWeb(doc, _url) {
	// The subtree changes from multiple search results to a single result
	// when clicking on one entry or back to the search results, and thus
	// we have to monitor this.
	Z.monitorDOMChanges(ZU.xpath(doc, '//search-app')[0]);

	// Plural with "s" vs. singular without
	if (ZU.xpathText(doc, '//search-app/search-results')) {
		return "multiple";
	}
	if (ZU.xpathText(doc, '//search-app/search-result')
		|| doc.querySelector('meta[name^="citation_patent_"]')) {
		return "patent";
	}
	return false;
}


function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		var urlParts = url.split('/?');
		var jsonUrl = urlParts[0] + '/xhr/query?url=' + encodeURIComponent(urlParts[1]);
		// Z.debug(jsonUrl);
		ZU.doGet(jsonUrl, function (text) {
			var json = JSON.parse(text);
			var results = json.results.cluster[0].result;
			var selectResults = {};
			for (let i = 0; i < results.length; i++) {
				selectResults[i] = ZU.cleanTags(results[i].patent.title);
			}
			Zotero.selectItems(selectResults, function (items) {
				if (!items) return;
				for (var i in items) {
					let resultUrl = urlParts[0] + '/patent/' + results[i].patent.publication_number;
					scrapeJson(results[i].patent, resultUrl);
				}
			});
		});
	}
	else {
		// Some old urls miss the language part, which we have to add before
		// calling other urls.
		var includeLanguageCode = url.match(/\/patent\/[^/?#]+\/[a-z][a-z]\b/);
		if (!includeLanguageCode) {
			url = url.replace(/(\/patent\/[^/?#]+)\b/, "$1/en");
		}
		var xhrUrl = url.replace('/patent/', '/xhr/result?id=patent/');
		ZU.doGet(xhrUrl, function (text) {
			// Z.debug(text);
			var parser = new DOMParser();
			var doc = parser.parseFromString(text, "text/html");
			scrape(doc, url);
		});
	}
}

function scrape(doc, url) {
	var metadata = doc.querySelectorAll('*[itemprop]');
	var json = {};
	for (let i = 0; i < metadata.length; i++) {
		let label = metadata[i].getAttribute('itemprop');
		// We stop before going into the publications, related entries etc.
		if (label == 'description' || label == 'pubs') break;
		let value = microdataValue(metadata[i], true);
		if (label && value) {
			if (metadata[i].getAttribute('repeat') === '') {
				if (!json[label]) json[label] = [];
				json[label].push(value);
			}
			else if (!json[label]) {
				// don't overwrite values
				json[label] = value;
				// else Z.debug(label)
			}
		}
	}
	scrapeJson(json, url, doc);
}


function microdataValue(propertyNode, firstCall) {
	if (propertyNode.hasAttribute("itemscope") && firstCall) {
		var metadata = propertyNode.querySelectorAll('*[itemprop]');
		var innerJson = {};
		for (let i = 0; i < metadata.length; i++) {
			let label = metadata[i].getAttribute('itemprop');
			let value = microdataValue(metadata[i], false);
			innerJson[label] = value;
		}
		return innerJson;
	}
	switch (propertyNode.tagName.toLowerCase()) {
		case "meta":
			return propertyNode.getAttribute("content");
		case "audio":
		case "embed":
		case "iframe":
		case "img":
		case "source":
		case "track":
		case "video":
			return propertyNode.getAttribute("src");
		case "a":
		case "area":
		case "link":
			return propertyNode.getAttribute("href");
		case "object":
			return propertyNode.getAttribute("data");
		case "data":
		case "meter":
			return propertyNode.getAttribute("value");
		case "time":
			return propertyNode.getAttribute("datetime");
		case "span":// non-standard, but can occur
			if (propertyNode.childNodes.length > 1 && propertyNode.getAttribute("content")) {
				return propertyNode.getAttribute("content");
			}
			return propertyNode.textContent;
		default:
			return propertyNode.textContent;
	}
}


function scrapeJson(json, url, doc) {
	// Z.debug(json);
	var item = new Zotero.Item('patent');
	item.title = ZU.cleanTags(json.title).replace(/\.\s*$/, '');
	if (json.inventor) {
		if (typeof json.inventor === 'string') json.inventor = [json.inventor];
		for (let i = 0; i < json.inventor.length; i++) {
			item.creators.push(ZU.cleanAuthor(json.inventor[i], 'inventor'));
		}
	}
	item.issueDate = json.publicationDate || json.publication_date;
	item.filingDate = json.filingDate || json.filing_date;
	item.patentNumber = json.publicationNumber || json.publication_number;
	if (json.assigneeOriginal && !(typeof json.assigneeOriginal === 'string')) {
		item.assignee = json.assigneeOriginal.join(', '); // or assigneeCurrent
	}
	else {
		item.assignee = json.assigneeOriginal || json.assignee;
	}
	item.applicationNumber = (json.applicationNumber || '').replace(/[/,]/g, '');
	// This status is sometimes not what would be expected
	// if (json.legalStatusIfi) item.legalStatus = json.legalStatusIfi.status;
	item.country = json.countryCode;
	if (item.country) item.issuingAuthority = getPatentOffice(item.country);
	item.language = json.primaryLanguage;
	
	// Keywords
	if (json.priorArtKeywords) {
		for (let i = 0; i < json.priorArtKeywords.length; i++) {
			item.tags.push(json.priorArtKeywords[i]);
		}
	}
	
	// Abstract
	if (json.abstract) {
		item.abstractNote = json.abstract.content;
	}
	else if (doc) {
		item.abstractNote = attr(doc, 'meta[name="description"]', 'content');
	}
	
	// Classifications
	if (json.cpcs) {
		var classifications = [];
		for (let i = 0; i < json.cpcs.length; i++) {
			if (json.cpcs[i].Leaf && !json.cpcs[i].cpcs) {
				classifications.push(json.cpcs[i].Code + ': ' + json.cpcs[i].Description);
			}
		}
		if (classifications.length > 0) {
			item.notes.push({ note: "<h2>Classifications</h2>\n" + classifications.join("<br/>\n") });
		}
	}
	
	item.url = url;
	let pdfurl = json.pdfLink || json.pdf;
	if (pdfurl) {
		// Relative links don't resolve correctly in all cases. Let's make sure we're getting this all from
		// the right place on the google API
		if (!pdfurl.includes("https://")) {
			pdfurl = "https://patentimages.storage.googleapis.com/" + pdfurl;
		}
		// Z.debug(pdfurl);
		item.attachments.push({
			url: pdfurl,
			title: "Full Text PDF",
			mimeType: "application/pdf"
		});
	}
	
	item.complete();
}


function getPatentOffice(number) {
	// get the PatentOffice from the first two letters of the patentNumber
	var country;
	if (number.indexOf('EP') === 0) {
		country = 'European Union';
	}
	else if (number.indexOf('US') === 0) {
		country = 'United States';
	}
	else if (number.indexOf('WO') === 0) {
		country = 'World Intellectual Property Organization';
	}
	else if (number.indexOf('CN') === 0) {
		country = 'China';
	}
	else if (number.indexOf('CA') === 0) {
		country = 'Canada';
	}
	else if (number.indexOf('DE') === 0) {
		country = 'Germany';
	}
	return country;
}