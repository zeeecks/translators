function detectWeb(doc, url) {
	if (doc.querySelector('#bibtex-section')) {
		if (url.includes('journals')) {
			return "journalArticle";
		}
		else if (url.includes('conf')) {
			return "conferencePaper";
		}
		else if (url.includes('series') || url.includes('reference')) {
			return "bookSection";
		}
		else if (url.includes('books')) {
			return "book";
		}
		else if (url.includes('phd')) {
			return "thesis";
		}
		else { // generic fallback
			return "journalArticle";
		}
	}
	else if (getSearchResults(doc, true)) {
		return "multiple";
	}
	return false;
}


function scrape(doc, _url) {
	let allData = doc.querySelectorAll('#bibtex-section');
	let firstData = allData[0];
	var firstDataText = firstData.textContent.replace(/ ee\s*=/, " url ="); // e.g. ee = {http://dx.doi.org/10.1007/978-3-319-00035-0_37},

	// conferencePapers and bookSections are linked in DBLP
	// with the crossref field to the second BibTeX entry
	// for the proceeding or book. In these cases the following
	// lines (if-part) are handling the second entry and extracting
	// relevant fields and save it (later) to the main entry.
	var secondData = allData[1];
	if (secondData) {
		var secondDataText = secondData.textContent;

		var trans = Zotero.loadTranslator('import');
		trans.setTranslator('9cb70025-a888-4a29-a210-93ec52da40d4');// https://github.com/zotero/translators/blob/master/BibTeX.js
		trans.setString(secondDataText);

		trans.setHandler('itemDone', function (obj, item) {
			scrapeMainPart(firstDataText, item);
		});

		trans.translate();
	}
	else { // if there are no secondData: scrape without additional data
		scrapeMainPart(firstDataText, null);
	}
}


function scrapeMainPart(firstDataText, secondDataItem) {
	// scrape from the firstDataText and if secondDataItem
	// is not null, add/update these information
	var trans = Zotero.loadTranslator('import');
	trans.setTranslator('9cb70025-a888-4a29-a210-93ec52da40d4');// https://github.com/zotero/translators/blob/master/BibTeX.js
	trans.setString(firstDataText);

	trans.setHandler('itemDone', function (obj, item) {
		if (secondDataItem) {
			if (secondDataItem.title && item.itemType == "conferencePaper") item.proceedingsTitle = secondDataItem.title;
			if (secondDataItem.title && item.itemType == "bookSection") item.booktitle = secondDataItem.titel;
			if (secondDataItem.creators && secondDataItem.creators.length > 0) item.creators = item.creators.concat(secondDataItem.creators);
			if (secondDataItem.publisher && !item.publisher) item.publisher = secondDataItem.publisher;
			if (secondDataItem.series && !item.series) item.series = secondDataItem.series;
			if (secondDataItem.volume && !item.volume) item.volume = secondDataItem.volume;
			if (secondDataItem.ISBN && !item.ISBN) item.ISBN = secondDataItem.ISBN;
		}
		
		// Assume that the url contains an doi. If the item does not
		// yet contain a doi, then save the doi and delete the url.
		// If the item contains the doi corresponding to the url
		// then just delete the url and keep the doi.
		if (item.url && item.url.search(/^https?:\/\/(?:dx\.)?doi\.org\/10\./i) != -1) {
			var doi = ZU.cleanDOI(item.url);
			if (doi && (!item.DOI || item.DOI == doi)) {
				item.DOI = doi;
				delete item.url;
			}
		}
		
		item.complete();
	});

	trans.translate();
}

function getSearchResults(doc, checkOnly) {
	var items = {};
	var found = false;
	var rows = doc.querySelectorAll('.entry');
	for (let row of rows) {
		let href = attr(row, 'a[href*="view=bibtex"]', 'href');
		let title = text(row, '.title');
		if (!href || !title) continue;
		if (checkOnly) return true;
		found = true;
		items[href] = title;
	}
	return found ? items : false;
}

function doWeb(doc, url) {
	if (detectWeb(doc, url) == "multiple") {
		Zotero.selectItems(getSearchResults(doc, false), function (items) {
			if (items) ZU.processDocuments(Object.keys(items), scrape);
		});
	}
	else {
		scrape(doc, url);
	}
}